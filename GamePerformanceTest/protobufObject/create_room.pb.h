// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: create_room.proto

#ifndef PROTOBUF_create_5froom_2eproto__INCLUDED
#define PROTOBUF_create_5froom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "filter_room.pb.h"
#include "player.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_create_5froom_2eproto();
void protobuf_AssignDesc_create_5froom_2eproto();
void protobuf_ShutdownFile_create_5froom_2eproto();

class BINCreateRoomRequest;
class BINCreateRoomResponse;

// ===================================================================

class BINCreateRoomRequest : public ::google::protobuf::Message {
 public:
  BINCreateRoomRequest();
  virtual ~BINCreateRoomRequest();

  BINCreateRoomRequest(const BINCreateRoomRequest& from);

  inline BINCreateRoomRequest& operator=(const BINCreateRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINCreateRoomRequest& default_instance();

  void Swap(BINCreateRoomRequest* other);

  // implements Message ----------------------------------------------

  BINCreateRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINCreateRoomRequest& from);
  void MergeFrom(const BINCreateRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 zoneId = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // required int32 roomGroupId = 2;
  inline bool has_roomgroupid() const;
  inline void clear_roomgroupid();
  static const int kRoomGroupIdFieldNumber = 2;
  inline ::google::protobuf::int32 roomgroupid() const;
  inline void set_roomgroupid(::google::protobuf::int32 value);

  // optional string roomName = 3;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomNameFieldNumber = 3;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  inline ::std::string* release_roomname();
  inline void set_allocated_roomname(::std::string* roomname);

  // required bool vipRoom = 4;
  inline bool has_viproom() const;
  inline void clear_viproom();
  static const int kVipRoomFieldNumber = 4;
  inline bool viproom() const;
  inline void set_viproom(bool value);

  // optional int32 minBet = 5;
  inline bool has_minbet() const;
  inline void clear_minbet();
  static const int kMinBetFieldNumber = 5;
  inline ::google::protobuf::int32 minbet() const;
  inline void set_minbet(::google::protobuf::int32 value);

  // optional int32 playerSize = 6;
  inline bool has_playersize() const;
  inline void clear_playersize();
  static const int kPlayerSizeFieldNumber = 6;
  inline ::google::protobuf::int32 playersize() const;
  inline void set_playersize(::google::protobuf::int32 value);

  // optional string password = 7;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 7;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:BINCreateRoomRequest)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_roomgroupid();
  inline void clear_has_roomgroupid();
  inline void set_has_roomname();
  inline void clear_has_roomname();
  inline void set_has_viproom();
  inline void clear_has_viproom();
  inline void set_has_minbet();
  inline void clear_has_minbet();
  inline void set_has_playersize();
  inline void clear_has_playersize();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 zoneid_;
  ::google::protobuf::int32 roomgroupid_;
  ::std::string* roomname_;
  bool viproom_;
  ::google::protobuf::int32 minbet_;
  ::std::string* password_;
  ::google::protobuf::int32 playersize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_create_5froom_2eproto();
  friend void protobuf_AssignDesc_create_5froom_2eproto();
  friend void protobuf_ShutdownFile_create_5froom_2eproto();

  void InitAsDefaultInstance();
  static BINCreateRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINCreateRoomResponse : public ::google::protobuf::Message {
 public:
  BINCreateRoomResponse();
  virtual ~BINCreateRoomResponse();

  BINCreateRoomResponse(const BINCreateRoomResponse& from);

  inline BINCreateRoomResponse& operator=(const BINCreateRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINCreateRoomResponse& default_instance();

  void Swap(BINCreateRoomResponse* other);

  // implements Message ----------------------------------------------

  BINCreateRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINCreateRoomResponse& from);
  void MergeFrom(const BINCreateRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional .BINRoomPlay roomPlay = 3;
  inline bool has_roomplay() const;
  inline void clear_roomplay();
  static const int kRoomPlayFieldNumber = 3;
  inline const ::BINRoomPlay& roomplay() const;
  inline ::BINRoomPlay* mutable_roomplay();
  inline ::BINRoomPlay* release_roomplay();
  inline void set_allocated_roomplay(::BINRoomPlay* roomplay);

  // optional .BINPlayer myPlayer = 4;
  inline bool has_myplayer() const;
  inline void clear_myplayer();
  static const int kMyPlayerFieldNumber = 4;
  inline const ::BINPlayer& myplayer() const;
  inline ::BINPlayer* mutable_myplayer();
  inline ::BINPlayer* release_myplayer();
  inline void set_allocated_myplayer(::BINPlayer* myplayer);

  // @@protoc_insertion_point(class_scope:BINCreateRoomResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_roomplay();
  inline void clear_has_roomplay();
  inline void set_has_myplayer();
  inline void clear_has_myplayer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::BINRoomPlay* roomplay_;
  ::BINPlayer* myplayer_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_create_5froom_2eproto();
  friend void protobuf_AssignDesc_create_5froom_2eproto();
  friend void protobuf_ShutdownFile_create_5froom_2eproto();

  void InitAsDefaultInstance();
  static BINCreateRoomResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINCreateRoomRequest

// required int32 zoneId = 1;
inline bool BINCreateRoomRequest::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINCreateRoomRequest::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINCreateRoomRequest::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINCreateRoomRequest::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 BINCreateRoomRequest::zoneid() const {
  return zoneid_;
}
inline void BINCreateRoomRequest::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required int32 roomGroupId = 2;
inline bool BINCreateRoomRequest::has_roomgroupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINCreateRoomRequest::set_has_roomgroupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINCreateRoomRequest::clear_has_roomgroupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINCreateRoomRequest::clear_roomgroupid() {
  roomgroupid_ = 0;
  clear_has_roomgroupid();
}
inline ::google::protobuf::int32 BINCreateRoomRequest::roomgroupid() const {
  return roomgroupid_;
}
inline void BINCreateRoomRequest::set_roomgroupid(::google::protobuf::int32 value) {
  set_has_roomgroupid();
  roomgroupid_ = value;
}

// optional string roomName = 3;
inline bool BINCreateRoomRequest::has_roomname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINCreateRoomRequest::set_has_roomname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINCreateRoomRequest::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINCreateRoomRequest::clear_roomname() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    roomname_->clear();
  }
  clear_has_roomname();
}
inline const ::std::string& BINCreateRoomRequest::roomname() const {
  return *roomname_;
}
inline void BINCreateRoomRequest::set_roomname(const ::std::string& value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void BINCreateRoomRequest::set_roomname(const char* value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void BINCreateRoomRequest::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINCreateRoomRequest::mutable_roomname() {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  return roomname_;
}
inline ::std::string* BINCreateRoomRequest::release_roomname() {
  clear_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomname_;
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINCreateRoomRequest::set_allocated_roomname(::std::string* roomname) {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (roomname) {
    set_has_roomname();
    roomname_ = roomname;
  } else {
    clear_has_roomname();
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool vipRoom = 4;
inline bool BINCreateRoomRequest::has_viproom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINCreateRoomRequest::set_has_viproom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINCreateRoomRequest::clear_has_viproom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINCreateRoomRequest::clear_viproom() {
  viproom_ = false;
  clear_has_viproom();
}
inline bool BINCreateRoomRequest::viproom() const {
  return viproom_;
}
inline void BINCreateRoomRequest::set_viproom(bool value) {
  set_has_viproom();
  viproom_ = value;
}

// optional int32 minBet = 5;
inline bool BINCreateRoomRequest::has_minbet() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINCreateRoomRequest::set_has_minbet() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINCreateRoomRequest::clear_has_minbet() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINCreateRoomRequest::clear_minbet() {
  minbet_ = 0;
  clear_has_minbet();
}
inline ::google::protobuf::int32 BINCreateRoomRequest::minbet() const {
  return minbet_;
}
inline void BINCreateRoomRequest::set_minbet(::google::protobuf::int32 value) {
  set_has_minbet();
  minbet_ = value;
}

// optional int32 playerSize = 6;
inline bool BINCreateRoomRequest::has_playersize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINCreateRoomRequest::set_has_playersize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINCreateRoomRequest::clear_has_playersize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINCreateRoomRequest::clear_playersize() {
  playersize_ = 0;
  clear_has_playersize();
}
inline ::google::protobuf::int32 BINCreateRoomRequest::playersize() const {
  return playersize_;
}
inline void BINCreateRoomRequest::set_playersize(::google::protobuf::int32 value) {
  set_has_playersize();
  playersize_ = value;
}

// optional string password = 7;
inline bool BINCreateRoomRequest::has_password() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BINCreateRoomRequest::set_has_password() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BINCreateRoomRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BINCreateRoomRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& BINCreateRoomRequest::password() const {
  return *password_;
}
inline void BINCreateRoomRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void BINCreateRoomRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void BINCreateRoomRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINCreateRoomRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* BINCreateRoomRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINCreateRoomRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BINCreateRoomResponse

// required bool responseCode = 1;
inline bool BINCreateRoomResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINCreateRoomResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINCreateRoomResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINCreateRoomResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINCreateRoomResponse::responsecode() const {
  return responsecode_;
}
inline void BINCreateRoomResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINCreateRoomResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINCreateRoomResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINCreateRoomResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINCreateRoomResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINCreateRoomResponse::message() const {
  return *message_;
}
inline void BINCreateRoomResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINCreateRoomResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINCreateRoomResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINCreateRoomResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINCreateRoomResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINCreateRoomResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .BINRoomPlay roomPlay = 3;
inline bool BINCreateRoomResponse::has_roomplay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINCreateRoomResponse::set_has_roomplay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINCreateRoomResponse::clear_has_roomplay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINCreateRoomResponse::clear_roomplay() {
  if (roomplay_ != NULL) roomplay_->::BINRoomPlay::Clear();
  clear_has_roomplay();
}
inline const ::BINRoomPlay& BINCreateRoomResponse::roomplay() const {
  return roomplay_ != NULL ? *roomplay_ : *default_instance_->roomplay_;
}
inline ::BINRoomPlay* BINCreateRoomResponse::mutable_roomplay() {
  set_has_roomplay();
  if (roomplay_ == NULL) roomplay_ = new ::BINRoomPlay;
  return roomplay_;
}
inline ::BINRoomPlay* BINCreateRoomResponse::release_roomplay() {
  clear_has_roomplay();
  ::BINRoomPlay* temp = roomplay_;
  roomplay_ = NULL;
  return temp;
}
inline void BINCreateRoomResponse::set_allocated_roomplay(::BINRoomPlay* roomplay) {
  delete roomplay_;
  roomplay_ = roomplay;
  if (roomplay) {
    set_has_roomplay();
  } else {
    clear_has_roomplay();
  }
}

// optional .BINPlayer myPlayer = 4;
inline bool BINCreateRoomResponse::has_myplayer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINCreateRoomResponse::set_has_myplayer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINCreateRoomResponse::clear_has_myplayer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINCreateRoomResponse::clear_myplayer() {
  if (myplayer_ != NULL) myplayer_->::BINPlayer::Clear();
  clear_has_myplayer();
}
inline const ::BINPlayer& BINCreateRoomResponse::myplayer() const {
  return myplayer_ != NULL ? *myplayer_ : *default_instance_->myplayer_;
}
inline ::BINPlayer* BINCreateRoomResponse::mutable_myplayer() {
  set_has_myplayer();
  if (myplayer_ == NULL) myplayer_ = new ::BINPlayer;
  return myplayer_;
}
inline ::BINPlayer* BINCreateRoomResponse::release_myplayer() {
  clear_has_myplayer();
  ::BINPlayer* temp = myplayer_;
  myplayer_ = NULL;
  return temp;
}
inline void BINCreateRoomResponse::set_allocated_myplayer(::BINPlayer* myplayer) {
  delete myplayer_;
  myplayer_ = myplayer;
  if (myplayer) {
    set_has_myplayer();
  } else {
    clear_has_myplayer();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_create_5froom_2eproto__INCLUDED
