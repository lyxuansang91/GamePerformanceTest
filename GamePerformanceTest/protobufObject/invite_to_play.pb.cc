// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: invite_to_play.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "invite_to_play.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINLookUpUserToInviteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINLookUpUserToInviteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINLookUpUserToInviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINLookUpUserToInviteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINInviteToRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINInviteToRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINInviteToRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINInviteToRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINCancelInvitationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINCancelInvitationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINCancelInvitationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINCancelInvitationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINRelyInvitationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINRelyInvitationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINRelyInvitationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINRelyInvitationResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_invite_5fto_5fplay_2eproto() {
  protobuf_AddDesc_invite_5fto_5fplay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "invite_to_play.proto");
  GOOGLE_CHECK(file != NULL);
  BINLookUpUserToInviteRequest_descriptor_ = file->message_type(0);
  static const int BINLookUpUserToInviteRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpUserToInviteRequest, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpUserToInviteRequest, maxresult_),
  };
  BINLookUpUserToInviteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINLookUpUserToInviteRequest_descriptor_,
      BINLookUpUserToInviteRequest::default_instance_,
      BINLookUpUserToInviteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpUserToInviteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpUserToInviteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINLookUpUserToInviteRequest));
  BINLookUpUserToInviteResponse_descriptor_ = file->message_type(1);
  static const int BINLookUpUserToInviteResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpUserToInviteResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpUserToInviteResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpUserToInviteResponse, suggestusers_),
  };
  BINLookUpUserToInviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINLookUpUserToInviteResponse_descriptor_,
      BINLookUpUserToInviteResponse::default_instance_,
      BINLookUpUserToInviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpUserToInviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpUserToInviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINLookUpUserToInviteResponse));
  BINInviteToRoomRequest_descriptor_ = file->message_type(2);
  static const int BINInviteToRoomRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInviteToRoomRequest, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInviteToRoomRequest, targetuserids_),
  };
  BINInviteToRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINInviteToRoomRequest_descriptor_,
      BINInviteToRoomRequest::default_instance_,
      BINInviteToRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInviteToRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInviteToRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINInviteToRoomRequest));
  BINInviteToRoomResponse_descriptor_ = file->message_type(3);
  static const int BINInviteToRoomResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInviteToRoomResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInviteToRoomResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInviteToRoomResponse, inviteruserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInviteToRoomResponse, inviterusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInviteToRoomResponse, roomplay_),
  };
  BINInviteToRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINInviteToRoomResponse_descriptor_,
      BINInviteToRoomResponse::default_instance_,
      BINInviteToRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInviteToRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInviteToRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINInviteToRoomResponse));
  BINCancelInvitationRequest_descriptor_ = file->message_type(4);
  static const int BINCancelInvitationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCancelInvitationRequest, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCancelInvitationRequest, targetuserid_),
  };
  BINCancelInvitationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINCancelInvitationRequest_descriptor_,
      BINCancelInvitationRequest::default_instance_,
      BINCancelInvitationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCancelInvitationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCancelInvitationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINCancelInvitationRequest));
  BINCancelInvitationResponse_descriptor_ = file->message_type(5);
  static const int BINCancelInvitationResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCancelInvitationResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCancelInvitationResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCancelInvitationResponse, inviteruserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCancelInvitationResponse, roomindex_),
  };
  BINCancelInvitationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINCancelInvitationResponse_descriptor_,
      BINCancelInvitationResponse::default_instance_,
      BINCancelInvitationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCancelInvitationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCancelInvitationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINCancelInvitationResponse));
  BINRelyInvitationRequest_descriptor_ = file->message_type(6);
  static const int BINRelyInvitationRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRelyInvitationRequest, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRelyInvitationRequest, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRelyInvitationRequest, accept_),
  };
  BINRelyInvitationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINRelyInvitationRequest_descriptor_,
      BINRelyInvitationRequest::default_instance_,
      BINRelyInvitationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRelyInvitationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRelyInvitationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINRelyInvitationRequest));
  BINRelyInvitationResponse_descriptor_ = file->message_type(7);
  static const int BINRelyInvitationResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRelyInvitationResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRelyInvitationResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRelyInvitationResponse, accept_),
  };
  BINRelyInvitationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINRelyInvitationResponse_descriptor_,
      BINRelyInvitationResponse::default_instance_,
      BINRelyInvitationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRelyInvitationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRelyInvitationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINRelyInvitationResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_invite_5fto_5fplay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINLookUpUserToInviteRequest_descriptor_, &BINLookUpUserToInviteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINLookUpUserToInviteResponse_descriptor_, &BINLookUpUserToInviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINInviteToRoomRequest_descriptor_, &BINInviteToRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINInviteToRoomResponse_descriptor_, &BINInviteToRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINCancelInvitationRequest_descriptor_, &BINCancelInvitationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINCancelInvitationResponse_descriptor_, &BINCancelInvitationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINRelyInvitationRequest_descriptor_, &BINRelyInvitationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINRelyInvitationResponse_descriptor_, &BINRelyInvitationResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_invite_5fto_5fplay_2eproto() {
  delete BINLookUpUserToInviteRequest::default_instance_;
  delete BINLookUpUserToInviteRequest_reflection_;
  delete BINLookUpUserToInviteResponse::default_instance_;
  delete BINLookUpUserToInviteResponse_reflection_;
  delete BINInviteToRoomRequest::default_instance_;
  delete BINInviteToRoomRequest_reflection_;
  delete BINInviteToRoomResponse::default_instance_;
  delete BINInviteToRoomResponse_reflection_;
  delete BINCancelInvitationRequest::default_instance_;
  delete BINCancelInvitationRequest_reflection_;
  delete BINCancelInvitationResponse::default_instance_;
  delete BINCancelInvitationResponse_reflection_;
  delete BINRelyInvitationRequest::default_instance_;
  delete BINRelyInvitationRequest_reflection_;
  delete BINRelyInvitationResponse::default_instance_;
  delete BINRelyInvitationResponse_reflection_;
}

void protobuf_AddDesc_invite_5fto_5fplay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_filter_5froom_2eproto();
  ::protobuf_AddDesc_user_5finfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024invite_to_play.proto\032\021filter_room.prot"
    "o\032\017user_info.proto\"D\n\034BINLookUpUserToInv"
    "iteRequest\022\021\n\troomIndex\030\001 \002(\005\022\021\n\tmaxResu"
    "lt\030\002 \001(\005\"j\n\035BINLookUpUserToInviteRespons"
    "e\022\024\n\014responseCode\030\001 \002(\010\022\017\n\007message\030\002 \001(\t"
    "\022\"\n\014suggestUsers\030\003 \003(\0132\014.BINUserInfo\"B\n\026"
    "BINInviteToRoomRequest\022\021\n\troomIndex\030\001 \002("
    "\005\022\025\n\rtargetUserIds\030\002 \003(\003\"\220\001\n\027BINInviteTo"
    "RoomResponse\022\024\n\014responseCode\030\001 \002(\010\022\017\n\007me"
    "ssage\030\002 \001(\t\022\025\n\rinviterUserId\030\003 \001(\003\022\027\n\017in"
    "viterUserName\030\004 \001(\t\022\036\n\010roomPlay\030\005 \001(\0132\014."
    "BINRoomPlay\"E\n\032BINCancelInvitationReques"
    "t\022\021\n\troomIndex\030\001 \002(\005\022\024\n\014targetUserId\030\002 \001"
    "(\003\"n\n\033BINCancelInvitationResponse\022\024\n\014res"
    "ponseCode\030\001 \002(\010\022\017\n\007message\030\002 \001(\t\022\025\n\rinvi"
    "terUserId\030\003 \001(\003\022\021\n\troomIndex\030\004 \001(\005\"M\n\030BI"
    "NRelyInvitationRequest\022\016\n\006zoneId\030\001 \002(\005\022\021"
    "\n\troomIndex\030\002 \002(\005\022\016\n\006accept\030\003 \001(\010\"R\n\031BIN"
    "RelyInvitationResponse\022\024\n\014responseCode\030\001"
    " \002(\010\022\017\n\007message\030\002 \001(\t\022\016\n\006accept\030\003 \001(\010B\036\n"
    "\034com.mi.game.network.data.bin", 829);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "invite_to_play.proto", &protobuf_RegisterTypes);
  BINLookUpUserToInviteRequest::default_instance_ = new BINLookUpUserToInviteRequest();
  BINLookUpUserToInviteResponse::default_instance_ = new BINLookUpUserToInviteResponse();
  BINInviteToRoomRequest::default_instance_ = new BINInviteToRoomRequest();
  BINInviteToRoomResponse::default_instance_ = new BINInviteToRoomResponse();
  BINCancelInvitationRequest::default_instance_ = new BINCancelInvitationRequest();
  BINCancelInvitationResponse::default_instance_ = new BINCancelInvitationResponse();
  BINRelyInvitationRequest::default_instance_ = new BINRelyInvitationRequest();
  BINRelyInvitationResponse::default_instance_ = new BINRelyInvitationResponse();
  BINLookUpUserToInviteRequest::default_instance_->InitAsDefaultInstance();
  BINLookUpUserToInviteResponse::default_instance_->InitAsDefaultInstance();
  BINInviteToRoomRequest::default_instance_->InitAsDefaultInstance();
  BINInviteToRoomResponse::default_instance_->InitAsDefaultInstance();
  BINCancelInvitationRequest::default_instance_->InitAsDefaultInstance();
  BINCancelInvitationResponse::default_instance_->InitAsDefaultInstance();
  BINRelyInvitationRequest::default_instance_->InitAsDefaultInstance();
  BINRelyInvitationResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_invite_5fto_5fplay_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_invite_5fto_5fplay_2eproto {
  StaticDescriptorInitializer_invite_5fto_5fplay_2eproto() {
    protobuf_AddDesc_invite_5fto_5fplay_2eproto();
  }
} static_descriptor_initializer_invite_5fto_5fplay_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINLookUpUserToInviteRequest::kRoomIndexFieldNumber;
const int BINLookUpUserToInviteRequest::kMaxResultFieldNumber;
#endif  // !_MSC_VER

BINLookUpUserToInviteRequest::BINLookUpUserToInviteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINLookUpUserToInviteRequest::InitAsDefaultInstance() {
}

BINLookUpUserToInviteRequest::BINLookUpUserToInviteRequest(const BINLookUpUserToInviteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINLookUpUserToInviteRequest::SharedCtor() {
  _cached_size_ = 0;
  roomindex_ = 0;
  maxresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINLookUpUserToInviteRequest::~BINLookUpUserToInviteRequest() {
  SharedDtor();
}

void BINLookUpUserToInviteRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINLookUpUserToInviteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINLookUpUserToInviteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINLookUpUserToInviteRequest_descriptor_;
}

const BINLookUpUserToInviteRequest& BINLookUpUserToInviteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invite_5fto_5fplay_2eproto();
  return *default_instance_;
}

BINLookUpUserToInviteRequest* BINLookUpUserToInviteRequest::default_instance_ = NULL;

BINLookUpUserToInviteRequest* BINLookUpUserToInviteRequest::New() const {
  return new BINLookUpUserToInviteRequest;
}

void BINLookUpUserToInviteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomindex_ = 0;
    maxresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINLookUpUserToInviteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxResult;
        break;
      }

      // optional int32 maxResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxresult_)));
          set_has_maxresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINLookUpUserToInviteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // optional int32 maxResult = 2;
  if (has_maxresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINLookUpUserToInviteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // optional int32 maxResult = 2;
  if (has_maxresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINLookUpUserToInviteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomIndex = 1;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

    // optional int32 maxResult = 2;
    if (has_maxresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINLookUpUserToInviteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINLookUpUserToInviteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINLookUpUserToInviteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINLookUpUserToInviteRequest::MergeFrom(const BINLookUpUserToInviteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
    if (from.has_maxresult()) {
      set_maxresult(from.maxresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINLookUpUserToInviteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINLookUpUserToInviteRequest::CopyFrom(const BINLookUpUserToInviteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINLookUpUserToInviteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINLookUpUserToInviteRequest::Swap(BINLookUpUserToInviteRequest* other) {
  if (other != this) {
    std::swap(roomindex_, other->roomindex_);
    std::swap(maxresult_, other->maxresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINLookUpUserToInviteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINLookUpUserToInviteRequest_descriptor_;
  metadata.reflection = BINLookUpUserToInviteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINLookUpUserToInviteResponse::kResponseCodeFieldNumber;
const int BINLookUpUserToInviteResponse::kMessageFieldNumber;
const int BINLookUpUserToInviteResponse::kSuggestUsersFieldNumber;
#endif  // !_MSC_VER

BINLookUpUserToInviteResponse::BINLookUpUserToInviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINLookUpUserToInviteResponse::InitAsDefaultInstance() {
}

BINLookUpUserToInviteResponse::BINLookUpUserToInviteResponse(const BINLookUpUserToInviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINLookUpUserToInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINLookUpUserToInviteResponse::~BINLookUpUserToInviteResponse() {
  SharedDtor();
}

void BINLookUpUserToInviteResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINLookUpUserToInviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINLookUpUserToInviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINLookUpUserToInviteResponse_descriptor_;
}

const BINLookUpUserToInviteResponse& BINLookUpUserToInviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invite_5fto_5fplay_2eproto();
  return *default_instance_;
}

BINLookUpUserToInviteResponse* BINLookUpUserToInviteResponse::default_instance_ = NULL;

BINLookUpUserToInviteResponse* BINLookUpUserToInviteResponse::New() const {
  return new BINLookUpUserToInviteResponse;
}

void BINLookUpUserToInviteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  suggestusers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINLookUpUserToInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_suggestUsers;
        break;
      }

      // repeated .BINUserInfo suggestUsers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suggestUsers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suggestusers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_suggestUsers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINLookUpUserToInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // repeated .BINUserInfo suggestUsers = 3;
  for (int i = 0; i < this->suggestusers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->suggestusers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINLookUpUserToInviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // repeated .BINUserInfo suggestUsers = 3;
  for (int i = 0; i < this->suggestusers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->suggestusers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINLookUpUserToInviteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  // repeated .BINUserInfo suggestUsers = 3;
  total_size += 1 * this->suggestusers_size();
  for (int i = 0; i < this->suggestusers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suggestusers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINLookUpUserToInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINLookUpUserToInviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINLookUpUserToInviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINLookUpUserToInviteResponse::MergeFrom(const BINLookUpUserToInviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  suggestusers_.MergeFrom(from.suggestusers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINLookUpUserToInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINLookUpUserToInviteResponse::CopyFrom(const BINLookUpUserToInviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINLookUpUserToInviteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < suggestusers_size(); i++) {
    if (!this->suggestusers(i).IsInitialized()) return false;
  }
  return true;
}

void BINLookUpUserToInviteResponse::Swap(BINLookUpUserToInviteResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    suggestusers_.Swap(&other->suggestusers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINLookUpUserToInviteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINLookUpUserToInviteResponse_descriptor_;
  metadata.reflection = BINLookUpUserToInviteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINInviteToRoomRequest::kRoomIndexFieldNumber;
const int BINInviteToRoomRequest::kTargetUserIdsFieldNumber;
#endif  // !_MSC_VER

BINInviteToRoomRequest::BINInviteToRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINInviteToRoomRequest::InitAsDefaultInstance() {
}

BINInviteToRoomRequest::BINInviteToRoomRequest(const BINInviteToRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINInviteToRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  roomindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINInviteToRoomRequest::~BINInviteToRoomRequest() {
  SharedDtor();
}

void BINInviteToRoomRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINInviteToRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINInviteToRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINInviteToRoomRequest_descriptor_;
}

const BINInviteToRoomRequest& BINInviteToRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invite_5fto_5fplay_2eproto();
  return *default_instance_;
}

BINInviteToRoomRequest* BINInviteToRoomRequest::default_instance_ = NULL;

BINInviteToRoomRequest* BINInviteToRoomRequest::New() const {
  return new BINInviteToRoomRequest;
}

void BINInviteToRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomindex_ = 0;
  }
  targetuserids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINInviteToRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetUserIds;
        break;
      }

      // repeated int64 targetUserIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetUserIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_targetuserids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_targetuserids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetUserIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINInviteToRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // repeated int64 targetUserIds = 2;
  for (int i = 0; i < this->targetuserids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->targetuserids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINInviteToRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // repeated int64 targetUserIds = 2;
  for (int i = 0; i < this->targetuserids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->targetuserids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINInviteToRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomIndex = 1;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

  }
  // repeated int64 targetUserIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetuserids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->targetuserids(i));
    }
    total_size += 1 * this->targetuserids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINInviteToRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINInviteToRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINInviteToRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINInviteToRoomRequest::MergeFrom(const BINInviteToRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetuserids_.MergeFrom(from.targetuserids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINInviteToRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINInviteToRoomRequest::CopyFrom(const BINInviteToRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINInviteToRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINInviteToRoomRequest::Swap(BINInviteToRoomRequest* other) {
  if (other != this) {
    std::swap(roomindex_, other->roomindex_);
    targetuserids_.Swap(&other->targetuserids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINInviteToRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINInviteToRoomRequest_descriptor_;
  metadata.reflection = BINInviteToRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINInviteToRoomResponse::kResponseCodeFieldNumber;
const int BINInviteToRoomResponse::kMessageFieldNumber;
const int BINInviteToRoomResponse::kInviterUserIdFieldNumber;
const int BINInviteToRoomResponse::kInviterUserNameFieldNumber;
const int BINInviteToRoomResponse::kRoomPlayFieldNumber;
#endif  // !_MSC_VER

BINInviteToRoomResponse::BINInviteToRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINInviteToRoomResponse::InitAsDefaultInstance() {
  roomplay_ = const_cast< ::BINRoomPlay*>(&::BINRoomPlay::default_instance());
}

BINInviteToRoomResponse::BINInviteToRoomResponse(const BINInviteToRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINInviteToRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inviteruserid_ = GOOGLE_LONGLONG(0);
  inviterusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomplay_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINInviteToRoomResponse::~BINInviteToRoomResponse() {
  SharedDtor();
}

void BINInviteToRoomResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (inviterusername_ != &::google::protobuf::internal::kEmptyString) {
    delete inviterusername_;
  }
  if (this != default_instance_) {
    delete roomplay_;
  }
}

void BINInviteToRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINInviteToRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINInviteToRoomResponse_descriptor_;
}

const BINInviteToRoomResponse& BINInviteToRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invite_5fto_5fplay_2eproto();
  return *default_instance_;
}

BINInviteToRoomResponse* BINInviteToRoomResponse::default_instance_ = NULL;

BINInviteToRoomResponse* BINInviteToRoomResponse::New() const {
  return new BINInviteToRoomResponse;
}

void BINInviteToRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    inviteruserid_ = GOOGLE_LONGLONG(0);
    if (has_inviterusername()) {
      if (inviterusername_ != &::google::protobuf::internal::kEmptyString) {
        inviterusername_->clear();
      }
    }
    if (has_roomplay()) {
      if (roomplay_ != NULL) roomplay_->::BINRoomPlay::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINInviteToRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inviterUserId;
        break;
      }

      // optional int64 inviterUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviterUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inviteruserid_)));
          set_has_inviteruserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_inviterUserName;
        break;
      }

      // optional string inviterUserName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviterUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviterusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inviterusername().data(), this->inviterusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roomPlay;
        break;
      }

      // optional .BINRoomPlay roomPlay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomPlay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINInviteToRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional int64 inviterUserId = 3;
  if (has_inviteruserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->inviteruserid(), output);
  }

  // optional string inviterUserName = 4;
  if (has_inviterusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviterusername().data(), this->inviterusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->inviterusername(), output);
  }

  // optional .BINRoomPlay roomPlay = 5;
  if (has_roomplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->roomplay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINInviteToRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional int64 inviterUserId = 3;
  if (has_inviteruserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->inviteruserid(), target);
  }

  // optional string inviterUserName = 4;
  if (has_inviterusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviterusername().data(), this->inviterusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->inviterusername(), target);
  }

  // optional .BINRoomPlay roomPlay = 5;
  if (has_roomplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->roomplay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINInviteToRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int64 inviterUserId = 3;
    if (has_inviteruserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inviteruserid());
    }

    // optional string inviterUserName = 4;
    if (has_inviterusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviterusername());
    }

    // optional .BINRoomPlay roomPlay = 5;
    if (has_roomplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomplay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINInviteToRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINInviteToRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINInviteToRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINInviteToRoomResponse::MergeFrom(const BINInviteToRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_inviteruserid()) {
      set_inviteruserid(from.inviteruserid());
    }
    if (from.has_inviterusername()) {
      set_inviterusername(from.inviterusername());
    }
    if (from.has_roomplay()) {
      mutable_roomplay()->::BINRoomPlay::MergeFrom(from.roomplay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINInviteToRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINInviteToRoomResponse::CopyFrom(const BINInviteToRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINInviteToRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roomplay()) {
    if (!this->roomplay().IsInitialized()) return false;
  }
  return true;
}

void BINInviteToRoomResponse::Swap(BINInviteToRoomResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(inviteruserid_, other->inviteruserid_);
    std::swap(inviterusername_, other->inviterusername_);
    std::swap(roomplay_, other->roomplay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINInviteToRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINInviteToRoomResponse_descriptor_;
  metadata.reflection = BINInviteToRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINCancelInvitationRequest::kRoomIndexFieldNumber;
const int BINCancelInvitationRequest::kTargetUserIdFieldNumber;
#endif  // !_MSC_VER

BINCancelInvitationRequest::BINCancelInvitationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINCancelInvitationRequest::InitAsDefaultInstance() {
}

BINCancelInvitationRequest::BINCancelInvitationRequest(const BINCancelInvitationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINCancelInvitationRequest::SharedCtor() {
  _cached_size_ = 0;
  roomindex_ = 0;
  targetuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINCancelInvitationRequest::~BINCancelInvitationRequest() {
  SharedDtor();
}

void BINCancelInvitationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINCancelInvitationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINCancelInvitationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINCancelInvitationRequest_descriptor_;
}

const BINCancelInvitationRequest& BINCancelInvitationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invite_5fto_5fplay_2eproto();
  return *default_instance_;
}

BINCancelInvitationRequest* BINCancelInvitationRequest::default_instance_ = NULL;

BINCancelInvitationRequest* BINCancelInvitationRequest::New() const {
  return new BINCancelInvitationRequest;
}

void BINCancelInvitationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomindex_ = 0;
    targetuserid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINCancelInvitationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetUserId;
        break;
      }

      // optional int64 targetUserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetuserid_)));
          set_has_targetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINCancelInvitationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // optional int64 targetUserId = 2;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->targetuserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINCancelInvitationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // optional int64 targetUserId = 2;
  if (has_targetuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->targetuserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINCancelInvitationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomIndex = 1;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

    // optional int64 targetUserId = 2;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetuserid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINCancelInvitationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINCancelInvitationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINCancelInvitationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINCancelInvitationRequest::MergeFrom(const BINCancelInvitationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINCancelInvitationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINCancelInvitationRequest::CopyFrom(const BINCancelInvitationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINCancelInvitationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINCancelInvitationRequest::Swap(BINCancelInvitationRequest* other) {
  if (other != this) {
    std::swap(roomindex_, other->roomindex_);
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINCancelInvitationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINCancelInvitationRequest_descriptor_;
  metadata.reflection = BINCancelInvitationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINCancelInvitationResponse::kResponseCodeFieldNumber;
const int BINCancelInvitationResponse::kMessageFieldNumber;
const int BINCancelInvitationResponse::kInviterUserIdFieldNumber;
const int BINCancelInvitationResponse::kRoomIndexFieldNumber;
#endif  // !_MSC_VER

BINCancelInvitationResponse::BINCancelInvitationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINCancelInvitationResponse::InitAsDefaultInstance() {
}

BINCancelInvitationResponse::BINCancelInvitationResponse(const BINCancelInvitationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINCancelInvitationResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inviteruserid_ = GOOGLE_LONGLONG(0);
  roomindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINCancelInvitationResponse::~BINCancelInvitationResponse() {
  SharedDtor();
}

void BINCancelInvitationResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINCancelInvitationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINCancelInvitationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINCancelInvitationResponse_descriptor_;
}

const BINCancelInvitationResponse& BINCancelInvitationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invite_5fto_5fplay_2eproto();
  return *default_instance_;
}

BINCancelInvitationResponse* BINCancelInvitationResponse::default_instance_ = NULL;

BINCancelInvitationResponse* BINCancelInvitationResponse::New() const {
  return new BINCancelInvitationResponse;
}

void BINCancelInvitationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    inviteruserid_ = GOOGLE_LONGLONG(0);
    roomindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINCancelInvitationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inviterUserId;
        break;
      }

      // optional int64 inviterUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviterUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inviteruserid_)));
          set_has_inviteruserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roomIndex;
        break;
      }

      // optional int32 roomIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINCancelInvitationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional int64 inviterUserId = 3;
  if (has_inviteruserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->inviteruserid(), output);
  }

  // optional int32 roomIndex = 4;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roomindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINCancelInvitationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional int64 inviterUserId = 3;
  if (has_inviteruserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->inviteruserid(), target);
  }

  // optional int32 roomIndex = 4;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roomindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINCancelInvitationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int64 inviterUserId = 3;
    if (has_inviteruserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inviteruserid());
    }

    // optional int32 roomIndex = 4;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINCancelInvitationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINCancelInvitationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINCancelInvitationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINCancelInvitationResponse::MergeFrom(const BINCancelInvitationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_inviteruserid()) {
      set_inviteruserid(from.inviteruserid());
    }
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINCancelInvitationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINCancelInvitationResponse::CopyFrom(const BINCancelInvitationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINCancelInvitationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINCancelInvitationResponse::Swap(BINCancelInvitationResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(inviteruserid_, other->inviteruserid_);
    std::swap(roomindex_, other->roomindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINCancelInvitationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINCancelInvitationResponse_descriptor_;
  metadata.reflection = BINCancelInvitationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINRelyInvitationRequest::kZoneIdFieldNumber;
const int BINRelyInvitationRequest::kRoomIndexFieldNumber;
const int BINRelyInvitationRequest::kAcceptFieldNumber;
#endif  // !_MSC_VER

BINRelyInvitationRequest::BINRelyInvitationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINRelyInvitationRequest::InitAsDefaultInstance() {
}

BINRelyInvitationRequest::BINRelyInvitationRequest(const BINRelyInvitationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINRelyInvitationRequest::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0;
  roomindex_ = 0;
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINRelyInvitationRequest::~BINRelyInvitationRequest() {
  SharedDtor();
}

void BINRelyInvitationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINRelyInvitationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINRelyInvitationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINRelyInvitationRequest_descriptor_;
}

const BINRelyInvitationRequest& BINRelyInvitationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invite_5fto_5fplay_2eproto();
  return *default_instance_;
}

BINRelyInvitationRequest* BINRelyInvitationRequest::default_instance_ = NULL;

BINRelyInvitationRequest* BINRelyInvitationRequest::New() const {
  return new BINRelyInvitationRequest;
}

void BINRelyInvitationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0;
    roomindex_ = 0;
    accept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINRelyInvitationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 zoneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomIndex;
        break;
      }

      // required int32 roomIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accept;
        break;
      }

      // optional bool accept = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINRelyInvitationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 zoneId = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zoneid(), output);
  }

  // required int32 roomIndex = 2;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomindex(), output);
  }

  // optional bool accept = 3;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->accept(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINRelyInvitationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 zoneId = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zoneid(), target);
  }

  // required int32 roomIndex = 2;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomindex(), target);
  }

  // optional bool accept = 3;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->accept(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINRelyInvitationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 zoneId = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

    // required int32 roomIndex = 2;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

    // optional bool accept = 3;
    if (has_accept()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINRelyInvitationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINRelyInvitationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINRelyInvitationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINRelyInvitationRequest::MergeFrom(const BINRelyInvitationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINRelyInvitationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINRelyInvitationRequest::CopyFrom(const BINRelyInvitationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINRelyInvitationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BINRelyInvitationRequest::Swap(BINRelyInvitationRequest* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(roomindex_, other->roomindex_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINRelyInvitationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINRelyInvitationRequest_descriptor_;
  metadata.reflection = BINRelyInvitationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINRelyInvitationResponse::kResponseCodeFieldNumber;
const int BINRelyInvitationResponse::kMessageFieldNumber;
const int BINRelyInvitationResponse::kAcceptFieldNumber;
#endif  // !_MSC_VER

BINRelyInvitationResponse::BINRelyInvitationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINRelyInvitationResponse::InitAsDefaultInstance() {
}

BINRelyInvitationResponse::BINRelyInvitationResponse(const BINRelyInvitationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINRelyInvitationResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINRelyInvitationResponse::~BINRelyInvitationResponse() {
  SharedDtor();
}

void BINRelyInvitationResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINRelyInvitationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINRelyInvitationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINRelyInvitationResponse_descriptor_;
}

const BINRelyInvitationResponse& BINRelyInvitationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_invite_5fto_5fplay_2eproto();
  return *default_instance_;
}

BINRelyInvitationResponse* BINRelyInvitationResponse::default_instance_ = NULL;

BINRelyInvitationResponse* BINRelyInvitationResponse::New() const {
  return new BINRelyInvitationResponse;
}

void BINRelyInvitationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    accept_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINRelyInvitationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accept;
        break;
      }

      // optional bool accept = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINRelyInvitationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional bool accept = 3;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->accept(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINRelyInvitationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional bool accept = 3;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->accept(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINRelyInvitationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bool accept = 3;
    if (has_accept()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINRelyInvitationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINRelyInvitationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINRelyInvitationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINRelyInvitationResponse::MergeFrom(const BINRelyInvitationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINRelyInvitationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINRelyInvitationResponse::CopyFrom(const BINRelyInvitationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINRelyInvitationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINRelyInvitationResponse::Swap(BINRelyInvitationResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINRelyInvitationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINRelyInvitationResponse_descriptor_;
  metadata.reflection = BINRelyInvitationResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
