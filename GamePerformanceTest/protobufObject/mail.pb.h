// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail.proto

#ifndef PROTOBUF_mail_2eproto__INCLUDED
#define PROTOBUF_mail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mail_2eproto();
void protobuf_AssignDesc_mail_2eproto();
void protobuf_ShutdownFile_mail_2eproto();

class BINMail;
class BINFilterMailRequest;
class BINFilterMailResponse;
class BINSendMailRequest;
class BINSendMailResponse;
class BINDeleteMailRequest;
class BINDeleteMailResponse;
class BINReadedMailRequest;
class BINReadedMailResponse;
class BINClaimAttachItemRequest;
class BINClaimAttachItemResponse;

// ===================================================================

class BINMail : public ::google::protobuf::Message {
 public:
  BINMail();
  virtual ~BINMail();

  BINMail(const BINMail& from);

  inline BINMail& operator=(const BINMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINMail& default_instance();

  void Swap(BINMail* other);

  // implements Message ----------------------------------------------

  BINMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINMail& from);
  void MergeFrom(const BINMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 mailId = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::int64 mailid() const;
  inline void set_mailid(::google::protobuf::int64 value);

  // optional int64 senderUserId = 2;
  inline bool has_senderuserid() const;
  inline void clear_senderuserid();
  static const int kSenderUserIdFieldNumber = 2;
  inline ::google::protobuf::int64 senderuserid() const;
  inline void set_senderuserid(::google::protobuf::int64 value);

  // optional string senderUserName = 3;
  inline bool has_senderusername() const;
  inline void clear_senderusername();
  static const int kSenderUserNameFieldNumber = 3;
  inline const ::std::string& senderusername() const;
  inline void set_senderusername(const ::std::string& value);
  inline void set_senderusername(const char* value);
  inline void set_senderusername(const char* value, size_t size);
  inline ::std::string* mutable_senderusername();
  inline ::std::string* release_senderusername();
  inline void set_allocated_senderusername(::std::string* senderusername);

  // optional int64 recipientUserId = 4;
  inline bool has_recipientuserid() const;
  inline void clear_recipientuserid();
  static const int kRecipientUserIdFieldNumber = 4;
  inline ::google::protobuf::int64 recipientuserid() const;
  inline void set_recipientuserid(::google::protobuf::int64 value);

  // optional string recipientUserName = 5;
  inline bool has_recipientusername() const;
  inline void clear_recipientusername();
  static const int kRecipientUserNameFieldNumber = 5;
  inline const ::std::string& recipientusername() const;
  inline void set_recipientusername(const ::std::string& value);
  inline void set_recipientusername(const char* value);
  inline void set_recipientusername(const char* value, size_t size);
  inline ::std::string* mutable_recipientusername();
  inline ::std::string* release_recipientusername();
  inline void set_allocated_recipientusername(::std::string* recipientusername);

  // optional string title = 6;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 6;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string body = 7;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 7;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // optional int64 sentTime = 8;
  inline bool has_senttime() const;
  inline void clear_senttime();
  static const int kSentTimeFieldNumber = 8;
  inline ::google::protobuf::int64 senttime() const;
  inline void set_senttime(::google::protobuf::int64 value);

  // optional bool readed = 9;
  inline bool has_readed() const;
  inline void clear_readed();
  static const int kReadedFieldNumber = 9;
  inline bool readed() const;
  inline void set_readed(bool value);

  // optional int32 attachItemId = 10;
  inline bool has_attachitemid() const;
  inline void clear_attachitemid();
  static const int kAttachItemIdFieldNumber = 10;
  inline ::google::protobuf::int32 attachitemid() const;
  inline void set_attachitemid(::google::protobuf::int32 value);

  // optional int64 attachItemQuatity = 11;
  inline bool has_attachitemquatity() const;
  inline void clear_attachitemquatity();
  static const int kAttachItemQuatityFieldNumber = 11;
  inline ::google::protobuf::int64 attachitemquatity() const;
  inline void set_attachitemquatity(::google::protobuf::int64 value);

  // optional int64 expiredTime = 12;
  inline bool has_expiredtime() const;
  inline void clear_expiredtime();
  static const int kExpiredTimeFieldNumber = 12;
  inline ::google::protobuf::int64 expiredtime() const;
  inline void set_expiredtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BINMail)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_senderuserid();
  inline void clear_has_senderuserid();
  inline void set_has_senderusername();
  inline void clear_has_senderusername();
  inline void set_has_recipientuserid();
  inline void clear_has_recipientuserid();
  inline void set_has_recipientusername();
  inline void clear_has_recipientusername();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_senttime();
  inline void clear_has_senttime();
  inline void set_has_readed();
  inline void clear_has_readed();
  inline void set_has_attachitemid();
  inline void clear_has_attachitemid();
  inline void set_has_attachitemquatity();
  inline void clear_has_attachitemquatity();
  inline void set_has_expiredtime();
  inline void clear_has_expiredtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mailid_;
  ::google::protobuf::int64 senderuserid_;
  ::std::string* senderusername_;
  ::google::protobuf::int64 recipientuserid_;
  ::std::string* recipientusername_;
  ::std::string* title_;
  ::std::string* body_;
  ::google::protobuf::int64 senttime_;
  bool readed_;
  ::google::protobuf::int32 attachitemid_;
  ::google::protobuf::int64 attachitemquatity_;
  ::google::protobuf::int64 expiredtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static BINMail* default_instance_;
};
// -------------------------------------------------------------------

class BINFilterMailRequest : public ::google::protobuf::Message {
 public:
  BINFilterMailRequest();
  virtual ~BINFilterMailRequest();

  BINFilterMailRequest(const BINFilterMailRequest& from);

  inline BINFilterMailRequest& operator=(const BINFilterMailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINFilterMailRequest& default_instance();

  void Swap(BINFilterMailRequest* other);

  // implements Message ----------------------------------------------

  BINFilterMailRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINFilterMailRequest& from);
  void MergeFrom(const BINFilterMailRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 firstResult = 1;
  inline bool has_firstresult() const;
  inline void clear_firstresult();
  static const int kFirstResultFieldNumber = 1;
  inline ::google::protobuf::int32 firstresult() const;
  inline void set_firstresult(::google::protobuf::int32 value);

  // required int32 maxResult = 2;
  inline bool has_maxresult() const;
  inline void clear_maxresult();
  static const int kMaxResultFieldNumber = 2;
  inline ::google::protobuf::int32 maxresult() const;
  inline void set_maxresult(::google::protobuf::int32 value);

  // optional int64 lastRequestTime = 3;
  inline bool has_lastrequesttime() const;
  inline void clear_lastrequesttime();
  static const int kLastRequestTimeFieldNumber = 3;
  inline ::google::protobuf::int64 lastrequesttime() const;
  inline void set_lastrequesttime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BINFilterMailRequest)
 private:
  inline void set_has_firstresult();
  inline void clear_has_firstresult();
  inline void set_has_maxresult();
  inline void clear_has_maxresult();
  inline void set_has_lastrequesttime();
  inline void clear_has_lastrequesttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 firstresult_;
  ::google::protobuf::int32 maxresult_;
  ::google::protobuf::int64 lastrequesttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static BINFilterMailRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINFilterMailResponse : public ::google::protobuf::Message {
 public:
  BINFilterMailResponse();
  virtual ~BINFilterMailResponse();

  BINFilterMailResponse(const BINFilterMailResponse& from);

  inline BINFilterMailResponse& operator=(const BINFilterMailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINFilterMailResponse& default_instance();

  void Swap(BINFilterMailResponse* other);

  // implements Message ----------------------------------------------

  BINFilterMailResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINFilterMailResponse& from);
  void MergeFrom(const BINFilterMailResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // repeated .BINMail mails = 3;
  inline int mails_size() const;
  inline void clear_mails();
  static const int kMailsFieldNumber = 3;
  inline const ::BINMail& mails(int index) const;
  inline ::BINMail* mutable_mails(int index);
  inline ::BINMail* add_mails();
  inline const ::google::protobuf::RepeatedPtrField< ::BINMail >&
      mails() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINMail >*
      mutable_mails();

  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int64 lastRequestTime = 5;
  inline bool has_lastrequesttime() const;
  inline void clear_lastrequesttime();
  static const int kLastRequestTimeFieldNumber = 5;
  inline ::google::protobuf::int64 lastrequesttime() const;
  inline void set_lastrequesttime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BINFilterMailResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_lastrequesttime();
  inline void clear_has_lastrequesttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::RepeatedPtrField< ::BINMail > mails_;
  ::google::protobuf::int64 lastrequesttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static BINFilterMailResponse* default_instance_;
};
// -------------------------------------------------------------------

class BINSendMailRequest : public ::google::protobuf::Message {
 public:
  BINSendMailRequest();
  virtual ~BINSendMailRequest();

  BINSendMailRequest(const BINSendMailRequest& from);

  inline BINSendMailRequest& operator=(const BINSendMailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINSendMailRequest& default_instance();

  void Swap(BINSendMailRequest* other);

  // implements Message ----------------------------------------------

  BINSendMailRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINSendMailRequest& from);
  void MergeFrom(const BINSendMailRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string recipientUserNames = 1;
  inline int recipientusernames_size() const;
  inline void clear_recipientusernames();
  static const int kRecipientUserNamesFieldNumber = 1;
  inline const ::std::string& recipientusernames(int index) const;
  inline ::std::string* mutable_recipientusernames(int index);
  inline void set_recipientusernames(int index, const ::std::string& value);
  inline void set_recipientusernames(int index, const char* value);
  inline void set_recipientusernames(int index, const char* value, size_t size);
  inline ::std::string* add_recipientusernames();
  inline void add_recipientusernames(const ::std::string& value);
  inline void add_recipientusernames(const char* value);
  inline void add_recipientusernames(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& recipientusernames() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recipientusernames();

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string body = 3;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 3;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // optional int64 parentId = 4;
  inline bool has_parentid() const;
  inline void clear_parentid();
  static const int kParentIdFieldNumber = 4;
  inline ::google::protobuf::int64 parentid() const;
  inline void set_parentid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BINSendMailRequest)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_parentid();
  inline void clear_has_parentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> recipientusernames_;
  ::std::string* title_;
  ::std::string* body_;
  ::google::protobuf::int64 parentid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static BINSendMailRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINSendMailResponse : public ::google::protobuf::Message {
 public:
  BINSendMailResponse();
  virtual ~BINSendMailResponse();

  BINSendMailResponse(const BINSendMailResponse& from);

  inline BINSendMailResponse& operator=(const BINSendMailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINSendMailResponse& default_instance();

  void Swap(BINSendMailResponse* other);

  // implements Message ----------------------------------------------

  BINSendMailResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINSendMailResponse& from);
  void MergeFrom(const BINSendMailResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:BINSendMailResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static BINSendMailResponse* default_instance_;
};
// -------------------------------------------------------------------

class BINDeleteMailRequest : public ::google::protobuf::Message {
 public:
  BINDeleteMailRequest();
  virtual ~BINDeleteMailRequest();

  BINDeleteMailRequest(const BINDeleteMailRequest& from);

  inline BINDeleteMailRequest& operator=(const BINDeleteMailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINDeleteMailRequest& default_instance();

  void Swap(BINDeleteMailRequest* other);

  // implements Message ----------------------------------------------

  BINDeleteMailRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINDeleteMailRequest& from);
  void MergeFrom(const BINDeleteMailRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 selectedMailIds = 1;
  inline int selectedmailids_size() const;
  inline void clear_selectedmailids();
  static const int kSelectedMailIdsFieldNumber = 1;
  inline ::google::protobuf::int64 selectedmailids(int index) const;
  inline void set_selectedmailids(int index, ::google::protobuf::int64 value);
  inline void add_selectedmailids(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      selectedmailids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_selectedmailids();

  // @@protoc_insertion_point(class_scope:BINDeleteMailRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > selectedmailids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static BINDeleteMailRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINDeleteMailResponse : public ::google::protobuf::Message {
 public:
  BINDeleteMailResponse();
  virtual ~BINDeleteMailResponse();

  BINDeleteMailResponse(const BINDeleteMailResponse& from);

  inline BINDeleteMailResponse& operator=(const BINDeleteMailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINDeleteMailResponse& default_instance();

  void Swap(BINDeleteMailResponse* other);

  // implements Message ----------------------------------------------

  BINDeleteMailResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINDeleteMailResponse& from);
  void MergeFrom(const BINDeleteMailResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // repeated int64 deletedMailIds = 3;
  inline int deletedmailids_size() const;
  inline void clear_deletedmailids();
  static const int kDeletedMailIdsFieldNumber = 3;
  inline ::google::protobuf::int64 deletedmailids(int index) const;
  inline void set_deletedmailids(int index, ::google::protobuf::int64 value);
  inline void add_deletedmailids(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      deletedmailids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_deletedmailids();

  // @@protoc_insertion_point(class_scope:BINDeleteMailResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > deletedmailids_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static BINDeleteMailResponse* default_instance_;
};
// -------------------------------------------------------------------

class BINReadedMailRequest : public ::google::protobuf::Message {
 public:
  BINReadedMailRequest();
  virtual ~BINReadedMailRequest();

  BINReadedMailRequest(const BINReadedMailRequest& from);

  inline BINReadedMailRequest& operator=(const BINReadedMailRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINReadedMailRequest& default_instance();

  void Swap(BINReadedMailRequest* other);

  // implements Message ----------------------------------------------

  BINReadedMailRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINReadedMailRequest& from);
  void MergeFrom(const BINReadedMailRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 readedMailId = 1;
  inline bool has_readedmailid() const;
  inline void clear_readedmailid();
  static const int kReadedMailIdFieldNumber = 1;
  inline ::google::protobuf::int64 readedmailid() const;
  inline void set_readedmailid(::google::protobuf::int64 value);

  // optional bool getContent = 2;
  inline bool has_getcontent() const;
  inline void clear_getcontent();
  static const int kGetContentFieldNumber = 2;
  inline bool getcontent() const;
  inline void set_getcontent(bool value);

  // @@protoc_insertion_point(class_scope:BINReadedMailRequest)
 private:
  inline void set_has_readedmailid();
  inline void clear_has_readedmailid();
  inline void set_has_getcontent();
  inline void clear_has_getcontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 readedmailid_;
  bool getcontent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static BINReadedMailRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINReadedMailResponse : public ::google::protobuf::Message {
 public:
  BINReadedMailResponse();
  virtual ~BINReadedMailResponse();

  BINReadedMailResponse(const BINReadedMailResponse& from);

  inline BINReadedMailResponse& operator=(const BINReadedMailResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINReadedMailResponse& default_instance();

  void Swap(BINReadedMailResponse* other);

  // implements Message ----------------------------------------------

  BINReadedMailResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINReadedMailResponse& from);
  void MergeFrom(const BINReadedMailResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional .BINMail mail = 3;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 3;
  inline const ::BINMail& mail() const;
  inline ::BINMail* mutable_mail();
  inline ::BINMail* release_mail();
  inline void set_allocated_mail(::BINMail* mail);

  // @@protoc_insertion_point(class_scope:BINReadedMailResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_mail();
  inline void clear_has_mail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::BINMail* mail_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static BINReadedMailResponse* default_instance_;
};
// -------------------------------------------------------------------

class BINClaimAttachItemRequest : public ::google::protobuf::Message {
 public:
  BINClaimAttachItemRequest();
  virtual ~BINClaimAttachItemRequest();

  BINClaimAttachItemRequest(const BINClaimAttachItemRequest& from);

  inline BINClaimAttachItemRequest& operator=(const BINClaimAttachItemRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINClaimAttachItemRequest& default_instance();

  void Swap(BINClaimAttachItemRequest* other);

  // implements Message ----------------------------------------------

  BINClaimAttachItemRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINClaimAttachItemRequest& from);
  void MergeFrom(const BINClaimAttachItemRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 mailId = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::int64 mailid() const;
  inline void set_mailid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BINClaimAttachItemRequest)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mailid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static BINClaimAttachItemRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINClaimAttachItemResponse : public ::google::protobuf::Message {
 public:
  BINClaimAttachItemResponse();
  virtual ~BINClaimAttachItemResponse();

  BINClaimAttachItemResponse(const BINClaimAttachItemResponse& from);

  inline BINClaimAttachItemResponse& operator=(const BINClaimAttachItemResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINClaimAttachItemResponse& default_instance();

  void Swap(BINClaimAttachItemResponse* other);

  // implements Message ----------------------------------------------

  BINClaimAttachItemResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINClaimAttachItemResponse& from);
  void MergeFrom(const BINClaimAttachItemResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:BINClaimAttachItemResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();

  void InitAsDefaultInstance();
  static BINClaimAttachItemResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINMail

// required int64 mailId = 1;
inline bool BINMail::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINMail::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINMail::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINMail::clear_mailid() {
  mailid_ = GOOGLE_LONGLONG(0);
  clear_has_mailid();
}
inline ::google::protobuf::int64 BINMail::mailid() const {
  return mailid_;
}
inline void BINMail::set_mailid(::google::protobuf::int64 value) {
  set_has_mailid();
  mailid_ = value;
}

// optional int64 senderUserId = 2;
inline bool BINMail::has_senderuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINMail::set_has_senderuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINMail::clear_has_senderuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINMail::clear_senderuserid() {
  senderuserid_ = GOOGLE_LONGLONG(0);
  clear_has_senderuserid();
}
inline ::google::protobuf::int64 BINMail::senderuserid() const {
  return senderuserid_;
}
inline void BINMail::set_senderuserid(::google::protobuf::int64 value) {
  set_has_senderuserid();
  senderuserid_ = value;
}

// optional string senderUserName = 3;
inline bool BINMail::has_senderusername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINMail::set_has_senderusername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINMail::clear_has_senderusername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINMail::clear_senderusername() {
  if (senderusername_ != &::google::protobuf::internal::kEmptyString) {
    senderusername_->clear();
  }
  clear_has_senderusername();
}
inline const ::std::string& BINMail::senderusername() const {
  return *senderusername_;
}
inline void BINMail::set_senderusername(const ::std::string& value) {
  set_has_senderusername();
  if (senderusername_ == &::google::protobuf::internal::kEmptyString) {
    senderusername_ = new ::std::string;
  }
  senderusername_->assign(value);
}
inline void BINMail::set_senderusername(const char* value) {
  set_has_senderusername();
  if (senderusername_ == &::google::protobuf::internal::kEmptyString) {
    senderusername_ = new ::std::string;
  }
  senderusername_->assign(value);
}
inline void BINMail::set_senderusername(const char* value, size_t size) {
  set_has_senderusername();
  if (senderusername_ == &::google::protobuf::internal::kEmptyString) {
    senderusername_ = new ::std::string;
  }
  senderusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINMail::mutable_senderusername() {
  set_has_senderusername();
  if (senderusername_ == &::google::protobuf::internal::kEmptyString) {
    senderusername_ = new ::std::string;
  }
  return senderusername_;
}
inline ::std::string* BINMail::release_senderusername() {
  clear_has_senderusername();
  if (senderusername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = senderusername_;
    senderusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINMail::set_allocated_senderusername(::std::string* senderusername) {
  if (senderusername_ != &::google::protobuf::internal::kEmptyString) {
    delete senderusername_;
  }
  if (senderusername) {
    set_has_senderusername();
    senderusername_ = senderusername;
  } else {
    clear_has_senderusername();
    senderusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 recipientUserId = 4;
inline bool BINMail::has_recipientuserid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINMail::set_has_recipientuserid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINMail::clear_has_recipientuserid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINMail::clear_recipientuserid() {
  recipientuserid_ = GOOGLE_LONGLONG(0);
  clear_has_recipientuserid();
}
inline ::google::protobuf::int64 BINMail::recipientuserid() const {
  return recipientuserid_;
}
inline void BINMail::set_recipientuserid(::google::protobuf::int64 value) {
  set_has_recipientuserid();
  recipientuserid_ = value;
}

// optional string recipientUserName = 5;
inline bool BINMail::has_recipientusername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINMail::set_has_recipientusername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINMail::clear_has_recipientusername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINMail::clear_recipientusername() {
  if (recipientusername_ != &::google::protobuf::internal::kEmptyString) {
    recipientusername_->clear();
  }
  clear_has_recipientusername();
}
inline const ::std::string& BINMail::recipientusername() const {
  return *recipientusername_;
}
inline void BINMail::set_recipientusername(const ::std::string& value) {
  set_has_recipientusername();
  if (recipientusername_ == &::google::protobuf::internal::kEmptyString) {
    recipientusername_ = new ::std::string;
  }
  recipientusername_->assign(value);
}
inline void BINMail::set_recipientusername(const char* value) {
  set_has_recipientusername();
  if (recipientusername_ == &::google::protobuf::internal::kEmptyString) {
    recipientusername_ = new ::std::string;
  }
  recipientusername_->assign(value);
}
inline void BINMail::set_recipientusername(const char* value, size_t size) {
  set_has_recipientusername();
  if (recipientusername_ == &::google::protobuf::internal::kEmptyString) {
    recipientusername_ = new ::std::string;
  }
  recipientusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINMail::mutable_recipientusername() {
  set_has_recipientusername();
  if (recipientusername_ == &::google::protobuf::internal::kEmptyString) {
    recipientusername_ = new ::std::string;
  }
  return recipientusername_;
}
inline ::std::string* BINMail::release_recipientusername() {
  clear_has_recipientusername();
  if (recipientusername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recipientusername_;
    recipientusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINMail::set_allocated_recipientusername(::std::string* recipientusername) {
  if (recipientusername_ != &::google::protobuf::internal::kEmptyString) {
    delete recipientusername_;
  }
  if (recipientusername) {
    set_has_recipientusername();
    recipientusername_ = recipientusername;
  } else {
    clear_has_recipientusername();
    recipientusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 6;
inline bool BINMail::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINMail::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINMail::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINMail::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& BINMail::title() const {
  return *title_;
}
inline void BINMail::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void BINMail::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void BINMail::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINMail::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* BINMail::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINMail::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string body = 7;
inline bool BINMail::has_body() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BINMail::set_has_body() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BINMail::clear_has_body() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BINMail::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& BINMail::body() const {
  return *body_;
}
inline void BINMail::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void BINMail::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void BINMail::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINMail::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* BINMail::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINMail::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 sentTime = 8;
inline bool BINMail::has_senttime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BINMail::set_has_senttime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BINMail::clear_has_senttime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BINMail::clear_senttime() {
  senttime_ = GOOGLE_LONGLONG(0);
  clear_has_senttime();
}
inline ::google::protobuf::int64 BINMail::senttime() const {
  return senttime_;
}
inline void BINMail::set_senttime(::google::protobuf::int64 value) {
  set_has_senttime();
  senttime_ = value;
}

// optional bool readed = 9;
inline bool BINMail::has_readed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BINMail::set_has_readed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BINMail::clear_has_readed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BINMail::clear_readed() {
  readed_ = false;
  clear_has_readed();
}
inline bool BINMail::readed() const {
  return readed_;
}
inline void BINMail::set_readed(bool value) {
  set_has_readed();
  readed_ = value;
}

// optional int32 attachItemId = 10;
inline bool BINMail::has_attachitemid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BINMail::set_has_attachitemid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BINMail::clear_has_attachitemid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BINMail::clear_attachitemid() {
  attachitemid_ = 0;
  clear_has_attachitemid();
}
inline ::google::protobuf::int32 BINMail::attachitemid() const {
  return attachitemid_;
}
inline void BINMail::set_attachitemid(::google::protobuf::int32 value) {
  set_has_attachitemid();
  attachitemid_ = value;
}

// optional int64 attachItemQuatity = 11;
inline bool BINMail::has_attachitemquatity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BINMail::set_has_attachitemquatity() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BINMail::clear_has_attachitemquatity() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BINMail::clear_attachitemquatity() {
  attachitemquatity_ = GOOGLE_LONGLONG(0);
  clear_has_attachitemquatity();
}
inline ::google::protobuf::int64 BINMail::attachitemquatity() const {
  return attachitemquatity_;
}
inline void BINMail::set_attachitemquatity(::google::protobuf::int64 value) {
  set_has_attachitemquatity();
  attachitemquatity_ = value;
}

// optional int64 expiredTime = 12;
inline bool BINMail::has_expiredtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BINMail::set_has_expiredtime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BINMail::clear_has_expiredtime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BINMail::clear_expiredtime() {
  expiredtime_ = GOOGLE_LONGLONG(0);
  clear_has_expiredtime();
}
inline ::google::protobuf::int64 BINMail::expiredtime() const {
  return expiredtime_;
}
inline void BINMail::set_expiredtime(::google::protobuf::int64 value) {
  set_has_expiredtime();
  expiredtime_ = value;
}

// -------------------------------------------------------------------

// BINFilterMailRequest

// required int32 firstResult = 1;
inline bool BINFilterMailRequest::has_firstresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINFilterMailRequest::set_has_firstresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINFilterMailRequest::clear_has_firstresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINFilterMailRequest::clear_firstresult() {
  firstresult_ = 0;
  clear_has_firstresult();
}
inline ::google::protobuf::int32 BINFilterMailRequest::firstresult() const {
  return firstresult_;
}
inline void BINFilterMailRequest::set_firstresult(::google::protobuf::int32 value) {
  set_has_firstresult();
  firstresult_ = value;
}

// required int32 maxResult = 2;
inline bool BINFilterMailRequest::has_maxresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINFilterMailRequest::set_has_maxresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINFilterMailRequest::clear_has_maxresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINFilterMailRequest::clear_maxresult() {
  maxresult_ = 0;
  clear_has_maxresult();
}
inline ::google::protobuf::int32 BINFilterMailRequest::maxresult() const {
  return maxresult_;
}
inline void BINFilterMailRequest::set_maxresult(::google::protobuf::int32 value) {
  set_has_maxresult();
  maxresult_ = value;
}

// optional int64 lastRequestTime = 3;
inline bool BINFilterMailRequest::has_lastrequesttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINFilterMailRequest::set_has_lastrequesttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINFilterMailRequest::clear_has_lastrequesttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINFilterMailRequest::clear_lastrequesttime() {
  lastrequesttime_ = GOOGLE_LONGLONG(0);
  clear_has_lastrequesttime();
}
inline ::google::protobuf::int64 BINFilterMailRequest::lastrequesttime() const {
  return lastrequesttime_;
}
inline void BINFilterMailRequest::set_lastrequesttime(::google::protobuf::int64 value) {
  set_has_lastrequesttime();
  lastrequesttime_ = value;
}

// -------------------------------------------------------------------

// BINFilterMailResponse

// required bool responseCode = 1;
inline bool BINFilterMailResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINFilterMailResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINFilterMailResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINFilterMailResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINFilterMailResponse::responsecode() const {
  return responsecode_;
}
inline void BINFilterMailResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINFilterMailResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINFilterMailResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINFilterMailResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINFilterMailResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINFilterMailResponse::message() const {
  return *message_;
}
inline void BINFilterMailResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINFilterMailResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINFilterMailResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINFilterMailResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINFilterMailResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINFilterMailResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .BINMail mails = 3;
inline int BINFilterMailResponse::mails_size() const {
  return mails_.size();
}
inline void BINFilterMailResponse::clear_mails() {
  mails_.Clear();
}
inline const ::BINMail& BINFilterMailResponse::mails(int index) const {
  return mails_.Get(index);
}
inline ::BINMail* BINFilterMailResponse::mutable_mails(int index) {
  return mails_.Mutable(index);
}
inline ::BINMail* BINFilterMailResponse::add_mails() {
  return mails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINMail >&
BINFilterMailResponse::mails() const {
  return mails_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINMail >*
BINFilterMailResponse::mutable_mails() {
  return &mails_;
}

// optional int32 count = 4;
inline bool BINFilterMailResponse::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINFilterMailResponse::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINFilterMailResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINFilterMailResponse::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 BINFilterMailResponse::count() const {
  return count_;
}
inline void BINFilterMailResponse::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int64 lastRequestTime = 5;
inline bool BINFilterMailResponse::has_lastrequesttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINFilterMailResponse::set_has_lastrequesttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINFilterMailResponse::clear_has_lastrequesttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINFilterMailResponse::clear_lastrequesttime() {
  lastrequesttime_ = GOOGLE_LONGLONG(0);
  clear_has_lastrequesttime();
}
inline ::google::protobuf::int64 BINFilterMailResponse::lastrequesttime() const {
  return lastrequesttime_;
}
inline void BINFilterMailResponse::set_lastrequesttime(::google::protobuf::int64 value) {
  set_has_lastrequesttime();
  lastrequesttime_ = value;
}

// -------------------------------------------------------------------

// BINSendMailRequest

// repeated string recipientUserNames = 1;
inline int BINSendMailRequest::recipientusernames_size() const {
  return recipientusernames_.size();
}
inline void BINSendMailRequest::clear_recipientusernames() {
  recipientusernames_.Clear();
}
inline const ::std::string& BINSendMailRequest::recipientusernames(int index) const {
  return recipientusernames_.Get(index);
}
inline ::std::string* BINSendMailRequest::mutable_recipientusernames(int index) {
  return recipientusernames_.Mutable(index);
}
inline void BINSendMailRequest::set_recipientusernames(int index, const ::std::string& value) {
  recipientusernames_.Mutable(index)->assign(value);
}
inline void BINSendMailRequest::set_recipientusernames(int index, const char* value) {
  recipientusernames_.Mutable(index)->assign(value);
}
inline void BINSendMailRequest::set_recipientusernames(int index, const char* value, size_t size) {
  recipientusernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINSendMailRequest::add_recipientusernames() {
  return recipientusernames_.Add();
}
inline void BINSendMailRequest::add_recipientusernames(const ::std::string& value) {
  recipientusernames_.Add()->assign(value);
}
inline void BINSendMailRequest::add_recipientusernames(const char* value) {
  recipientusernames_.Add()->assign(value);
}
inline void BINSendMailRequest::add_recipientusernames(const char* value, size_t size) {
  recipientusernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BINSendMailRequest::recipientusernames() const {
  return recipientusernames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BINSendMailRequest::mutable_recipientusernames() {
  return &recipientusernames_;
}

// optional string title = 2;
inline bool BINSendMailRequest::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINSendMailRequest::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINSendMailRequest::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINSendMailRequest::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& BINSendMailRequest::title() const {
  return *title_;
}
inline void BINSendMailRequest::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void BINSendMailRequest::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void BINSendMailRequest::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINSendMailRequest::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* BINSendMailRequest::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINSendMailRequest::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string body = 3;
inline bool BINSendMailRequest::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINSendMailRequest::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINSendMailRequest::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINSendMailRequest::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& BINSendMailRequest::body() const {
  return *body_;
}
inline void BINSendMailRequest::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void BINSendMailRequest::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void BINSendMailRequest::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINSendMailRequest::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* BINSendMailRequest::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINSendMailRequest::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 parentId = 4;
inline bool BINSendMailRequest::has_parentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINSendMailRequest::set_has_parentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINSendMailRequest::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINSendMailRequest::clear_parentid() {
  parentid_ = GOOGLE_LONGLONG(0);
  clear_has_parentid();
}
inline ::google::protobuf::int64 BINSendMailRequest::parentid() const {
  return parentid_;
}
inline void BINSendMailRequest::set_parentid(::google::protobuf::int64 value) {
  set_has_parentid();
  parentid_ = value;
}

// -------------------------------------------------------------------

// BINSendMailResponse

// required bool responseCode = 1;
inline bool BINSendMailResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINSendMailResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINSendMailResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINSendMailResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINSendMailResponse::responsecode() const {
  return responsecode_;
}
inline void BINSendMailResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINSendMailResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINSendMailResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINSendMailResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINSendMailResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINSendMailResponse::message() const {
  return *message_;
}
inline void BINSendMailResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINSendMailResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINSendMailResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINSendMailResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINSendMailResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINSendMailResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BINDeleteMailRequest

// repeated int64 selectedMailIds = 1;
inline int BINDeleteMailRequest::selectedmailids_size() const {
  return selectedmailids_.size();
}
inline void BINDeleteMailRequest::clear_selectedmailids() {
  selectedmailids_.Clear();
}
inline ::google::protobuf::int64 BINDeleteMailRequest::selectedmailids(int index) const {
  return selectedmailids_.Get(index);
}
inline void BINDeleteMailRequest::set_selectedmailids(int index, ::google::protobuf::int64 value) {
  selectedmailids_.Set(index, value);
}
inline void BINDeleteMailRequest::add_selectedmailids(::google::protobuf::int64 value) {
  selectedmailids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BINDeleteMailRequest::selectedmailids() const {
  return selectedmailids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BINDeleteMailRequest::mutable_selectedmailids() {
  return &selectedmailids_;
}

// -------------------------------------------------------------------

// BINDeleteMailResponse

// required bool responseCode = 1;
inline bool BINDeleteMailResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINDeleteMailResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINDeleteMailResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINDeleteMailResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINDeleteMailResponse::responsecode() const {
  return responsecode_;
}
inline void BINDeleteMailResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINDeleteMailResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINDeleteMailResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINDeleteMailResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINDeleteMailResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINDeleteMailResponse::message() const {
  return *message_;
}
inline void BINDeleteMailResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINDeleteMailResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINDeleteMailResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINDeleteMailResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINDeleteMailResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINDeleteMailResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int64 deletedMailIds = 3;
inline int BINDeleteMailResponse::deletedmailids_size() const {
  return deletedmailids_.size();
}
inline void BINDeleteMailResponse::clear_deletedmailids() {
  deletedmailids_.Clear();
}
inline ::google::protobuf::int64 BINDeleteMailResponse::deletedmailids(int index) const {
  return deletedmailids_.Get(index);
}
inline void BINDeleteMailResponse::set_deletedmailids(int index, ::google::protobuf::int64 value) {
  deletedmailids_.Set(index, value);
}
inline void BINDeleteMailResponse::add_deletedmailids(::google::protobuf::int64 value) {
  deletedmailids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BINDeleteMailResponse::deletedmailids() const {
  return deletedmailids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BINDeleteMailResponse::mutable_deletedmailids() {
  return &deletedmailids_;
}

// -------------------------------------------------------------------

// BINReadedMailRequest

// required int64 readedMailId = 1;
inline bool BINReadedMailRequest::has_readedmailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINReadedMailRequest::set_has_readedmailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINReadedMailRequest::clear_has_readedmailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINReadedMailRequest::clear_readedmailid() {
  readedmailid_ = GOOGLE_LONGLONG(0);
  clear_has_readedmailid();
}
inline ::google::protobuf::int64 BINReadedMailRequest::readedmailid() const {
  return readedmailid_;
}
inline void BINReadedMailRequest::set_readedmailid(::google::protobuf::int64 value) {
  set_has_readedmailid();
  readedmailid_ = value;
}

// optional bool getContent = 2;
inline bool BINReadedMailRequest::has_getcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINReadedMailRequest::set_has_getcontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINReadedMailRequest::clear_has_getcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINReadedMailRequest::clear_getcontent() {
  getcontent_ = false;
  clear_has_getcontent();
}
inline bool BINReadedMailRequest::getcontent() const {
  return getcontent_;
}
inline void BINReadedMailRequest::set_getcontent(bool value) {
  set_has_getcontent();
  getcontent_ = value;
}

// -------------------------------------------------------------------

// BINReadedMailResponse

// required bool responseCode = 1;
inline bool BINReadedMailResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINReadedMailResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINReadedMailResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINReadedMailResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINReadedMailResponse::responsecode() const {
  return responsecode_;
}
inline void BINReadedMailResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINReadedMailResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINReadedMailResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINReadedMailResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINReadedMailResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINReadedMailResponse::message() const {
  return *message_;
}
inline void BINReadedMailResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINReadedMailResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINReadedMailResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINReadedMailResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINReadedMailResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINReadedMailResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .BINMail mail = 3;
inline bool BINReadedMailResponse::has_mail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINReadedMailResponse::set_has_mail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINReadedMailResponse::clear_has_mail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINReadedMailResponse::clear_mail() {
  if (mail_ != NULL) mail_->::BINMail::Clear();
  clear_has_mail();
}
inline const ::BINMail& BINReadedMailResponse::mail() const {
  return mail_ != NULL ? *mail_ : *default_instance_->mail_;
}
inline ::BINMail* BINReadedMailResponse::mutable_mail() {
  set_has_mail();
  if (mail_ == NULL) mail_ = new ::BINMail;
  return mail_;
}
inline ::BINMail* BINReadedMailResponse::release_mail() {
  clear_has_mail();
  ::BINMail* temp = mail_;
  mail_ = NULL;
  return temp;
}
inline void BINReadedMailResponse::set_allocated_mail(::BINMail* mail) {
  delete mail_;
  mail_ = mail;
  if (mail) {
    set_has_mail();
  } else {
    clear_has_mail();
  }
}

// -------------------------------------------------------------------

// BINClaimAttachItemRequest

// required int64 mailId = 1;
inline bool BINClaimAttachItemRequest::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINClaimAttachItemRequest::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINClaimAttachItemRequest::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINClaimAttachItemRequest::clear_mailid() {
  mailid_ = GOOGLE_LONGLONG(0);
  clear_has_mailid();
}
inline ::google::protobuf::int64 BINClaimAttachItemRequest::mailid() const {
  return mailid_;
}
inline void BINClaimAttachItemRequest::set_mailid(::google::protobuf::int64 value) {
  set_has_mailid();
  mailid_ = value;
}

// -------------------------------------------------------------------

// BINClaimAttachItemResponse

// required bool responseCode = 1;
inline bool BINClaimAttachItemResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINClaimAttachItemResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINClaimAttachItemResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINClaimAttachItemResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINClaimAttachItemResponse::responsecode() const {
  return responsecode_;
}
inline void BINClaimAttachItemResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINClaimAttachItemResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINClaimAttachItemResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINClaimAttachItemResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINClaimAttachItemResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINClaimAttachItemResponse::message() const {
  return *message_;
}
inline void BINClaimAttachItemResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINClaimAttachItemResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINClaimAttachItemResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINClaimAttachItemResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINClaimAttachItemResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINClaimAttachItemResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mail_2eproto__INCLUDED
