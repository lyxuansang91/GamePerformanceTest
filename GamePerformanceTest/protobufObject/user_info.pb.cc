// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINUserSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINUserSetting_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_5finfo_2eproto() {
  protobuf_AddDesc_user_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user_info.proto");
  GOOGLE_CHECK(file != NULL);
  BINUserInfo_descriptor_ = file->message_type(0);
  static const int BINUserInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, displayname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, avatarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, trustedindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, totalmatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, totalwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, identity_),
  };
  BINUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINUserInfo_descriptor_,
      BINUserInfo::default_instance_,
      BINUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINUserInfo));
  BINUserSetting_descriptor_ = file->message_type(1);
  static const int BINUserSetting_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserSetting, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserSetting, autoready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserSetting, autodenyinvitation_),
  };
  BINUserSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINUserSetting_descriptor_,
      BINUserSetting::default_instance_,
      BINUserSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINUserSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINUserSetting));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINUserInfo_descriptor_, &BINUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINUserSetting_descriptor_, &BINUserSetting::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_5finfo_2eproto() {
  delete BINUserInfo::default_instance_;
  delete BINUserInfo_reflection_;
  delete BINUserSetting::default_instance_;
  delete BINUserSetting_reflection_;
}

void protobuf_AddDesc_user_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_level_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017user_info.proto\032\013level.proto\"\365\002\n\013BINUs"
    "erInfo\022\016\n\006userId\030\001 \002(\003\022\020\n\010userName\030\002 \002(\t"
    "\022\023\n\013displayName\030\003 \001(\t\022\020\n\010avatarId\030\004 \001(\005\022"
    "\013\n\003sex\030\005 \001(\005\022\013\n\003age\030\006 \001(\005\022\030\n\005level\030\007 \001(\013"
    "2\t.BINLevel\022\030\n\005medal\030\010 \001(\0132\t.BINMedal\022\024\n"
    "\014trustedIndex\030\t \001(\005\022\013\n\003exp\030\n \001(\003\022\014\n\004cash"
    "\030\013 \001(\003\022\014\n\004gold\030\014 \001(\003\022\022\n\ntotalMatch\030\r \001(\005"
    "\022\020\n\010totalWin\030\016 \001(\005\022\025\n\rlastLoginTime\030\017 \001("
    "\003\022\020\n\010isOnline\030\020 \001(\010\022\020\n\010userType\030\021 \001(\005\022\r\n"
    "\005email\030\022 \001(\t\022\016\n\006mobile\030\023 \001(\t\022\020\n\010identity"
    "\030\024 \001(\t\"O\n\016BINUserSetting\022\016\n\006userId\030\001 \002(\003"
    "\022\021\n\tautoReady\030\002 \001(\010\022\032\n\022autoDenyInvitatio"
    "n\030\003 \001(\010B\036\n\034com.mi.game.network.data.bin", 519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user_info.proto", &protobuf_RegisterTypes);
  BINUserInfo::default_instance_ = new BINUserInfo();
  BINUserSetting::default_instance_ = new BINUserSetting();
  BINUserInfo::default_instance_->InitAsDefaultInstance();
  BINUserSetting::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_5finfo_2eproto {
  StaticDescriptorInitializer_user_5finfo_2eproto() {
    protobuf_AddDesc_user_5finfo_2eproto();
  }
} static_descriptor_initializer_user_5finfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINUserInfo::kUserIdFieldNumber;
const int BINUserInfo::kUserNameFieldNumber;
const int BINUserInfo::kDisplayNameFieldNumber;
const int BINUserInfo::kAvatarIdFieldNumber;
const int BINUserInfo::kSexFieldNumber;
const int BINUserInfo::kAgeFieldNumber;
const int BINUserInfo::kLevelFieldNumber;
const int BINUserInfo::kMedalFieldNumber;
const int BINUserInfo::kTrustedIndexFieldNumber;
const int BINUserInfo::kExpFieldNumber;
const int BINUserInfo::kCashFieldNumber;
const int BINUserInfo::kGoldFieldNumber;
const int BINUserInfo::kTotalMatchFieldNumber;
const int BINUserInfo::kTotalWinFieldNumber;
const int BINUserInfo::kLastLoginTimeFieldNumber;
const int BINUserInfo::kIsOnlineFieldNumber;
const int BINUserInfo::kUserTypeFieldNumber;
const int BINUserInfo::kEmailFieldNumber;
const int BINUserInfo::kMobileFieldNumber;
const int BINUserInfo::kIdentityFieldNumber;
#endif  // !_MSC_VER

BINUserInfo::BINUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINUserInfo::InitAsDefaultInstance() {
  level_ = const_cast< ::BINLevel*>(&::BINLevel::default_instance());
  medal_ = const_cast< ::BINMedal*>(&::BINMedal::default_instance());
}

BINUserInfo::BINUserInfo(const BINUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINUserInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatarid_ = 0;
  sex_ = 0;
  age_ = 0;
  level_ = NULL;
  medal_ = NULL;
  trustedindex_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  cash_ = GOOGLE_LONGLONG(0);
  gold_ = GOOGLE_LONGLONG(0);
  totalmatch_ = 0;
  totalwin_ = 0;
  lastlogintime_ = GOOGLE_LONGLONG(0);
  isonline_ = false;
  usertype_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINUserInfo::~BINUserInfo() {
  SharedDtor();
}

void BINUserInfo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (identity_ != &::google::protobuf::internal::kEmptyString) {
    delete identity_;
  }
  if (this != default_instance_) {
    delete level_;
    delete medal_;
  }
}

void BINUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINUserInfo_descriptor_;
}

const BINUserInfo& BINUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5finfo_2eproto();
  return *default_instance_;
}

BINUserInfo* BINUserInfo::default_instance_ = NULL;

BINUserInfo* BINUserInfo::New() const {
  return new BINUserInfo;
}

void BINUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_displayname()) {
      if (displayname_ != &::google::protobuf::internal::kEmptyString) {
        displayname_->clear();
      }
    }
    avatarid_ = 0;
    sex_ = 0;
    age_ = 0;
    if (has_level()) {
      if (level_ != NULL) level_->::BINLevel::Clear();
    }
    if (has_medal()) {
      if (medal_ != NULL) medal_->::BINMedal::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    trustedindex_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    cash_ = GOOGLE_LONGLONG(0);
    gold_ = GOOGLE_LONGLONG(0);
    totalmatch_ = 0;
    totalwin_ = 0;
    lastlogintime_ = GOOGLE_LONGLONG(0);
    isonline_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    usertype_ = 0;
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::kEmptyString) {
        mobile_->clear();
      }
    }
    if (has_identity()) {
      if (identity_ != &::google::protobuf::internal::kEmptyString) {
        identity_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userName;
        break;
      }

      // required string userName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_displayName;
        break;
      }

      // optional string displayName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_avatarId;
        break;
      }

      // optional int32 avatarId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatarId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatarid_)));
          set_has_avatarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_age;
        break;
      }

      // optional int32 age = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_level;
        break;
      }

      // optional .BINLevel level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_level()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_medal;
        break;
      }

      // optional .BINMedal medal = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_medal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_medal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_trustedIndex;
        break;
      }

      // optional int32 trustedIndex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trustedIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trustedindex_)));
          set_has_trustedindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_exp;
        break;
      }

      // optional int64 exp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cash;
        break;
      }

      // optional int64 cash = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gold;
        break;
      }

      // optional int64 gold = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_totalMatch;
        break;
      }

      // optional int32 totalMatch = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalMatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalmatch_)));
          set_has_totalmatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_totalWin;
        break;
      }

      // optional int32 totalWin = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalwin_)));
          set_has_totalwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lastLoginTime;
        break;
      }

      // optional int64 lastLoginTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_isOnline;
        break;
      }

      // optional bool isOnline = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_userType;
        break;
      }

      // optional int32 userType = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usertype_)));
          set_has_usertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_email;
        break;
      }

      // optional string email = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_mobile;
        break;
      }

      // optional string mobile = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_identity;
        break;
      }

      // optional string identity = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identity().data(), this->identity().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // required string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // optional string displayName = 3;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->displayname(), output);
  }

  // optional int32 avatarId = 4;
  if (has_avatarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->avatarid(), output);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional int32 age = 6;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->age(), output);
  }

  // optional .BINLevel level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->level(), output);
  }

  // optional .BINMedal medal = 8;
  if (has_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->medal(), output);
  }

  // optional int32 trustedIndex = 9;
  if (has_trustedindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->trustedindex(), output);
  }

  // optional int64 exp = 10;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->exp(), output);
  }

  // optional int64 cash = 11;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->cash(), output);
  }

  // optional int64 gold = 12;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->gold(), output);
  }

  // optional int32 totalMatch = 13;
  if (has_totalmatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->totalmatch(), output);
  }

  // optional int32 totalWin = 14;
  if (has_totalwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->totalwin(), output);
  }

  // optional int64 lastLoginTime = 15;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->lastlogintime(), output);
  }

  // optional bool isOnline = 16;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isonline(), output);
  }

  // optional int32 userType = 17;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->usertype(), output);
  }

  // optional string email = 18;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->email(), output);
  }

  // optional string mobile = 19;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->mobile(), output);
  }

  // optional string identity = 20;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->identity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // required string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string displayName = 3;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->displayname(), target);
  }

  // optional int32 avatarId = 4;
  if (has_avatarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->avatarid(), target);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional int32 age = 6;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->age(), target);
  }

  // optional .BINLevel level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->level(), target);
  }

  // optional .BINMedal medal = 8;
  if (has_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->medal(), target);
  }

  // optional int32 trustedIndex = 9;
  if (has_trustedindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->trustedindex(), target);
  }

  // optional int64 exp = 10;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->exp(), target);
  }

  // optional int64 cash = 11;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->cash(), target);
  }

  // optional int64 gold = 12;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->gold(), target);
  }

  // optional int32 totalMatch = 13;
  if (has_totalmatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->totalmatch(), target);
  }

  // optional int32 totalWin = 14;
  if (has_totalwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->totalwin(), target);
  }

  // optional int64 lastLoginTime = 15;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->lastlogintime(), target);
  }

  // optional bool isOnline = 16;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isonline(), target);
  }

  // optional int32 userType = 17;
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->usertype(), target);
  }

  // optional string email = 18;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->email(), target);
  }

  // optional string mobile = 19;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->mobile(), target);
  }

  // optional string identity = 20;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->identity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // required string userName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string displayName = 3;
    if (has_displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }

    // optional int32 avatarId = 4;
    if (has_avatarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatarid());
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 age = 6;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional .BINLevel level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->level());
    }

    // optional .BINMedal medal = 8;
    if (has_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->medal());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 trustedIndex = 9;
    if (has_trustedindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trustedindex());
    }

    // optional int64 exp = 10;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int64 cash = 11;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cash());
    }

    // optional int64 gold = 12;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int32 totalMatch = 13;
    if (has_totalmatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalmatch());
    }

    // optional int32 totalWin = 14;
    if (has_totalwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalwin());
    }

    // optional int64 lastLoginTime = 15;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastlogintime());
    }

    // optional bool isOnline = 16;
    if (has_isonline()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 userType = 17;
    if (has_usertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usertype());
    }

    // optional string email = 18;
    if (has_email()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string mobile = 19;
    if (has_mobile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }

    // optional string identity = 20;
    if (has_identity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINUserInfo::MergeFrom(const BINUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
    if (from.has_avatarid()) {
      set_avatarid(from.avatarid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_level()) {
      mutable_level()->::BINLevel::MergeFrom(from.level());
    }
    if (from.has_medal()) {
      mutable_medal()->::BINMedal::MergeFrom(from.medal());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_trustedindex()) {
      set_trustedindex(from.trustedindex());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_totalmatch()) {
      set_totalmatch(from.totalmatch());
    }
    if (from.has_totalwin()) {
      set_totalwin(from.totalwin());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINUserInfo::CopyFrom(const BINUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_level()) {
    if (!this->level().IsInitialized()) return false;
  }
  if (has_medal()) {
    if (!this->medal().IsInitialized()) return false;
  }
  return true;
}

void BINUserInfo::Swap(BINUserInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(displayname_, other->displayname_);
    std::swap(avatarid_, other->avatarid_);
    std::swap(sex_, other->sex_);
    std::swap(age_, other->age_);
    std::swap(level_, other->level_);
    std::swap(medal_, other->medal_);
    std::swap(trustedindex_, other->trustedindex_);
    std::swap(exp_, other->exp_);
    std::swap(cash_, other->cash_);
    std::swap(gold_, other->gold_);
    std::swap(totalmatch_, other->totalmatch_);
    std::swap(totalwin_, other->totalwin_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(isonline_, other->isonline_);
    std::swap(usertype_, other->usertype_);
    std::swap(email_, other->email_);
    std::swap(mobile_, other->mobile_);
    std::swap(identity_, other->identity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINUserInfo_descriptor_;
  metadata.reflection = BINUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINUserSetting::kUserIdFieldNumber;
const int BINUserSetting::kAutoReadyFieldNumber;
const int BINUserSetting::kAutoDenyInvitationFieldNumber;
#endif  // !_MSC_VER

BINUserSetting::BINUserSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINUserSetting::InitAsDefaultInstance() {
}

BINUserSetting::BINUserSetting(const BINUserSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINUserSetting::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  autoready_ = false;
  autodenyinvitation_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINUserSetting::~BINUserSetting() {
  SharedDtor();
}

void BINUserSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINUserSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINUserSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINUserSetting_descriptor_;
}

const BINUserSetting& BINUserSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5finfo_2eproto();
  return *default_instance_;
}

BINUserSetting* BINUserSetting::default_instance_ = NULL;

BINUserSetting* BINUserSetting::New() const {
  return new BINUserSetting;
}

void BINUserSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    autoready_ = false;
    autodenyinvitation_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINUserSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_autoReady;
        break;
      }

      // optional bool autoReady = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoReady:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoready_)));
          set_has_autoready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_autoDenyInvitation;
        break;
      }

      // optional bool autoDenyInvitation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoDenyInvitation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autodenyinvitation_)));
          set_has_autodenyinvitation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINUserSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // optional bool autoReady = 2;
  if (has_autoready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autoready(), output);
  }

  // optional bool autoDenyInvitation = 3;
  if (has_autodenyinvitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autodenyinvitation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINUserSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // optional bool autoReady = 2;
  if (has_autoready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->autoready(), target);
  }

  // optional bool autoDenyInvitation = 3;
  if (has_autodenyinvitation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->autodenyinvitation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINUserSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional bool autoReady = 2;
    if (has_autoready()) {
      total_size += 1 + 1;
    }

    // optional bool autoDenyInvitation = 3;
    if (has_autodenyinvitation()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINUserSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINUserSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINUserSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINUserSetting::MergeFrom(const BINUserSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_autoready()) {
      set_autoready(from.autoready());
    }
    if (from.has_autodenyinvitation()) {
      set_autodenyinvitation(from.autodenyinvitation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINUserSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINUserSetting::CopyFrom(const BINUserSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINUserSetting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINUserSetting::Swap(BINUserSetting* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(autoready_, other->autoready_);
    std::swap(autodenyinvitation_, other->autodenyinvitation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINUserSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINUserSetting_descriptor_;
  metadata.reflection = BINUserSetting_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
