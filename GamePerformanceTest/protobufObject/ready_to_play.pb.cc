// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ready_to_play.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ready_to_play.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINReadyToPlayRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINReadyToPlayRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINReadyToPlayResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINReadyToPlayResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ready_5fto_5fplay_2eproto() {
  protobuf_AddDesc_ready_5fto_5fplay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ready_to_play.proto");
  GOOGLE_CHECK(file != NULL);
  BINReadyToPlayRequest_descriptor_ = file->message_type(0);
  static const int BINReadyToPlayRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadyToPlayRequest, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadyToPlayRequest, tableindex_),
  };
  BINReadyToPlayRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINReadyToPlayRequest_descriptor_,
      BINReadyToPlayRequest::default_instance_,
      BINReadyToPlayRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadyToPlayRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadyToPlayRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINReadyToPlayRequest));
  BINReadyToPlayResponse_descriptor_ = file->message_type(1);
  static const int BINReadyToPlayResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadyToPlayResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadyToPlayResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadyToPlayResponse, readyuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadyToPlayResponse, tableindex_),
  };
  BINReadyToPlayResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINReadyToPlayResponse_descriptor_,
      BINReadyToPlayResponse::default_instance_,
      BINReadyToPlayResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadyToPlayResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadyToPlayResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINReadyToPlayResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ready_5fto_5fplay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINReadyToPlayRequest_descriptor_, &BINReadyToPlayRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINReadyToPlayResponse_descriptor_, &BINReadyToPlayResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ready_5fto_5fplay_2eproto() {
  delete BINReadyToPlayRequest::default_instance_;
  delete BINReadyToPlayRequest_reflection_;
  delete BINReadyToPlayResponse::default_instance_;
  delete BINReadyToPlayResponse_reflection_;
}

void protobuf_AddDesc_ready_5fto_5fplay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ready_to_play.proto\">\n\025BINReadyToPlayR"
    "equest\022\021\n\troomIndex\030\001 \002(\005\022\022\n\ntableIndex\030"
    "\002 \001(\005\"h\n\026BINReadyToPlayResponse\022\024\n\014respo"
    "nseCode\030\001 \002(\010\022\017\n\007message\030\002 \001(\t\022\023\n\013readyU"
    "serId\030\003 \001(\003\022\022\n\ntableIndex\030\004 \001(\005B\036\n\034com.m"
    "i.game.network.data.bin", 223);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ready_to_play.proto", &protobuf_RegisterTypes);
  BINReadyToPlayRequest::default_instance_ = new BINReadyToPlayRequest();
  BINReadyToPlayResponse::default_instance_ = new BINReadyToPlayResponse();
  BINReadyToPlayRequest::default_instance_->InitAsDefaultInstance();
  BINReadyToPlayResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ready_5fto_5fplay_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ready_5fto_5fplay_2eproto {
  StaticDescriptorInitializer_ready_5fto_5fplay_2eproto() {
    protobuf_AddDesc_ready_5fto_5fplay_2eproto();
  }
} static_descriptor_initializer_ready_5fto_5fplay_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINReadyToPlayRequest::kRoomIndexFieldNumber;
const int BINReadyToPlayRequest::kTableIndexFieldNumber;
#endif  // !_MSC_VER

BINReadyToPlayRequest::BINReadyToPlayRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINReadyToPlayRequest::InitAsDefaultInstance() {
}

BINReadyToPlayRequest::BINReadyToPlayRequest(const BINReadyToPlayRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINReadyToPlayRequest::SharedCtor() {
  _cached_size_ = 0;
  roomindex_ = 0;
  tableindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINReadyToPlayRequest::~BINReadyToPlayRequest() {
  SharedDtor();
}

void BINReadyToPlayRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINReadyToPlayRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINReadyToPlayRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINReadyToPlayRequest_descriptor_;
}

const BINReadyToPlayRequest& BINReadyToPlayRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ready_5fto_5fplay_2eproto();
  return *default_instance_;
}

BINReadyToPlayRequest* BINReadyToPlayRequest::default_instance_ = NULL;

BINReadyToPlayRequest* BINReadyToPlayRequest::New() const {
  return new BINReadyToPlayRequest;
}

void BINReadyToPlayRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomindex_ = 0;
    tableindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINReadyToPlayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableIndex;
        break;
      }

      // optional int32 tableIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableindex_)));
          set_has_tableindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINReadyToPlayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // optional int32 tableIndex = 2;
  if (has_tableindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINReadyToPlayRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // optional int32 tableIndex = 2;
  if (has_tableindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINReadyToPlayRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomIndex = 1;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

    // optional int32 tableIndex = 2;
    if (has_tableindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINReadyToPlayRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINReadyToPlayRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINReadyToPlayRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINReadyToPlayRequest::MergeFrom(const BINReadyToPlayRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
    if (from.has_tableindex()) {
      set_tableindex(from.tableindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINReadyToPlayRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINReadyToPlayRequest::CopyFrom(const BINReadyToPlayRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINReadyToPlayRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINReadyToPlayRequest::Swap(BINReadyToPlayRequest* other) {
  if (other != this) {
    std::swap(roomindex_, other->roomindex_);
    std::swap(tableindex_, other->tableindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINReadyToPlayRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINReadyToPlayRequest_descriptor_;
  metadata.reflection = BINReadyToPlayRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINReadyToPlayResponse::kResponseCodeFieldNumber;
const int BINReadyToPlayResponse::kMessageFieldNumber;
const int BINReadyToPlayResponse::kReadyUserIdFieldNumber;
const int BINReadyToPlayResponse::kTableIndexFieldNumber;
#endif  // !_MSC_VER

BINReadyToPlayResponse::BINReadyToPlayResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINReadyToPlayResponse::InitAsDefaultInstance() {
}

BINReadyToPlayResponse::BINReadyToPlayResponse(const BINReadyToPlayResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINReadyToPlayResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  readyuserid_ = GOOGLE_LONGLONG(0);
  tableindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINReadyToPlayResponse::~BINReadyToPlayResponse() {
  SharedDtor();
}

void BINReadyToPlayResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINReadyToPlayResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINReadyToPlayResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINReadyToPlayResponse_descriptor_;
}

const BINReadyToPlayResponse& BINReadyToPlayResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ready_5fto_5fplay_2eproto();
  return *default_instance_;
}

BINReadyToPlayResponse* BINReadyToPlayResponse::default_instance_ = NULL;

BINReadyToPlayResponse* BINReadyToPlayResponse::New() const {
  return new BINReadyToPlayResponse;
}

void BINReadyToPlayResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    readyuserid_ = GOOGLE_LONGLONG(0);
    tableindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINReadyToPlayResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_readyUserId;
        break;
      }

      // optional int64 readyUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readyUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &readyuserid_)));
          set_has_readyuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tableIndex;
        break;
      }

      // optional int32 tableIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableindex_)));
          set_has_tableindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINReadyToPlayResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional int64 readyUserId = 3;
  if (has_readyuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->readyuserid(), output);
  }

  // optional int32 tableIndex = 4;
  if (has_tableindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tableindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINReadyToPlayResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional int64 readyUserId = 3;
  if (has_readyuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->readyuserid(), target);
  }

  // optional int32 tableIndex = 4;
  if (has_tableindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tableindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINReadyToPlayResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int64 readyUserId = 3;
    if (has_readyuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->readyuserid());
    }

    // optional int32 tableIndex = 4;
    if (has_tableindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINReadyToPlayResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINReadyToPlayResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINReadyToPlayResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINReadyToPlayResponse::MergeFrom(const BINReadyToPlayResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_readyuserid()) {
      set_readyuserid(from.readyuserid());
    }
    if (from.has_tableindex()) {
      set_tableindex(from.tableindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINReadyToPlayResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINReadyToPlayResponse::CopyFrom(const BINReadyToPlayResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINReadyToPlayResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINReadyToPlayResponse::Swap(BINReadyToPlayResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(readyuserid_, other->readyuserid_);
    std::swap(tableindex_, other->tableindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINReadyToPlayResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINReadyToPlayResponse_descriptor_;
  metadata.reflection = BINReadyToPlayResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
