// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINPrivateBet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINPrivateBet_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINBetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINBetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINBetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINBetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINExtraBetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINExtraBetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINExtraBetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINExtraBetResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bet_2eproto() {
  protobuf_AddDesc_bet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bet.proto");
  GOOGLE_CHECK(file != NULL);
  BINPrivateBet_descriptor_ = file->message_type(0);
  static const int BINPrivateBet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINPrivateBet, targetuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINPrivateBet, betmoney_),
  };
  BINPrivateBet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINPrivateBet_descriptor_,
      BINPrivateBet::default_instance_,
      BINPrivateBet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINPrivateBet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINPrivateBet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINPrivateBet));
  BINBetRequest_descriptor_ = file->message_type(1);
  static const int BINBetRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetRequest, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetRequest, bettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetRequest, betmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetRequest, privatebets_),
  };
  BINBetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINBetRequest_descriptor_,
      BINBetRequest::default_instance_,
      BINBetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINBetRequest));
  BINBetResponse_descriptor_ = file->message_type(2);
  static const int BINBetResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetResponse, sourceuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetResponse, bettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetResponse, betmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetResponse, targetuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetResponse, args_),
  };
  BINBetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINBetResponse_descriptor_,
      BINBetResponse::default_instance_,
      BINBetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINBetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINBetResponse));
  BINExtraBetRequest_descriptor_ = file->message_type(3);
  static const int BINExtraBetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExtraBetRequest, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExtraBetRequest, action_),
  };
  BINExtraBetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINExtraBetRequest_descriptor_,
      BINExtraBetRequest::default_instance_,
      BINExtraBetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExtraBetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExtraBetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINExtraBetRequest));
  BINExtraBetResponse_descriptor_ = file->message_type(4);
  static const int BINExtraBetResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExtraBetResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExtraBetResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExtraBetResponse, args_),
  };
  BINExtraBetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINExtraBetResponse_descriptor_,
      BINExtraBetResponse::default_instance_,
      BINExtraBetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExtraBetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExtraBetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINExtraBetResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINPrivateBet_descriptor_, &BINPrivateBet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINBetRequest_descriptor_, &BINBetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINBetResponse_descriptor_, &BINBetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINExtraBetRequest_descriptor_, &BINExtraBetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINExtraBetResponse_descriptor_, &BINExtraBetResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bet_2eproto() {
  delete BINPrivateBet::default_instance_;
  delete BINPrivateBet_reflection_;
  delete BINBetRequest::default_instance_;
  delete BINBetRequest_reflection_;
  delete BINBetResponse::default_instance_;
  delete BINBetResponse_reflection_;
  delete BINExtraBetRequest::default_instance_;
  delete BINExtraBetRequest_reflection_;
  delete BINExtraBetResponse::default_instance_;
  delete BINExtraBetResponse_reflection_;
}

void protobuf_AddDesc_bet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_map_5ffield_5fentry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tbet.proto\032\025map_field_entry.proto\"7\n\rBI"
    "NPrivateBet\022\024\n\014targetUserId\030\001 \002(\003\022\020\n\010bet"
    "Money\030\002 \002(\003\"j\n\rBINBetRequest\022\021\n\troomInde"
    "x\030\001 \002(\005\022\017\n\007betType\030\002 \002(\005\022\020\n\010betMoney\030\003 \001"
    "(\003\022#\n\013privateBets\030\004 \003(\0132\016.BINPrivateBet\""
    "\247\001\n\016BINBetResponse\022\024\n\014responseCode\030\001 \002(\010"
    "\022\017\n\007message\030\002 \001(\t\022\024\n\014sourceUserId\030\003 \001(\003\022"
    "\017\n\007betType\030\004 \001(\005\022\020\n\010betMoney\030\005 \001(\003\022\024\n\014ta"
    "rgetUserId\030\006 \001(\003\022\037\n\004args\030\007 \003(\0132\021.BINMapF"
    "ieldEntry\"7\n\022BINExtraBetRequest\022\021\n\troomI"
    "ndex\030\001 \002(\005\022\016\n\006action\030\002 \001(\005\"]\n\023BINExtraBe"
    "tResponse\022\024\n\014responseCode\030\001 \002(\010\022\017\n\007messa"
    "ge\030\002 \001(\t\022\037\n\004args\030\003 \003(\0132\021.BINMapFieldEntr"
    "yB\036\n\034com.mi.game.network.data.bin", 553);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bet.proto", &protobuf_RegisterTypes);
  BINPrivateBet::default_instance_ = new BINPrivateBet();
  BINBetRequest::default_instance_ = new BINBetRequest();
  BINBetResponse::default_instance_ = new BINBetResponse();
  BINExtraBetRequest::default_instance_ = new BINExtraBetRequest();
  BINExtraBetResponse::default_instance_ = new BINExtraBetResponse();
  BINPrivateBet::default_instance_->InitAsDefaultInstance();
  BINBetRequest::default_instance_->InitAsDefaultInstance();
  BINBetResponse::default_instance_->InitAsDefaultInstance();
  BINExtraBetRequest::default_instance_->InitAsDefaultInstance();
  BINExtraBetResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bet_2eproto {
  StaticDescriptorInitializer_bet_2eproto() {
    protobuf_AddDesc_bet_2eproto();
  }
} static_descriptor_initializer_bet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINPrivateBet::kTargetUserIdFieldNumber;
const int BINPrivateBet::kBetMoneyFieldNumber;
#endif  // !_MSC_VER

BINPrivateBet::BINPrivateBet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINPrivateBet::InitAsDefaultInstance() {
}

BINPrivateBet::BINPrivateBet(const BINPrivateBet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINPrivateBet::SharedCtor() {
  _cached_size_ = 0;
  targetuserid_ = GOOGLE_LONGLONG(0);
  betmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINPrivateBet::~BINPrivateBet() {
  SharedDtor();
}

void BINPrivateBet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINPrivateBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINPrivateBet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINPrivateBet_descriptor_;
}

const BINPrivateBet& BINPrivateBet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bet_2eproto();
  return *default_instance_;
}

BINPrivateBet* BINPrivateBet::default_instance_ = NULL;

BINPrivateBet* BINPrivateBet::New() const {
  return new BINPrivateBet;
}

void BINPrivateBet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetuserid_ = GOOGLE_LONGLONG(0);
    betmoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINPrivateBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 targetUserId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetuserid_)));
          set_has_targetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_betMoney;
        break;
      }

      // required int64 betMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betmoney_)));
          set_has_betmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINPrivateBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 targetUserId = 1;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->targetuserid(), output);
  }

  // required int64 betMoney = 2;
  if (has_betmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->betmoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINPrivateBet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 targetUserId = 1;
  if (has_targetuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->targetuserid(), target);
  }

  // required int64 betMoney = 2;
  if (has_betmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->betmoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINPrivateBet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 targetUserId = 1;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetuserid());
    }

    // required int64 betMoney = 2;
    if (has_betmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->betmoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINPrivateBet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINPrivateBet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINPrivateBet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINPrivateBet::MergeFrom(const BINPrivateBet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
    if (from.has_betmoney()) {
      set_betmoney(from.betmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINPrivateBet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINPrivateBet::CopyFrom(const BINPrivateBet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINPrivateBet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BINPrivateBet::Swap(BINPrivateBet* other) {
  if (other != this) {
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(betmoney_, other->betmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINPrivateBet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINPrivateBet_descriptor_;
  metadata.reflection = BINPrivateBet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINBetRequest::kRoomIndexFieldNumber;
const int BINBetRequest::kBetTypeFieldNumber;
const int BINBetRequest::kBetMoneyFieldNumber;
const int BINBetRequest::kPrivateBetsFieldNumber;
#endif  // !_MSC_VER

BINBetRequest::BINBetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINBetRequest::InitAsDefaultInstance() {
}

BINBetRequest::BINBetRequest(const BINBetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINBetRequest::SharedCtor() {
  _cached_size_ = 0;
  roomindex_ = 0;
  bettype_ = 0;
  betmoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINBetRequest::~BINBetRequest() {
  SharedDtor();
}

void BINBetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINBetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINBetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINBetRequest_descriptor_;
}

const BINBetRequest& BINBetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bet_2eproto();
  return *default_instance_;
}

BINBetRequest* BINBetRequest::default_instance_ = NULL;

BINBetRequest* BINBetRequest::New() const {
  return new BINBetRequest;
}

void BINBetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomindex_ = 0;
    bettype_ = 0;
    betmoney_ = GOOGLE_LONGLONG(0);
  }
  privatebets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINBetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_betType;
        break;
      }

      // required int32 betType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bettype_)));
          set_has_bettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_betMoney;
        break;
      }

      // optional int64 betMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betmoney_)));
          set_has_betmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_privateBets;
        break;
      }

      // repeated .BINPrivateBet privateBets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privateBets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_privatebets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_privateBets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINBetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // required int32 betType = 2;
  if (has_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bettype(), output);
  }

  // optional int64 betMoney = 3;
  if (has_betmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->betmoney(), output);
  }

  // repeated .BINPrivateBet privateBets = 4;
  for (int i = 0; i < this->privatebets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->privatebets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINBetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // required int32 betType = 2;
  if (has_bettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bettype(), target);
  }

  // optional int64 betMoney = 3;
  if (has_betmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->betmoney(), target);
  }

  // repeated .BINPrivateBet privateBets = 4;
  for (int i = 0; i < this->privatebets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->privatebets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINBetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomIndex = 1;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

    // required int32 betType = 2;
    if (has_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bettype());
    }

    // optional int64 betMoney = 3;
    if (has_betmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->betmoney());
    }

  }
  // repeated .BINPrivateBet privateBets = 4;
  total_size += 1 * this->privatebets_size();
  for (int i = 0; i < this->privatebets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->privatebets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINBetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINBetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINBetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINBetRequest::MergeFrom(const BINBetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  privatebets_.MergeFrom(from.privatebets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
    if (from.has_bettype()) {
      set_bettype(from.bettype());
    }
    if (from.has_betmoney()) {
      set_betmoney(from.betmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINBetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINBetRequest::CopyFrom(const BINBetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINBetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < privatebets_size(); i++) {
    if (!this->privatebets(i).IsInitialized()) return false;
  }
  return true;
}

void BINBetRequest::Swap(BINBetRequest* other) {
  if (other != this) {
    std::swap(roomindex_, other->roomindex_);
    std::swap(bettype_, other->bettype_);
    std::swap(betmoney_, other->betmoney_);
    privatebets_.Swap(&other->privatebets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINBetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINBetRequest_descriptor_;
  metadata.reflection = BINBetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINBetResponse::kResponseCodeFieldNumber;
const int BINBetResponse::kMessageFieldNumber;
const int BINBetResponse::kSourceUserIdFieldNumber;
const int BINBetResponse::kBetTypeFieldNumber;
const int BINBetResponse::kBetMoneyFieldNumber;
const int BINBetResponse::kTargetUserIdFieldNumber;
const int BINBetResponse::kArgsFieldNumber;
#endif  // !_MSC_VER

BINBetResponse::BINBetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINBetResponse::InitAsDefaultInstance() {
}

BINBetResponse::BINBetResponse(const BINBetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINBetResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sourceuserid_ = GOOGLE_LONGLONG(0);
  bettype_ = 0;
  betmoney_ = GOOGLE_LONGLONG(0);
  targetuserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINBetResponse::~BINBetResponse() {
  SharedDtor();
}

void BINBetResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINBetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINBetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINBetResponse_descriptor_;
}

const BINBetResponse& BINBetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bet_2eproto();
  return *default_instance_;
}

BINBetResponse* BINBetResponse::default_instance_ = NULL;

BINBetResponse* BINBetResponse::New() const {
  return new BINBetResponse;
}

void BINBetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    sourceuserid_ = GOOGLE_LONGLONG(0);
    bettype_ = 0;
    betmoney_ = GOOGLE_LONGLONG(0);
    targetuserid_ = GOOGLE_LONGLONG(0);
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINBetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sourceUserId;
        break;
      }

      // optional int64 sourceUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sourceuserid_)));
          set_has_sourceuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_betType;
        break;
      }

      // optional int32 betType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bettype_)));
          set_has_bettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_betMoney;
        break;
      }

      // optional int64 betMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &betmoney_)));
          set_has_betmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_targetUserId;
        break;
      }

      // optional int64 targetUserId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetuserid_)));
          set_has_targetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_args;
        break;
      }

      // repeated .BINMapFieldEntry args = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINBetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional int64 sourceUserId = 3;
  if (has_sourceuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sourceuserid(), output);
  }

  // optional int32 betType = 4;
  if (has_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bettype(), output);
  }

  // optional int64 betMoney = 5;
  if (has_betmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->betmoney(), output);
  }

  // optional int64 targetUserId = 6;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->targetuserid(), output);
  }

  // repeated .BINMapFieldEntry args = 7;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINBetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional int64 sourceUserId = 3;
  if (has_sourceuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sourceuserid(), target);
  }

  // optional int32 betType = 4;
  if (has_bettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bettype(), target);
  }

  // optional int64 betMoney = 5;
  if (has_betmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->betmoney(), target);
  }

  // optional int64 targetUserId = 6;
  if (has_targetuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->targetuserid(), target);
  }

  // repeated .BINMapFieldEntry args = 7;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINBetResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int64 sourceUserId = 3;
    if (has_sourceuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sourceuserid());
    }

    // optional int32 betType = 4;
    if (has_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bettype());
    }

    // optional int64 betMoney = 5;
    if (has_betmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->betmoney());
    }

    // optional int64 targetUserId = 6;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetuserid());
    }

  }
  // repeated .BINMapFieldEntry args = 7;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINBetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINBetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINBetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINBetResponse::MergeFrom(const BINBetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_sourceuserid()) {
      set_sourceuserid(from.sourceuserid());
    }
    if (from.has_bettype()) {
      set_bettype(from.bettype());
    }
    if (from.has_betmoney()) {
      set_betmoney(from.betmoney());
    }
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINBetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINBetResponse::CopyFrom(const BINBetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINBetResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINBetResponse::Swap(BINBetResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(sourceuserid_, other->sourceuserid_);
    std::swap(bettype_, other->bettype_);
    std::swap(betmoney_, other->betmoney_);
    std::swap(targetuserid_, other->targetuserid_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINBetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINBetResponse_descriptor_;
  metadata.reflection = BINBetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINExtraBetRequest::kRoomIndexFieldNumber;
const int BINExtraBetRequest::kActionFieldNumber;
#endif  // !_MSC_VER

BINExtraBetRequest::BINExtraBetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINExtraBetRequest::InitAsDefaultInstance() {
}

BINExtraBetRequest::BINExtraBetRequest(const BINExtraBetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINExtraBetRequest::SharedCtor() {
  _cached_size_ = 0;
  roomindex_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINExtraBetRequest::~BINExtraBetRequest() {
  SharedDtor();
}

void BINExtraBetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINExtraBetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINExtraBetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINExtraBetRequest_descriptor_;
}

const BINExtraBetRequest& BINExtraBetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bet_2eproto();
  return *default_instance_;
}

BINExtraBetRequest* BINExtraBetRequest::default_instance_ = NULL;

BINExtraBetRequest* BINExtraBetRequest::New() const {
  return new BINExtraBetRequest;
}

void BINExtraBetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomindex_ = 0;
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINExtraBetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional int32 action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINExtraBetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // optional int32 action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINExtraBetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // optional int32 action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINExtraBetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomIndex = 1;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

    // optional int32 action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINExtraBetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINExtraBetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINExtraBetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINExtraBetRequest::MergeFrom(const BINExtraBetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINExtraBetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINExtraBetRequest::CopyFrom(const BINExtraBetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINExtraBetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINExtraBetRequest::Swap(BINExtraBetRequest* other) {
  if (other != this) {
    std::swap(roomindex_, other->roomindex_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINExtraBetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINExtraBetRequest_descriptor_;
  metadata.reflection = BINExtraBetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINExtraBetResponse::kResponseCodeFieldNumber;
const int BINExtraBetResponse::kMessageFieldNumber;
const int BINExtraBetResponse::kArgsFieldNumber;
#endif  // !_MSC_VER

BINExtraBetResponse::BINExtraBetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINExtraBetResponse::InitAsDefaultInstance() {
}

BINExtraBetResponse::BINExtraBetResponse(const BINExtraBetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINExtraBetResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINExtraBetResponse::~BINExtraBetResponse() {
  SharedDtor();
}

void BINExtraBetResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINExtraBetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINExtraBetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINExtraBetResponse_descriptor_;
}

const BINExtraBetResponse& BINExtraBetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bet_2eproto();
  return *default_instance_;
}

BINExtraBetResponse* BINExtraBetResponse::default_instance_ = NULL;

BINExtraBetResponse* BINExtraBetResponse::New() const {
  return new BINExtraBetResponse;
}

void BINExtraBetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINExtraBetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }

      // repeated .BINMapFieldEntry args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINExtraBetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // repeated .BINMapFieldEntry args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINExtraBetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // repeated .BINMapFieldEntry args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINExtraBetResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  // repeated .BINMapFieldEntry args = 3;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINExtraBetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINExtraBetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINExtraBetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINExtraBetResponse::MergeFrom(const BINExtraBetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINExtraBetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINExtraBetResponse::CopyFrom(const BINExtraBetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINExtraBetResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINExtraBetResponse::Swap(BINExtraBetResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINExtraBetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINExtraBetResponse_descriptor_;
  metadata.reflection = BINExtraBetResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
