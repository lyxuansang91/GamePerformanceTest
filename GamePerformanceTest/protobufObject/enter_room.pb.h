// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enter_room.proto

#ifndef PROTOBUF_enter_5froom_2eproto__INCLUDED
#define PROTOBUF_enter_5froom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "player.pb.h"
#include "filter_room.pb.h"
#include "map_field_entry.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_enter_5froom_2eproto();
void protobuf_AssignDesc_enter_5froom_2eproto();
void protobuf_ShutdownFile_enter_5froom_2eproto();

class BINEnterRoomRequest;
class BINEnterRoomResponse;
class BINEnterRoomGroupRequest;
class BINPlayerEnterRoomResponse;

// ===================================================================

class BINEnterRoomRequest : public ::google::protobuf::Message {
 public:
  BINEnterRoomRequest();
  virtual ~BINEnterRoomRequest();

  BINEnterRoomRequest(const BINEnterRoomRequest& from);

  inline BINEnterRoomRequest& operator=(const BINEnterRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINEnterRoomRequest& default_instance();

  void Swap(BINEnterRoomRequest* other);

  // implements Message ----------------------------------------------

  BINEnterRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINEnterRoomRequest& from);
  void MergeFrom(const BINEnterRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomIndex = 1;
  inline bool has_roomindex() const;
  inline void clear_roomindex();
  static const int kRoomIndexFieldNumber = 1;
  inline ::google::protobuf::int32 roomindex() const;
  inline void set_roomindex(::google::protobuf::int32 value);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:BINEnterRoomRequest)
 private:
  inline void set_has_roomindex();
  inline void clear_has_roomindex();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* password_;
  ::google::protobuf::int32 roomindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_enter_5froom_2eproto();
  friend void protobuf_AssignDesc_enter_5froom_2eproto();
  friend void protobuf_ShutdownFile_enter_5froom_2eproto();

  void InitAsDefaultInstance();
  static BINEnterRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINEnterRoomResponse : public ::google::protobuf::Message {
 public:
  BINEnterRoomResponse();
  virtual ~BINEnterRoomResponse();

  BINEnterRoomResponse(const BINEnterRoomResponse& from);

  inline BINEnterRoomResponse& operator=(const BINEnterRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINEnterRoomResponse& default_instance();

  void Swap(BINEnterRoomResponse* other);

  // implements Message ----------------------------------------------

  BINEnterRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINEnterRoomResponse& from);
  void MergeFrom(const BINEnterRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int32 zoneId = 3;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // optional .BINRoomPlay roomPlay = 4;
  inline bool has_roomplay() const;
  inline void clear_roomplay();
  static const int kRoomPlayFieldNumber = 4;
  inline const ::BINRoomPlay& roomplay() const;
  inline ::BINRoomPlay* mutable_roomplay();
  inline ::BINRoomPlay* release_roomplay();
  inline void set_allocated_roomplay(::BINRoomPlay* roomplay);

  // optional bool roomIsPlaying = 5;
  inline bool has_roomisplaying() const;
  inline void clear_roomisplaying();
  static const int kRoomIsPlayingFieldNumber = 5;
  inline bool roomisplaying() const;
  inline void set_roomisplaying(bool value);

  // repeated .BINPlayer playingPlayers = 6;
  inline int playingplayers_size() const;
  inline void clear_playingplayers();
  static const int kPlayingPlayersFieldNumber = 6;
  inline const ::BINPlayer& playingplayers(int index) const;
  inline ::BINPlayer* mutable_playingplayers(int index);
  inline ::BINPlayer* add_playingplayers();
  inline const ::google::protobuf::RepeatedPtrField< ::BINPlayer >&
      playingplayers() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINPlayer >*
      mutable_playingplayers();

  // repeated .BINPlayer waitingPlayers = 7;
  inline int waitingplayers_size() const;
  inline void clear_waitingplayers();
  static const int kWaitingPlayersFieldNumber = 7;
  inline const ::BINPlayer& waitingplayers(int index) const;
  inline ::BINPlayer* mutable_waitingplayers(int index);
  inline ::BINPlayer* add_waitingplayers();
  inline const ::google::protobuf::RepeatedPtrField< ::BINPlayer >&
      waitingplayers() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINPlayer >*
      mutable_waitingplayers();

  // optional int64 ownerUserId = 8;
  inline bool has_owneruserid() const;
  inline void clear_owneruserid();
  static const int kOwnerUserIdFieldNumber = 8;
  inline ::google::protobuf::int64 owneruserid() const;
  inline void set_owneruserid(::google::protobuf::int64 value);

  // optional int64 currentTurnUserId = 9;
  inline bool has_currentturnuserid() const;
  inline void clear_currentturnuserid();
  static const int kCurrentTurnUserIdFieldNumber = 9;
  inline ::google::protobuf::int64 currentturnuserid() const;
  inline void set_currentturnuserid(::google::protobuf::int64 value);

  // optional int32 enterRoomStatus = 10;
  inline bool has_enterroomstatus() const;
  inline void clear_enterroomstatus();
  static const int kEnterRoomStatusFieldNumber = 10;
  inline ::google::protobuf::int32 enterroomstatus() const;
  inline void set_enterroomstatus(::google::protobuf::int32 value);

  // repeated .BINMapFieldEntry args = 11;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 11;
  inline const ::BINMapFieldEntry& args(int index) const;
  inline ::BINMapFieldEntry* mutable_args(int index);
  inline ::BINMapFieldEntry* add_args();
  inline const ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >&
      args() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >*
      mutable_args();

  // @@protoc_insertion_point(class_scope:BINEnterRoomResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_roomplay();
  inline void clear_has_roomplay();
  inline void set_has_roomisplaying();
  inline void clear_has_roomisplaying();
  inline void set_has_owneruserid();
  inline void clear_has_owneruserid();
  inline void set_has_currentturnuserid();
  inline void clear_has_currentturnuserid();
  inline void set_has_enterroomstatus();
  inline void clear_has_enterroomstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::int32 zoneid_;
  bool responsecode_;
  bool roomisplaying_;
  ::BINRoomPlay* roomplay_;
  ::google::protobuf::RepeatedPtrField< ::BINPlayer > playingplayers_;
  ::google::protobuf::RepeatedPtrField< ::BINPlayer > waitingplayers_;
  ::google::protobuf::int64 owneruserid_;
  ::google::protobuf::int64 currentturnuserid_;
  ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry > args_;
  ::google::protobuf::int32 enterroomstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_enter_5froom_2eproto();
  friend void protobuf_AssignDesc_enter_5froom_2eproto();
  friend void protobuf_ShutdownFile_enter_5froom_2eproto();

  void InitAsDefaultInstance();
  static BINEnterRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class BINEnterRoomGroupRequest : public ::google::protobuf::Message {
 public:
  BINEnterRoomGroupRequest();
  virtual ~BINEnterRoomGroupRequest();

  BINEnterRoomGroupRequest(const BINEnterRoomGroupRequest& from);

  inline BINEnterRoomGroupRequest& operator=(const BINEnterRoomGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINEnterRoomGroupRequest& default_instance();

  void Swap(BINEnterRoomGroupRequest* other);

  // implements Message ----------------------------------------------

  BINEnterRoomGroupRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINEnterRoomGroupRequest& from);
  void MergeFrom(const BINEnterRoomGroupRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomGroupId = 1;
  inline bool has_roomgroupid() const;
  inline void clear_roomgroupid();
  static const int kRoomGroupIdFieldNumber = 1;
  inline ::google::protobuf::int32 roomgroupid() const;
  inline void set_roomgroupid(::google::protobuf::int32 value);

  // optional bool vipRoom = 2;
  inline bool has_viproom() const;
  inline void clear_viproom();
  static const int kVipRoomFieldNumber = 2;
  inline bool viproom() const;
  inline void set_viproom(bool value);

  // @@protoc_insertion_point(class_scope:BINEnterRoomGroupRequest)
 private:
  inline void set_has_roomgroupid();
  inline void clear_has_roomgroupid();
  inline void set_has_viproom();
  inline void clear_has_viproom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomgroupid_;
  bool viproom_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_enter_5froom_2eproto();
  friend void protobuf_AssignDesc_enter_5froom_2eproto();
  friend void protobuf_ShutdownFile_enter_5froom_2eproto();

  void InitAsDefaultInstance();
  static BINEnterRoomGroupRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINPlayerEnterRoomResponse : public ::google::protobuf::Message {
 public:
  BINPlayerEnterRoomResponse();
  virtual ~BINPlayerEnterRoomResponse();

  BINPlayerEnterRoomResponse(const BINPlayerEnterRoomResponse& from);

  inline BINPlayerEnterRoomResponse& operator=(const BINPlayerEnterRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINPlayerEnterRoomResponse& default_instance();

  void Swap(BINPlayerEnterRoomResponse* other);

  // implements Message ----------------------------------------------

  BINPlayerEnterRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINPlayerEnterRoomResponse& from);
  void MergeFrom(const BINPlayerEnterRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional .BINPlayer player = 3;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 3;
  inline const ::BINPlayer& player() const;
  inline ::BINPlayer* mutable_player();
  inline ::BINPlayer* release_player();
  inline void set_allocated_player(::BINPlayer* player);

  // optional int32 enterRoomStatus = 4;
  inline bool has_enterroomstatus() const;
  inline void clear_enterroomstatus();
  static const int kEnterRoomStatusFieldNumber = 4;
  inline ::google::protobuf::int32 enterroomstatus() const;
  inline void set_enterroomstatus(::google::protobuf::int32 value);

  // optional int32 changeOwnerRoomCd = 5;
  inline bool has_changeownerroomcd() const;
  inline void clear_changeownerroomcd();
  static const int kChangeOwnerRoomCdFieldNumber = 5;
  inline ::google::protobuf::int32 changeownerroomcd() const;
  inline void set_changeownerroomcd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BINPlayerEnterRoomResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_enterroomstatus();
  inline void clear_has_enterroomstatus();
  inline void set_has_changeownerroomcd();
  inline void clear_has_changeownerroomcd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;
  ::google::protobuf::int32 enterroomstatus_;
  ::BINPlayer* player_;
  ::google::protobuf::int32 changeownerroomcd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_enter_5froom_2eproto();
  friend void protobuf_AssignDesc_enter_5froom_2eproto();
  friend void protobuf_ShutdownFile_enter_5froom_2eproto();

  void InitAsDefaultInstance();
  static BINPlayerEnterRoomResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINEnterRoomRequest

// required int32 roomIndex = 1;
inline bool BINEnterRoomRequest::has_roomindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINEnterRoomRequest::set_has_roomindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINEnterRoomRequest::clear_has_roomindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINEnterRoomRequest::clear_roomindex() {
  roomindex_ = 0;
  clear_has_roomindex();
}
inline ::google::protobuf::int32 BINEnterRoomRequest::roomindex() const {
  return roomindex_;
}
inline void BINEnterRoomRequest::set_roomindex(::google::protobuf::int32 value) {
  set_has_roomindex();
  roomindex_ = value;
}

// optional string password = 2;
inline bool BINEnterRoomRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINEnterRoomRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINEnterRoomRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINEnterRoomRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& BINEnterRoomRequest::password() const {
  return *password_;
}
inline void BINEnterRoomRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void BINEnterRoomRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void BINEnterRoomRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINEnterRoomRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* BINEnterRoomRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINEnterRoomRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BINEnterRoomResponse

// required bool responseCode = 1;
inline bool BINEnterRoomResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINEnterRoomResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINEnterRoomResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINEnterRoomResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINEnterRoomResponse::responsecode() const {
  return responsecode_;
}
inline void BINEnterRoomResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINEnterRoomResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINEnterRoomResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINEnterRoomResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINEnterRoomResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINEnterRoomResponse::message() const {
  return *message_;
}
inline void BINEnterRoomResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINEnterRoomResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINEnterRoomResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINEnterRoomResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINEnterRoomResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINEnterRoomResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 zoneId = 3;
inline bool BINEnterRoomResponse::has_zoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINEnterRoomResponse::set_has_zoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINEnterRoomResponse::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINEnterRoomResponse::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 BINEnterRoomResponse::zoneid() const {
  return zoneid_;
}
inline void BINEnterRoomResponse::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// optional .BINRoomPlay roomPlay = 4;
inline bool BINEnterRoomResponse::has_roomplay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINEnterRoomResponse::set_has_roomplay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINEnterRoomResponse::clear_has_roomplay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINEnterRoomResponse::clear_roomplay() {
  if (roomplay_ != NULL) roomplay_->::BINRoomPlay::Clear();
  clear_has_roomplay();
}
inline const ::BINRoomPlay& BINEnterRoomResponse::roomplay() const {
  return roomplay_ != NULL ? *roomplay_ : *default_instance_->roomplay_;
}
inline ::BINRoomPlay* BINEnterRoomResponse::mutable_roomplay() {
  set_has_roomplay();
  if (roomplay_ == NULL) roomplay_ = new ::BINRoomPlay;
  return roomplay_;
}
inline ::BINRoomPlay* BINEnterRoomResponse::release_roomplay() {
  clear_has_roomplay();
  ::BINRoomPlay* temp = roomplay_;
  roomplay_ = NULL;
  return temp;
}
inline void BINEnterRoomResponse::set_allocated_roomplay(::BINRoomPlay* roomplay) {
  delete roomplay_;
  roomplay_ = roomplay;
  if (roomplay) {
    set_has_roomplay();
  } else {
    clear_has_roomplay();
  }
}

// optional bool roomIsPlaying = 5;
inline bool BINEnterRoomResponse::has_roomisplaying() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINEnterRoomResponse::set_has_roomisplaying() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINEnterRoomResponse::clear_has_roomisplaying() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINEnterRoomResponse::clear_roomisplaying() {
  roomisplaying_ = false;
  clear_has_roomisplaying();
}
inline bool BINEnterRoomResponse::roomisplaying() const {
  return roomisplaying_;
}
inline void BINEnterRoomResponse::set_roomisplaying(bool value) {
  set_has_roomisplaying();
  roomisplaying_ = value;
}

// repeated .BINPlayer playingPlayers = 6;
inline int BINEnterRoomResponse::playingplayers_size() const {
  return playingplayers_.size();
}
inline void BINEnterRoomResponse::clear_playingplayers() {
  playingplayers_.Clear();
}
inline const ::BINPlayer& BINEnterRoomResponse::playingplayers(int index) const {
  return playingplayers_.Get(index);
}
inline ::BINPlayer* BINEnterRoomResponse::mutable_playingplayers(int index) {
  return playingplayers_.Mutable(index);
}
inline ::BINPlayer* BINEnterRoomResponse::add_playingplayers() {
  return playingplayers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINPlayer >&
BINEnterRoomResponse::playingplayers() const {
  return playingplayers_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINPlayer >*
BINEnterRoomResponse::mutable_playingplayers() {
  return &playingplayers_;
}

// repeated .BINPlayer waitingPlayers = 7;
inline int BINEnterRoomResponse::waitingplayers_size() const {
  return waitingplayers_.size();
}
inline void BINEnterRoomResponse::clear_waitingplayers() {
  waitingplayers_.Clear();
}
inline const ::BINPlayer& BINEnterRoomResponse::waitingplayers(int index) const {
  return waitingplayers_.Get(index);
}
inline ::BINPlayer* BINEnterRoomResponse::mutable_waitingplayers(int index) {
  return waitingplayers_.Mutable(index);
}
inline ::BINPlayer* BINEnterRoomResponse::add_waitingplayers() {
  return waitingplayers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINPlayer >&
BINEnterRoomResponse::waitingplayers() const {
  return waitingplayers_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINPlayer >*
BINEnterRoomResponse::mutable_waitingplayers() {
  return &waitingplayers_;
}

// optional int64 ownerUserId = 8;
inline bool BINEnterRoomResponse::has_owneruserid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BINEnterRoomResponse::set_has_owneruserid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BINEnterRoomResponse::clear_has_owneruserid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BINEnterRoomResponse::clear_owneruserid() {
  owneruserid_ = GOOGLE_LONGLONG(0);
  clear_has_owneruserid();
}
inline ::google::protobuf::int64 BINEnterRoomResponse::owneruserid() const {
  return owneruserid_;
}
inline void BINEnterRoomResponse::set_owneruserid(::google::protobuf::int64 value) {
  set_has_owneruserid();
  owneruserid_ = value;
}

// optional int64 currentTurnUserId = 9;
inline bool BINEnterRoomResponse::has_currentturnuserid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BINEnterRoomResponse::set_has_currentturnuserid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BINEnterRoomResponse::clear_has_currentturnuserid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BINEnterRoomResponse::clear_currentturnuserid() {
  currentturnuserid_ = GOOGLE_LONGLONG(0);
  clear_has_currentturnuserid();
}
inline ::google::protobuf::int64 BINEnterRoomResponse::currentturnuserid() const {
  return currentturnuserid_;
}
inline void BINEnterRoomResponse::set_currentturnuserid(::google::protobuf::int64 value) {
  set_has_currentturnuserid();
  currentturnuserid_ = value;
}

// optional int32 enterRoomStatus = 10;
inline bool BINEnterRoomResponse::has_enterroomstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BINEnterRoomResponse::set_has_enterroomstatus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BINEnterRoomResponse::clear_has_enterroomstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BINEnterRoomResponse::clear_enterroomstatus() {
  enterroomstatus_ = 0;
  clear_has_enterroomstatus();
}
inline ::google::protobuf::int32 BINEnterRoomResponse::enterroomstatus() const {
  return enterroomstatus_;
}
inline void BINEnterRoomResponse::set_enterroomstatus(::google::protobuf::int32 value) {
  set_has_enterroomstatus();
  enterroomstatus_ = value;
}

// repeated .BINMapFieldEntry args = 11;
inline int BINEnterRoomResponse::args_size() const {
  return args_.size();
}
inline void BINEnterRoomResponse::clear_args() {
  args_.Clear();
}
inline const ::BINMapFieldEntry& BINEnterRoomResponse::args(int index) const {
  return args_.Get(index);
}
inline ::BINMapFieldEntry* BINEnterRoomResponse::mutable_args(int index) {
  return args_.Mutable(index);
}
inline ::BINMapFieldEntry* BINEnterRoomResponse::add_args() {
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >&
BINEnterRoomResponse::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >*
BINEnterRoomResponse::mutable_args() {
  return &args_;
}

// -------------------------------------------------------------------

// BINEnterRoomGroupRequest

// required int32 roomGroupId = 1;
inline bool BINEnterRoomGroupRequest::has_roomgroupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINEnterRoomGroupRequest::set_has_roomgroupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINEnterRoomGroupRequest::clear_has_roomgroupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINEnterRoomGroupRequest::clear_roomgroupid() {
  roomgroupid_ = 0;
  clear_has_roomgroupid();
}
inline ::google::protobuf::int32 BINEnterRoomGroupRequest::roomgroupid() const {
  return roomgroupid_;
}
inline void BINEnterRoomGroupRequest::set_roomgroupid(::google::protobuf::int32 value) {
  set_has_roomgroupid();
  roomgroupid_ = value;
}

// optional bool vipRoom = 2;
inline bool BINEnterRoomGroupRequest::has_viproom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINEnterRoomGroupRequest::set_has_viproom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINEnterRoomGroupRequest::clear_has_viproom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINEnterRoomGroupRequest::clear_viproom() {
  viproom_ = false;
  clear_has_viproom();
}
inline bool BINEnterRoomGroupRequest::viproom() const {
  return viproom_;
}
inline void BINEnterRoomGroupRequest::set_viproom(bool value) {
  set_has_viproom();
  viproom_ = value;
}

// -------------------------------------------------------------------

// BINPlayerEnterRoomResponse

// required bool responseCode = 1;
inline bool BINPlayerEnterRoomResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINPlayerEnterRoomResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINPlayerEnterRoomResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINPlayerEnterRoomResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINPlayerEnterRoomResponse::responsecode() const {
  return responsecode_;
}
inline void BINPlayerEnterRoomResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINPlayerEnterRoomResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINPlayerEnterRoomResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINPlayerEnterRoomResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINPlayerEnterRoomResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINPlayerEnterRoomResponse::message() const {
  return *message_;
}
inline void BINPlayerEnterRoomResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINPlayerEnterRoomResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINPlayerEnterRoomResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINPlayerEnterRoomResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINPlayerEnterRoomResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINPlayerEnterRoomResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .BINPlayer player = 3;
inline bool BINPlayerEnterRoomResponse::has_player() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINPlayerEnterRoomResponse::set_has_player() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINPlayerEnterRoomResponse::clear_has_player() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINPlayerEnterRoomResponse::clear_player() {
  if (player_ != NULL) player_->::BINPlayer::Clear();
  clear_has_player();
}
inline const ::BINPlayer& BINPlayerEnterRoomResponse::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::BINPlayer* BINPlayerEnterRoomResponse::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::BINPlayer;
  return player_;
}
inline ::BINPlayer* BINPlayerEnterRoomResponse::release_player() {
  clear_has_player();
  ::BINPlayer* temp = player_;
  player_ = NULL;
  return temp;
}
inline void BINPlayerEnterRoomResponse::set_allocated_player(::BINPlayer* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
}

// optional int32 enterRoomStatus = 4;
inline bool BINPlayerEnterRoomResponse::has_enterroomstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINPlayerEnterRoomResponse::set_has_enterroomstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINPlayerEnterRoomResponse::clear_has_enterroomstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINPlayerEnterRoomResponse::clear_enterroomstatus() {
  enterroomstatus_ = 0;
  clear_has_enterroomstatus();
}
inline ::google::protobuf::int32 BINPlayerEnterRoomResponse::enterroomstatus() const {
  return enterroomstatus_;
}
inline void BINPlayerEnterRoomResponse::set_enterroomstatus(::google::protobuf::int32 value) {
  set_has_enterroomstatus();
  enterroomstatus_ = value;
}

// optional int32 changeOwnerRoomCd = 5;
inline bool BINPlayerEnterRoomResponse::has_changeownerroomcd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINPlayerEnterRoomResponse::set_has_changeownerroomcd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINPlayerEnterRoomResponse::clear_has_changeownerroomcd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINPlayerEnterRoomResponse::clear_changeownerroomcd() {
  changeownerroomcd_ = 0;
  clear_has_changeownerroomcd();
}
inline ::google::protobuf::int32 BINPlayerEnterRoomResponse::changeownerroomcd() const {
  return changeownerroomcd_;
}
inline void BINPlayerEnterRoomResponse::set_changeownerroomcd(::google::protobuf::int32 value) {
  set_has_changeownerroomcd();
  changeownerroomcd_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_enter_5froom_2eproto__INCLUDED
