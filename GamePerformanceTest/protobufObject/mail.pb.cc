// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINFilterMailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINFilterMailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINFilterMailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINFilterMailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINSendMailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINSendMailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINSendMailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINSendMailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINDeleteMailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINDeleteMailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINDeleteMailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINDeleteMailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINReadedMailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINReadedMailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINReadedMailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINReadedMailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINClaimAttachItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINClaimAttachItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINClaimAttachItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINClaimAttachItemResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mail_2eproto() {
  protobuf_AddDesc_mail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mail.proto");
  GOOGLE_CHECK(file != NULL);
  BINMail_descriptor_ = file->message_type(0);
  static const int BINMail_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, senderuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, senderusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, recipientuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, recipientusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, senttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, readed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, attachitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, attachitemquatity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, expiredtime_),
  };
  BINMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINMail_descriptor_,
      BINMail::default_instance_,
      BINMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINMail));
  BINFilterMailRequest_descriptor_ = file->message_type(1);
  static const int BINFilterMailRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterMailRequest, firstresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterMailRequest, maxresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterMailRequest, lastrequesttime_),
  };
  BINFilterMailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINFilterMailRequest_descriptor_,
      BINFilterMailRequest::default_instance_,
      BINFilterMailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterMailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterMailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINFilterMailRequest));
  BINFilterMailResponse_descriptor_ = file->message_type(2);
  static const int BINFilterMailResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterMailResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterMailResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterMailResponse, mails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterMailResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterMailResponse, lastrequesttime_),
  };
  BINFilterMailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINFilterMailResponse_descriptor_,
      BINFilterMailResponse::default_instance_,
      BINFilterMailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterMailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterMailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINFilterMailResponse));
  BINSendMailRequest_descriptor_ = file->message_type(3);
  static const int BINSendMailRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINSendMailRequest, recipientusernames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINSendMailRequest, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINSendMailRequest, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINSendMailRequest, parentid_),
  };
  BINSendMailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINSendMailRequest_descriptor_,
      BINSendMailRequest::default_instance_,
      BINSendMailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINSendMailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINSendMailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINSendMailRequest));
  BINSendMailResponse_descriptor_ = file->message_type(4);
  static const int BINSendMailResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINSendMailResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINSendMailResponse, message_),
  };
  BINSendMailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINSendMailResponse_descriptor_,
      BINSendMailResponse::default_instance_,
      BINSendMailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINSendMailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINSendMailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINSendMailResponse));
  BINDeleteMailRequest_descriptor_ = file->message_type(5);
  static const int BINDeleteMailRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINDeleteMailRequest, selectedmailids_),
  };
  BINDeleteMailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINDeleteMailRequest_descriptor_,
      BINDeleteMailRequest::default_instance_,
      BINDeleteMailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINDeleteMailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINDeleteMailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINDeleteMailRequest));
  BINDeleteMailResponse_descriptor_ = file->message_type(6);
  static const int BINDeleteMailResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINDeleteMailResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINDeleteMailResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINDeleteMailResponse, deletedmailids_),
  };
  BINDeleteMailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINDeleteMailResponse_descriptor_,
      BINDeleteMailResponse::default_instance_,
      BINDeleteMailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINDeleteMailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINDeleteMailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINDeleteMailResponse));
  BINReadedMailRequest_descriptor_ = file->message_type(7);
  static const int BINReadedMailRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadedMailRequest, readedmailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadedMailRequest, getcontent_),
  };
  BINReadedMailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINReadedMailRequest_descriptor_,
      BINReadedMailRequest::default_instance_,
      BINReadedMailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadedMailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadedMailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINReadedMailRequest));
  BINReadedMailResponse_descriptor_ = file->message_type(8);
  static const int BINReadedMailResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadedMailResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadedMailResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadedMailResponse, mail_),
  };
  BINReadedMailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINReadedMailResponse_descriptor_,
      BINReadedMailResponse::default_instance_,
      BINReadedMailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadedMailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINReadedMailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINReadedMailResponse));
  BINClaimAttachItemRequest_descriptor_ = file->message_type(9);
  static const int BINClaimAttachItemRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINClaimAttachItemRequest, mailid_),
  };
  BINClaimAttachItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINClaimAttachItemRequest_descriptor_,
      BINClaimAttachItemRequest::default_instance_,
      BINClaimAttachItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINClaimAttachItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINClaimAttachItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINClaimAttachItemRequest));
  BINClaimAttachItemResponse_descriptor_ = file->message_type(10);
  static const int BINClaimAttachItemResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINClaimAttachItemResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINClaimAttachItemResponse, message_),
  };
  BINClaimAttachItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINClaimAttachItemResponse_descriptor_,
      BINClaimAttachItemResponse::default_instance_,
      BINClaimAttachItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINClaimAttachItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINClaimAttachItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINClaimAttachItemResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINMail_descriptor_, &BINMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINFilterMailRequest_descriptor_, &BINFilterMailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINFilterMailResponse_descriptor_, &BINFilterMailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINSendMailRequest_descriptor_, &BINSendMailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINSendMailResponse_descriptor_, &BINSendMailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINDeleteMailRequest_descriptor_, &BINDeleteMailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINDeleteMailResponse_descriptor_, &BINDeleteMailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINReadedMailRequest_descriptor_, &BINReadedMailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINReadedMailResponse_descriptor_, &BINReadedMailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINClaimAttachItemRequest_descriptor_, &BINClaimAttachItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINClaimAttachItemResponse_descriptor_, &BINClaimAttachItemResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mail_2eproto() {
  delete BINMail::default_instance_;
  delete BINMail_reflection_;
  delete BINFilterMailRequest::default_instance_;
  delete BINFilterMailRequest_reflection_;
  delete BINFilterMailResponse::default_instance_;
  delete BINFilterMailResponse_reflection_;
  delete BINSendMailRequest::default_instance_;
  delete BINSendMailRequest_reflection_;
  delete BINSendMailResponse::default_instance_;
  delete BINSendMailResponse_reflection_;
  delete BINDeleteMailRequest::default_instance_;
  delete BINDeleteMailRequest_reflection_;
  delete BINDeleteMailResponse::default_instance_;
  delete BINDeleteMailResponse_reflection_;
  delete BINReadedMailRequest::default_instance_;
  delete BINReadedMailRequest_reflection_;
  delete BINReadedMailResponse::default_instance_;
  delete BINReadedMailResponse_reflection_;
  delete BINClaimAttachItemRequest::default_instance_;
  delete BINClaimAttachItemRequest_reflection_;
  delete BINClaimAttachItemResponse::default_instance_;
  delete BINClaimAttachItemResponse_reflection_;
}

void protobuf_AddDesc_mail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmail.proto\"\200\002\n\007BINMail\022\016\n\006mailId\030\001 \002(\003"
    "\022\024\n\014senderUserId\030\002 \001(\003\022\026\n\016senderUserName"
    "\030\003 \001(\t\022\027\n\017recipientUserId\030\004 \001(\003\022\031\n\021recip"
    "ientUserName\030\005 \001(\t\022\r\n\005title\030\006 \001(\t\022\014\n\004bod"
    "y\030\007 \001(\t\022\020\n\010sentTime\030\010 \001(\003\022\016\n\006readed\030\t \001("
    "\010\022\024\n\014attachItemId\030\n \001(\005\022\031\n\021attachItemQua"
    "tity\030\013 \001(\003\022\023\n\013expiredTime\030\014 \001(\003\"W\n\024BINFi"
    "lterMailRequest\022\023\n\013firstResult\030\001 \002(\005\022\021\n\t"
    "maxResult\030\002 \002(\005\022\027\n\017lastRequestTime\030\003 \001(\003"
    "\"\177\n\025BINFilterMailResponse\022\024\n\014responseCod"
    "e\030\001 \002(\010\022\017\n\007message\030\002 \001(\t\022\027\n\005mails\030\003 \003(\0132"
    "\010.BINMail\022\r\n\005count\030\004 \001(\005\022\027\n\017lastRequestT"
    "ime\030\005 \001(\003\"_\n\022BINSendMailRequest\022\032\n\022recip"
    "ientUserNames\030\001 \003(\t\022\r\n\005title\030\002 \001(\t\022\014\n\004bo"
    "dy\030\003 \001(\t\022\020\n\010parentId\030\004 \001(\003\"<\n\023BINSendMai"
    "lResponse\022\024\n\014responseCode\030\001 \002(\010\022\017\n\007messa"
    "ge\030\002 \001(\t\"/\n\024BINDeleteMailRequest\022\027\n\017sele"
    "ctedMailIds\030\001 \003(\003\"V\n\025BINDeleteMailRespon"
    "se\022\024\n\014responseCode\030\001 \002(\010\022\017\n\007message\030\002 \001("
    "\t\022\026\n\016deletedMailIds\030\003 \003(\003\"@\n\024BINReadedMa"
    "ilRequest\022\024\n\014readedMailId\030\001 \002(\003\022\022\n\ngetCo"
    "ntent\030\002 \001(\010\"V\n\025BINReadedMailResponse\022\024\n\014"
    "responseCode\030\001 \002(\010\022\017\n\007message\030\002 \001(\t\022\026\n\004m"
    "ail\030\003 \001(\0132\010.BINMail\"+\n\031BINClaimAttachIte"
    "mRequest\022\016\n\006mailId\030\001 \002(\003\"C\n\032BINClaimAtta"
    "chItemResponse\022\024\n\014responseCode\030\001 \002(\010\022\017\n\007"
    "message\030\002 \001(\tB\036\n\034com.mi.game.network.dat"
    "a.bin", 1085);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mail.proto", &protobuf_RegisterTypes);
  BINMail::default_instance_ = new BINMail();
  BINFilterMailRequest::default_instance_ = new BINFilterMailRequest();
  BINFilterMailResponse::default_instance_ = new BINFilterMailResponse();
  BINSendMailRequest::default_instance_ = new BINSendMailRequest();
  BINSendMailResponse::default_instance_ = new BINSendMailResponse();
  BINDeleteMailRequest::default_instance_ = new BINDeleteMailRequest();
  BINDeleteMailResponse::default_instance_ = new BINDeleteMailResponse();
  BINReadedMailRequest::default_instance_ = new BINReadedMailRequest();
  BINReadedMailResponse::default_instance_ = new BINReadedMailResponse();
  BINClaimAttachItemRequest::default_instance_ = new BINClaimAttachItemRequest();
  BINClaimAttachItemResponse::default_instance_ = new BINClaimAttachItemResponse();
  BINMail::default_instance_->InitAsDefaultInstance();
  BINFilterMailRequest::default_instance_->InitAsDefaultInstance();
  BINFilterMailResponse::default_instance_->InitAsDefaultInstance();
  BINSendMailRequest::default_instance_->InitAsDefaultInstance();
  BINSendMailResponse::default_instance_->InitAsDefaultInstance();
  BINDeleteMailRequest::default_instance_->InitAsDefaultInstance();
  BINDeleteMailResponse::default_instance_->InitAsDefaultInstance();
  BINReadedMailRequest::default_instance_->InitAsDefaultInstance();
  BINReadedMailResponse::default_instance_->InitAsDefaultInstance();
  BINClaimAttachItemRequest::default_instance_->InitAsDefaultInstance();
  BINClaimAttachItemResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mail_2eproto {
  StaticDescriptorInitializer_mail_2eproto() {
    protobuf_AddDesc_mail_2eproto();
  }
} static_descriptor_initializer_mail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINMail::kMailIdFieldNumber;
const int BINMail::kSenderUserIdFieldNumber;
const int BINMail::kSenderUserNameFieldNumber;
const int BINMail::kRecipientUserIdFieldNumber;
const int BINMail::kRecipientUserNameFieldNumber;
const int BINMail::kTitleFieldNumber;
const int BINMail::kBodyFieldNumber;
const int BINMail::kSentTimeFieldNumber;
const int BINMail::kReadedFieldNumber;
const int BINMail::kAttachItemIdFieldNumber;
const int BINMail::kAttachItemQuatityFieldNumber;
const int BINMail::kExpiredTimeFieldNumber;
#endif  // !_MSC_VER

BINMail::BINMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINMail::InitAsDefaultInstance() {
}

BINMail::BINMail(const BINMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINMail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_LONGLONG(0);
  senderuserid_ = GOOGLE_LONGLONG(0);
  senderusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recipientuserid_ = GOOGLE_LONGLONG(0);
  recipientusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senttime_ = GOOGLE_LONGLONG(0);
  readed_ = false;
  attachitemid_ = 0;
  attachitemquatity_ = GOOGLE_LONGLONG(0);
  expiredtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINMail::~BINMail() {
  SharedDtor();
}

void BINMail::SharedDtor() {
  if (senderusername_ != &::google::protobuf::internal::kEmptyString) {
    delete senderusername_;
  }
  if (recipientusername_ != &::google::protobuf::internal::kEmptyString) {
    delete recipientusername_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void BINMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINMail_descriptor_;
}

const BINMail& BINMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

BINMail* BINMail::default_instance_ = NULL;

BINMail* BINMail::New() const {
  return new BINMail;
}

void BINMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_LONGLONG(0);
    senderuserid_ = GOOGLE_LONGLONG(0);
    if (has_senderusername()) {
      if (senderusername_ != &::google::protobuf::internal::kEmptyString) {
        senderusername_->clear();
      }
    }
    recipientuserid_ = GOOGLE_LONGLONG(0);
    if (has_recipientusername()) {
      if (recipientusername_ != &::google::protobuf::internal::kEmptyString) {
        recipientusername_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    senttime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    readed_ = false;
    attachitemid_ = 0;
    attachitemquatity_ = GOOGLE_LONGLONG(0);
    expiredtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_senderUserId;
        break;
      }

      // optional int64 senderUserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &senderuserid_)));
          set_has_senderuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_senderUserName;
        break;
      }

      // optional string senderUserName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->senderusername().data(), this->senderusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recipientUserId;
        break;
      }

      // optional int64 recipientUserId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recipientUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recipientuserid_)));
          set_has_recipientuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_recipientUserName;
        break;
      }

      // optional string recipientUserName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recipientUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recipientusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recipientusername().data(), this->recipientusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_title;
        break;
      }

      // optional string title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_body;
        break;
      }

      // optional string body = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sentTime;
        break;
      }

      // optional int64 sentTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sentTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &senttime_)));
          set_has_senttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_readed;
        break;
      }

      // optional bool readed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &readed_)));
          set_has_readed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_attachItemId;
        break;
      }

      // optional int32 attachItemId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attachItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachitemid_)));
          set_has_attachitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_attachItemQuatity;
        break;
      }

      // optional int64 attachItemQuatity = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attachItemQuatity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attachitemquatity_)));
          set_has_attachitemquatity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_expiredTime;
        break;
      }

      // optional int64 expiredTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiredTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiredtime_)));
          set_has_expiredtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mailid(), output);
  }

  // optional int64 senderUserId = 2;
  if (has_senderuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->senderuserid(), output);
  }

  // optional string senderUserName = 3;
  if (has_senderusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senderusername().data(), this->senderusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->senderusername(), output);
  }

  // optional int64 recipientUserId = 4;
  if (has_recipientuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->recipientuserid(), output);
  }

  // optional string recipientUserName = 5;
  if (has_recipientusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recipientusername().data(), this->recipientusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->recipientusername(), output);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->title(), output);
  }

  // optional string body = 7;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->body(), output);
  }

  // optional int64 sentTime = 8;
  if (has_senttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->senttime(), output);
  }

  // optional bool readed = 9;
  if (has_readed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->readed(), output);
  }

  // optional int32 attachItemId = 10;
  if (has_attachitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->attachitemid(), output);
  }

  // optional int64 attachItemQuatity = 11;
  if (has_attachitemquatity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->attachitemquatity(), output);
  }

  // optional int64 expiredTime = 12;
  if (has_expiredtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->expiredtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mailid(), target);
  }

  // optional int64 senderUserId = 2;
  if (has_senderuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->senderuserid(), target);
  }

  // optional string senderUserName = 3;
  if (has_senderusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senderusername().data(), this->senderusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->senderusername(), target);
  }

  // optional int64 recipientUserId = 4;
  if (has_recipientuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->recipientuserid(), target);
  }

  // optional string recipientUserName = 5;
  if (has_recipientusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recipientusername().data(), this->recipientusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->recipientusername(), target);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->title(), target);
  }

  // optional string body = 7;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->body(), target);
  }

  // optional int64 sentTime = 8;
  if (has_senttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->senttime(), target);
  }

  // optional bool readed = 9;
  if (has_readed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->readed(), target);
  }

  // optional int32 attachItemId = 10;
  if (has_attachitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->attachitemid(), target);
  }

  // optional int64 attachItemQuatity = 11;
  if (has_attachitemquatity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->attachitemquatity(), target);
  }

  // optional int64 expiredTime = 12;
  if (has_expiredtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->expiredtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }

    // optional int64 senderUserId = 2;
    if (has_senderuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->senderuserid());
    }

    // optional string senderUserName = 3;
    if (has_senderusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->senderusername());
    }

    // optional int64 recipientUserId = 4;
    if (has_recipientuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recipientuserid());
    }

    // optional string recipientUserName = 5;
    if (has_recipientusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recipientusername());
    }

    // optional string title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string body = 7;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional int64 sentTime = 8;
    if (has_senttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->senttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool readed = 9;
    if (has_readed()) {
      total_size += 1 + 1;
    }

    // optional int32 attachItemId = 10;
    if (has_attachitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachitemid());
    }

    // optional int64 attachItemQuatity = 11;
    if (has_attachitemquatity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attachitemquatity());
    }

    // optional int64 expiredTime = 12;
    if (has_expiredtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiredtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINMail::MergeFrom(const BINMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_senderuserid()) {
      set_senderuserid(from.senderuserid());
    }
    if (from.has_senderusername()) {
      set_senderusername(from.senderusername());
    }
    if (from.has_recipientuserid()) {
      set_recipientuserid(from.recipientuserid());
    }
    if (from.has_recipientusername()) {
      set_recipientusername(from.recipientusername());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_senttime()) {
      set_senttime(from.senttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_readed()) {
      set_readed(from.readed());
    }
    if (from.has_attachitemid()) {
      set_attachitemid(from.attachitemid());
    }
    if (from.has_attachitemquatity()) {
      set_attachitemquatity(from.attachitemquatity());
    }
    if (from.has_expiredtime()) {
      set_expiredtime(from.expiredtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINMail::CopyFrom(const BINMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINMail::Swap(BINMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(senderuserid_, other->senderuserid_);
    std::swap(senderusername_, other->senderusername_);
    std::swap(recipientuserid_, other->recipientuserid_);
    std::swap(recipientusername_, other->recipientusername_);
    std::swap(title_, other->title_);
    std::swap(body_, other->body_);
    std::swap(senttime_, other->senttime_);
    std::swap(readed_, other->readed_);
    std::swap(attachitemid_, other->attachitemid_);
    std::swap(attachitemquatity_, other->attachitemquatity_);
    std::swap(expiredtime_, other->expiredtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINMail_descriptor_;
  metadata.reflection = BINMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINFilterMailRequest::kFirstResultFieldNumber;
const int BINFilterMailRequest::kMaxResultFieldNumber;
const int BINFilterMailRequest::kLastRequestTimeFieldNumber;
#endif  // !_MSC_VER

BINFilterMailRequest::BINFilterMailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINFilterMailRequest::InitAsDefaultInstance() {
}

BINFilterMailRequest::BINFilterMailRequest(const BINFilterMailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINFilterMailRequest::SharedCtor() {
  _cached_size_ = 0;
  firstresult_ = 0;
  maxresult_ = 0;
  lastrequesttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINFilterMailRequest::~BINFilterMailRequest() {
  SharedDtor();
}

void BINFilterMailRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINFilterMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINFilterMailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINFilterMailRequest_descriptor_;
}

const BINFilterMailRequest& BINFilterMailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

BINFilterMailRequest* BINFilterMailRequest::default_instance_ = NULL;

BINFilterMailRequest* BINFilterMailRequest::New() const {
  return new BINFilterMailRequest;
}

void BINFilterMailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    firstresult_ = 0;
    maxresult_ = 0;
    lastrequesttime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINFilterMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 firstResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstresult_)));
          set_has_firstresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxResult;
        break;
      }

      // required int32 maxResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxresult_)));
          set_has_maxresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastRequestTime;
        break;
      }

      // optional int64 lastRequestTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastRequestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastrequesttime_)));
          set_has_lastrequesttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINFilterMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 firstResult = 1;
  if (has_firstresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->firstresult(), output);
  }

  // required int32 maxResult = 2;
  if (has_maxresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxresult(), output);
  }

  // optional int64 lastRequestTime = 3;
  if (has_lastrequesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lastrequesttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINFilterMailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 firstResult = 1;
  if (has_firstresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->firstresult(), target);
  }

  // required int32 maxResult = 2;
  if (has_maxresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxresult(), target);
  }

  // optional int64 lastRequestTime = 3;
  if (has_lastrequesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lastrequesttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINFilterMailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 firstResult = 1;
    if (has_firstresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstresult());
    }

    // required int32 maxResult = 2;
    if (has_maxresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxresult());
    }

    // optional int64 lastRequestTime = 3;
    if (has_lastrequesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastrequesttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINFilterMailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINFilterMailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINFilterMailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINFilterMailRequest::MergeFrom(const BINFilterMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstresult()) {
      set_firstresult(from.firstresult());
    }
    if (from.has_maxresult()) {
      set_maxresult(from.maxresult());
    }
    if (from.has_lastrequesttime()) {
      set_lastrequesttime(from.lastrequesttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINFilterMailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINFilterMailRequest::CopyFrom(const BINFilterMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINFilterMailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BINFilterMailRequest::Swap(BINFilterMailRequest* other) {
  if (other != this) {
    std::swap(firstresult_, other->firstresult_);
    std::swap(maxresult_, other->maxresult_);
    std::swap(lastrequesttime_, other->lastrequesttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINFilterMailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINFilterMailRequest_descriptor_;
  metadata.reflection = BINFilterMailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINFilterMailResponse::kResponseCodeFieldNumber;
const int BINFilterMailResponse::kMessageFieldNumber;
const int BINFilterMailResponse::kMailsFieldNumber;
const int BINFilterMailResponse::kCountFieldNumber;
const int BINFilterMailResponse::kLastRequestTimeFieldNumber;
#endif  // !_MSC_VER

BINFilterMailResponse::BINFilterMailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINFilterMailResponse::InitAsDefaultInstance() {
}

BINFilterMailResponse::BINFilterMailResponse(const BINFilterMailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINFilterMailResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  lastrequesttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINFilterMailResponse::~BINFilterMailResponse() {
  SharedDtor();
}

void BINFilterMailResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINFilterMailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINFilterMailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINFilterMailResponse_descriptor_;
}

const BINFilterMailResponse& BINFilterMailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

BINFilterMailResponse* BINFilterMailResponse::default_instance_ = NULL;

BINFilterMailResponse* BINFilterMailResponse::New() const {
  return new BINFilterMailResponse;
}

void BINFilterMailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    count_ = 0;
    lastrequesttime_ = GOOGLE_LONGLONG(0);
  }
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINFilterMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mails;
        break;
      }

      // repeated .BINMail mails = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mails;
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastRequestTime;
        break;
      }

      // optional int64 lastRequestTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastRequestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastrequesttime_)));
          set_has_lastrequesttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINFilterMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // repeated .BINMail mails = 3;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mails(i), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // optional int64 lastRequestTime = 5;
  if (has_lastrequesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lastrequesttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINFilterMailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // repeated .BINMail mails = 3;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mails(i), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // optional int64 lastRequestTime = 5;
  if (has_lastrequesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lastrequesttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINFilterMailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int64 lastRequestTime = 5;
    if (has_lastrequesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastrequesttime());
    }

  }
  // repeated .BINMail mails = 3;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINFilterMailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINFilterMailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINFilterMailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINFilterMailResponse::MergeFrom(const BINFilterMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_lastrequesttime()) {
      set_lastrequesttime(from.lastrequesttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINFilterMailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINFilterMailResponse::CopyFrom(const BINFilterMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINFilterMailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mails_size(); i++) {
    if (!this->mails(i).IsInitialized()) return false;
  }
  return true;
}

void BINFilterMailResponse::Swap(BINFilterMailResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    mails_.Swap(&other->mails_);
    std::swap(count_, other->count_);
    std::swap(lastrequesttime_, other->lastrequesttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINFilterMailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINFilterMailResponse_descriptor_;
  metadata.reflection = BINFilterMailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINSendMailRequest::kRecipientUserNamesFieldNumber;
const int BINSendMailRequest::kTitleFieldNumber;
const int BINSendMailRequest::kBodyFieldNumber;
const int BINSendMailRequest::kParentIdFieldNumber;
#endif  // !_MSC_VER

BINSendMailRequest::BINSendMailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINSendMailRequest::InitAsDefaultInstance() {
}

BINSendMailRequest::BINSendMailRequest(const BINSendMailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINSendMailRequest::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parentid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINSendMailRequest::~BINSendMailRequest() {
  SharedDtor();
}

void BINSendMailRequest::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void BINSendMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINSendMailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINSendMailRequest_descriptor_;
}

const BINSendMailRequest& BINSendMailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

BINSendMailRequest* BINSendMailRequest::default_instance_ = NULL;

BINSendMailRequest* BINSendMailRequest::New() const {
  return new BINSendMailRequest;
}

void BINSendMailRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    parentid_ = GOOGLE_LONGLONG(0);
  }
  recipientusernames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINSendMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string recipientUserNames = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recipientUserNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recipientusernames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recipientusernames(this->recipientusernames_size() - 1).data(),
            this->recipientusernames(this->recipientusernames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recipientUserNames;
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // optional string body = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_parentId;
        break;
      }

      // optional int64 parentId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parentid_)));
          set_has_parentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINSendMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string recipientUserNames = 1;
  for (int i = 0; i < this->recipientusernames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recipientusernames(i).data(), this->recipientusernames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->recipientusernames(i), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // optional string body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->body(), output);
  }

  // optional int64 parentId = 4;
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->parentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINSendMailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string recipientUserNames = 1;
  for (int i = 0; i < this->recipientusernames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recipientusernames(i).data(), this->recipientusernames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->recipientusernames(i), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->body(), target);
  }

  // optional int64 parentId = 4;
  if (has_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->parentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINSendMailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional int64 parentId = 4;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parentid());
    }

  }
  // repeated string recipientUserNames = 1;
  total_size += 1 * this->recipientusernames_size();
  for (int i = 0; i < this->recipientusernames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recipientusernames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINSendMailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINSendMailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINSendMailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINSendMailRequest::MergeFrom(const BINSendMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  recipientusernames_.MergeFrom(from.recipientusernames_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_parentid()) {
      set_parentid(from.parentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINSendMailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINSendMailRequest::CopyFrom(const BINSendMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINSendMailRequest::IsInitialized() const {

  return true;
}

void BINSendMailRequest::Swap(BINSendMailRequest* other) {
  if (other != this) {
    recipientusernames_.Swap(&other->recipientusernames_);
    std::swap(title_, other->title_);
    std::swap(body_, other->body_);
    std::swap(parentid_, other->parentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINSendMailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINSendMailRequest_descriptor_;
  metadata.reflection = BINSendMailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINSendMailResponse::kResponseCodeFieldNumber;
const int BINSendMailResponse::kMessageFieldNumber;
#endif  // !_MSC_VER

BINSendMailResponse::BINSendMailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINSendMailResponse::InitAsDefaultInstance() {
}

BINSendMailResponse::BINSendMailResponse(const BINSendMailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINSendMailResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINSendMailResponse::~BINSendMailResponse() {
  SharedDtor();
}

void BINSendMailResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINSendMailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINSendMailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINSendMailResponse_descriptor_;
}

const BINSendMailResponse& BINSendMailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

BINSendMailResponse* BINSendMailResponse::default_instance_ = NULL;

BINSendMailResponse* BINSendMailResponse::New() const {
  return new BINSendMailResponse;
}

void BINSendMailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINSendMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINSendMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINSendMailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINSendMailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINSendMailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINSendMailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINSendMailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINSendMailResponse::MergeFrom(const BINSendMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINSendMailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINSendMailResponse::CopyFrom(const BINSendMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINSendMailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINSendMailResponse::Swap(BINSendMailResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINSendMailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINSendMailResponse_descriptor_;
  metadata.reflection = BINSendMailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINDeleteMailRequest::kSelectedMailIdsFieldNumber;
#endif  // !_MSC_VER

BINDeleteMailRequest::BINDeleteMailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINDeleteMailRequest::InitAsDefaultInstance() {
}

BINDeleteMailRequest::BINDeleteMailRequest(const BINDeleteMailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINDeleteMailRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINDeleteMailRequest::~BINDeleteMailRequest() {
  SharedDtor();
}

void BINDeleteMailRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINDeleteMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINDeleteMailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINDeleteMailRequest_descriptor_;
}

const BINDeleteMailRequest& BINDeleteMailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

BINDeleteMailRequest* BINDeleteMailRequest::default_instance_ = NULL;

BINDeleteMailRequest* BINDeleteMailRequest::New() const {
  return new BINDeleteMailRequest;
}

void BINDeleteMailRequest::Clear() {
  selectedmailids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINDeleteMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 selectedMailIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selectedMailIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_selectedmailids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_selectedmailids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_selectedMailIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINDeleteMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 selectedMailIds = 1;
  for (int i = 0; i < this->selectedmailids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->selectedmailids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINDeleteMailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 selectedMailIds = 1;
  for (int i = 0; i < this->selectedmailids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->selectedmailids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINDeleteMailRequest::ByteSize() const {
  int total_size = 0;

  // repeated int64 selectedMailIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->selectedmailids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->selectedmailids(i));
    }
    total_size += 1 * this->selectedmailids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINDeleteMailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINDeleteMailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINDeleteMailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINDeleteMailRequest::MergeFrom(const BINDeleteMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  selectedmailids_.MergeFrom(from.selectedmailids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINDeleteMailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINDeleteMailRequest::CopyFrom(const BINDeleteMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINDeleteMailRequest::IsInitialized() const {

  return true;
}

void BINDeleteMailRequest::Swap(BINDeleteMailRequest* other) {
  if (other != this) {
    selectedmailids_.Swap(&other->selectedmailids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINDeleteMailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINDeleteMailRequest_descriptor_;
  metadata.reflection = BINDeleteMailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINDeleteMailResponse::kResponseCodeFieldNumber;
const int BINDeleteMailResponse::kMessageFieldNumber;
const int BINDeleteMailResponse::kDeletedMailIdsFieldNumber;
#endif  // !_MSC_VER

BINDeleteMailResponse::BINDeleteMailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINDeleteMailResponse::InitAsDefaultInstance() {
}

BINDeleteMailResponse::BINDeleteMailResponse(const BINDeleteMailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINDeleteMailResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINDeleteMailResponse::~BINDeleteMailResponse() {
  SharedDtor();
}

void BINDeleteMailResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINDeleteMailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINDeleteMailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINDeleteMailResponse_descriptor_;
}

const BINDeleteMailResponse& BINDeleteMailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

BINDeleteMailResponse* BINDeleteMailResponse::default_instance_ = NULL;

BINDeleteMailResponse* BINDeleteMailResponse::New() const {
  return new BINDeleteMailResponse;
}

void BINDeleteMailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  deletedmailids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINDeleteMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deletedMailIds;
        break;
      }

      // repeated int64 deletedMailIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deletedMailIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_deletedmailids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_deletedmailids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deletedMailIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINDeleteMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // repeated int64 deletedMailIds = 3;
  for (int i = 0; i < this->deletedmailids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->deletedmailids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINDeleteMailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // repeated int64 deletedMailIds = 3;
  for (int i = 0; i < this->deletedmailids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->deletedmailids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINDeleteMailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  // repeated int64 deletedMailIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->deletedmailids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->deletedmailids(i));
    }
    total_size += 1 * this->deletedmailids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINDeleteMailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINDeleteMailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINDeleteMailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINDeleteMailResponse::MergeFrom(const BINDeleteMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  deletedmailids_.MergeFrom(from.deletedmailids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINDeleteMailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINDeleteMailResponse::CopyFrom(const BINDeleteMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINDeleteMailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINDeleteMailResponse::Swap(BINDeleteMailResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    deletedmailids_.Swap(&other->deletedmailids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINDeleteMailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINDeleteMailResponse_descriptor_;
  metadata.reflection = BINDeleteMailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINReadedMailRequest::kReadedMailIdFieldNumber;
const int BINReadedMailRequest::kGetContentFieldNumber;
#endif  // !_MSC_VER

BINReadedMailRequest::BINReadedMailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINReadedMailRequest::InitAsDefaultInstance() {
}

BINReadedMailRequest::BINReadedMailRequest(const BINReadedMailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINReadedMailRequest::SharedCtor() {
  _cached_size_ = 0;
  readedmailid_ = GOOGLE_LONGLONG(0);
  getcontent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINReadedMailRequest::~BINReadedMailRequest() {
  SharedDtor();
}

void BINReadedMailRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINReadedMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINReadedMailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINReadedMailRequest_descriptor_;
}

const BINReadedMailRequest& BINReadedMailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

BINReadedMailRequest* BINReadedMailRequest::default_instance_ = NULL;

BINReadedMailRequest* BINReadedMailRequest::New() const {
  return new BINReadedMailRequest;
}

void BINReadedMailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    readedmailid_ = GOOGLE_LONGLONG(0);
    getcontent_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINReadedMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 readedMailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &readedmailid_)));
          set_has_readedmailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getContent;
        break;
      }

      // optional bool getContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getContent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getcontent_)));
          set_has_getcontent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINReadedMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 readedMailId = 1;
  if (has_readedmailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->readedmailid(), output);
  }

  // optional bool getContent = 2;
  if (has_getcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->getcontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINReadedMailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 readedMailId = 1;
  if (has_readedmailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->readedmailid(), target);
  }

  // optional bool getContent = 2;
  if (has_getcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->getcontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINReadedMailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 readedMailId = 1;
    if (has_readedmailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->readedmailid());
    }

    // optional bool getContent = 2;
    if (has_getcontent()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINReadedMailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINReadedMailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINReadedMailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINReadedMailRequest::MergeFrom(const BINReadedMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_readedmailid()) {
      set_readedmailid(from.readedmailid());
    }
    if (from.has_getcontent()) {
      set_getcontent(from.getcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINReadedMailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINReadedMailRequest::CopyFrom(const BINReadedMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINReadedMailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINReadedMailRequest::Swap(BINReadedMailRequest* other) {
  if (other != this) {
    std::swap(readedmailid_, other->readedmailid_);
    std::swap(getcontent_, other->getcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINReadedMailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINReadedMailRequest_descriptor_;
  metadata.reflection = BINReadedMailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINReadedMailResponse::kResponseCodeFieldNumber;
const int BINReadedMailResponse::kMessageFieldNumber;
const int BINReadedMailResponse::kMailFieldNumber;
#endif  // !_MSC_VER

BINReadedMailResponse::BINReadedMailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINReadedMailResponse::InitAsDefaultInstance() {
  mail_ = const_cast< ::BINMail*>(&::BINMail::default_instance());
}

BINReadedMailResponse::BINReadedMailResponse(const BINReadedMailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINReadedMailResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINReadedMailResponse::~BINReadedMailResponse() {
  SharedDtor();
}

void BINReadedMailResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
    delete mail_;
  }
}

void BINReadedMailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINReadedMailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINReadedMailResponse_descriptor_;
}

const BINReadedMailResponse& BINReadedMailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

BINReadedMailResponse* BINReadedMailResponse::default_instance_ = NULL;

BINReadedMailResponse* BINReadedMailResponse::New() const {
  return new BINReadedMailResponse;
}

void BINReadedMailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_mail()) {
      if (mail_ != NULL) mail_->::BINMail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINReadedMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mail;
        break;
      }

      // optional .BINMail mail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINReadedMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional .BINMail mail = 3;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINReadedMailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional .BINMail mail = 3;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINReadedMailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .BINMail mail = 3;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINReadedMailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINReadedMailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINReadedMailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINReadedMailResponse::MergeFrom(const BINReadedMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_mail()) {
      mutable_mail()->::BINMail::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINReadedMailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINReadedMailResponse::CopyFrom(const BINReadedMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINReadedMailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void BINReadedMailResponse::Swap(BINReadedMailResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINReadedMailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINReadedMailResponse_descriptor_;
  metadata.reflection = BINReadedMailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINClaimAttachItemRequest::kMailIdFieldNumber;
#endif  // !_MSC_VER

BINClaimAttachItemRequest::BINClaimAttachItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINClaimAttachItemRequest::InitAsDefaultInstance() {
}

BINClaimAttachItemRequest::BINClaimAttachItemRequest(const BINClaimAttachItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINClaimAttachItemRequest::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINClaimAttachItemRequest::~BINClaimAttachItemRequest() {
  SharedDtor();
}

void BINClaimAttachItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINClaimAttachItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINClaimAttachItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINClaimAttachItemRequest_descriptor_;
}

const BINClaimAttachItemRequest& BINClaimAttachItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

BINClaimAttachItemRequest* BINClaimAttachItemRequest::default_instance_ = NULL;

BINClaimAttachItemRequest* BINClaimAttachItemRequest::New() const {
  return new BINClaimAttachItemRequest;
}

void BINClaimAttachItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINClaimAttachItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINClaimAttachItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINClaimAttachItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINClaimAttachItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINClaimAttachItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINClaimAttachItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINClaimAttachItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINClaimAttachItemRequest::MergeFrom(const BINClaimAttachItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINClaimAttachItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINClaimAttachItemRequest::CopyFrom(const BINClaimAttachItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINClaimAttachItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINClaimAttachItemRequest::Swap(BINClaimAttachItemRequest* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINClaimAttachItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINClaimAttachItemRequest_descriptor_;
  metadata.reflection = BINClaimAttachItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINClaimAttachItemResponse::kResponseCodeFieldNumber;
const int BINClaimAttachItemResponse::kMessageFieldNumber;
#endif  // !_MSC_VER

BINClaimAttachItemResponse::BINClaimAttachItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINClaimAttachItemResponse::InitAsDefaultInstance() {
}

BINClaimAttachItemResponse::BINClaimAttachItemResponse(const BINClaimAttachItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINClaimAttachItemResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINClaimAttachItemResponse::~BINClaimAttachItemResponse() {
  SharedDtor();
}

void BINClaimAttachItemResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINClaimAttachItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINClaimAttachItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINClaimAttachItemResponse_descriptor_;
}

const BINClaimAttachItemResponse& BINClaimAttachItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

BINClaimAttachItemResponse* BINClaimAttachItemResponse::default_instance_ = NULL;

BINClaimAttachItemResponse* BINClaimAttachItemResponse::New() const {
  return new BINClaimAttachItemResponse;
}

void BINClaimAttachItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINClaimAttachItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINClaimAttachItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINClaimAttachItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINClaimAttachItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINClaimAttachItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINClaimAttachItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINClaimAttachItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINClaimAttachItemResponse::MergeFrom(const BINClaimAttachItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINClaimAttachItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINClaimAttachItemResponse::CopyFrom(const BINClaimAttachItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINClaimAttachItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINClaimAttachItemResponse::Swap(BINClaimAttachItemResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINClaimAttachItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINClaimAttachItemResponse_descriptor_;
  metadata.reflection = BINClaimAttachItemResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
