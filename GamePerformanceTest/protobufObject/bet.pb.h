// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bet.proto

#ifndef PROTOBUF_bet_2eproto__INCLUDED
#define PROTOBUF_bet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "map_field_entry.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bet_2eproto();
void protobuf_AssignDesc_bet_2eproto();
void protobuf_ShutdownFile_bet_2eproto();

class BINPrivateBet;
class BINBetRequest;
class BINBetResponse;
class BINExtraBetRequest;
class BINExtraBetResponse;

// ===================================================================

class BINPrivateBet : public ::google::protobuf::Message {
 public:
  BINPrivateBet();
  virtual ~BINPrivateBet();

  BINPrivateBet(const BINPrivateBet& from);

  inline BINPrivateBet& operator=(const BINPrivateBet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINPrivateBet& default_instance();

  void Swap(BINPrivateBet* other);

  // implements Message ----------------------------------------------

  BINPrivateBet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINPrivateBet& from);
  void MergeFrom(const BINPrivateBet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 targetUserId = 1;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int64 value);

  // required int64 betMoney = 2;
  inline bool has_betmoney() const;
  inline void clear_betmoney();
  static const int kBetMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 betmoney() const;
  inline void set_betmoney(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BINPrivateBet)
 private:
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();
  inline void set_has_betmoney();
  inline void clear_has_betmoney();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 targetuserid_;
  ::google::protobuf::int64 betmoney_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bet_2eproto();
  friend void protobuf_AssignDesc_bet_2eproto();
  friend void protobuf_ShutdownFile_bet_2eproto();

  void InitAsDefaultInstance();
  static BINPrivateBet* default_instance_;
};
// -------------------------------------------------------------------

class BINBetRequest : public ::google::protobuf::Message {
 public:
  BINBetRequest();
  virtual ~BINBetRequest();

  BINBetRequest(const BINBetRequest& from);

  inline BINBetRequest& operator=(const BINBetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINBetRequest& default_instance();

  void Swap(BINBetRequest* other);

  // implements Message ----------------------------------------------

  BINBetRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINBetRequest& from);
  void MergeFrom(const BINBetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomIndex = 1;
  inline bool has_roomindex() const;
  inline void clear_roomindex();
  static const int kRoomIndexFieldNumber = 1;
  inline ::google::protobuf::int32 roomindex() const;
  inline void set_roomindex(::google::protobuf::int32 value);

  // required int32 betType = 2;
  inline bool has_bettype() const;
  inline void clear_bettype();
  static const int kBetTypeFieldNumber = 2;
  inline ::google::protobuf::int32 bettype() const;
  inline void set_bettype(::google::protobuf::int32 value);

  // optional int64 betMoney = 3;
  inline bool has_betmoney() const;
  inline void clear_betmoney();
  static const int kBetMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 betmoney() const;
  inline void set_betmoney(::google::protobuf::int64 value);

  // repeated .BINPrivateBet privateBets = 4;
  inline int privatebets_size() const;
  inline void clear_privatebets();
  static const int kPrivateBetsFieldNumber = 4;
  inline const ::BINPrivateBet& privatebets(int index) const;
  inline ::BINPrivateBet* mutable_privatebets(int index);
  inline ::BINPrivateBet* add_privatebets();
  inline const ::google::protobuf::RepeatedPtrField< ::BINPrivateBet >&
      privatebets() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINPrivateBet >*
      mutable_privatebets();

  // @@protoc_insertion_point(class_scope:BINBetRequest)
 private:
  inline void set_has_roomindex();
  inline void clear_has_roomindex();
  inline void set_has_bettype();
  inline void clear_has_bettype();
  inline void set_has_betmoney();
  inline void clear_has_betmoney();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomindex_;
  ::google::protobuf::int32 bettype_;
  ::google::protobuf::int64 betmoney_;
  ::google::protobuf::RepeatedPtrField< ::BINPrivateBet > privatebets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_bet_2eproto();
  friend void protobuf_AssignDesc_bet_2eproto();
  friend void protobuf_ShutdownFile_bet_2eproto();

  void InitAsDefaultInstance();
  static BINBetRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINBetResponse : public ::google::protobuf::Message {
 public:
  BINBetResponse();
  virtual ~BINBetResponse();

  BINBetResponse(const BINBetResponse& from);

  inline BINBetResponse& operator=(const BINBetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINBetResponse& default_instance();

  void Swap(BINBetResponse* other);

  // implements Message ----------------------------------------------

  BINBetResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINBetResponse& from);
  void MergeFrom(const BINBetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int64 sourceUserId = 3;
  inline bool has_sourceuserid() const;
  inline void clear_sourceuserid();
  static const int kSourceUserIdFieldNumber = 3;
  inline ::google::protobuf::int64 sourceuserid() const;
  inline void set_sourceuserid(::google::protobuf::int64 value);

  // optional int32 betType = 4;
  inline bool has_bettype() const;
  inline void clear_bettype();
  static const int kBetTypeFieldNumber = 4;
  inline ::google::protobuf::int32 bettype() const;
  inline void set_bettype(::google::protobuf::int32 value);

  // optional int64 betMoney = 5;
  inline bool has_betmoney() const;
  inline void clear_betmoney();
  static const int kBetMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 betmoney() const;
  inline void set_betmoney(::google::protobuf::int64 value);

  // optional int64 targetUserId = 6;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 6;
  inline ::google::protobuf::int64 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int64 value);

  // repeated .BINMapFieldEntry args = 7;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 7;
  inline const ::BINMapFieldEntry& args(int index) const;
  inline ::BINMapFieldEntry* mutable_args(int index);
  inline ::BINMapFieldEntry* add_args();
  inline const ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >&
      args() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >*
      mutable_args();

  // @@protoc_insertion_point(class_scope:BINBetResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_sourceuserid();
  inline void clear_has_sourceuserid();
  inline void set_has_bettype();
  inline void clear_has_bettype();
  inline void set_has_betmoney();
  inline void clear_has_betmoney();
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;
  ::google::protobuf::int32 bettype_;
  ::google::protobuf::int64 sourceuserid_;
  ::google::protobuf::int64 betmoney_;
  ::google::protobuf::int64 targetuserid_;
  ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry > args_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_bet_2eproto();
  friend void protobuf_AssignDesc_bet_2eproto();
  friend void protobuf_ShutdownFile_bet_2eproto();

  void InitAsDefaultInstance();
  static BINBetResponse* default_instance_;
};
// -------------------------------------------------------------------

class BINExtraBetRequest : public ::google::protobuf::Message {
 public:
  BINExtraBetRequest();
  virtual ~BINExtraBetRequest();

  BINExtraBetRequest(const BINExtraBetRequest& from);

  inline BINExtraBetRequest& operator=(const BINExtraBetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINExtraBetRequest& default_instance();

  void Swap(BINExtraBetRequest* other);

  // implements Message ----------------------------------------------

  BINExtraBetRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINExtraBetRequest& from);
  void MergeFrom(const BINExtraBetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomIndex = 1;
  inline bool has_roomindex() const;
  inline void clear_roomindex();
  static const int kRoomIndexFieldNumber = 1;
  inline ::google::protobuf::int32 roomindex() const;
  inline void set_roomindex(::google::protobuf::int32 value);

  // optional int32 action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BINExtraBetRequest)
 private:
  inline void set_has_roomindex();
  inline void clear_has_roomindex();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomindex_;
  ::google::protobuf::int32 action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_bet_2eproto();
  friend void protobuf_AssignDesc_bet_2eproto();
  friend void protobuf_ShutdownFile_bet_2eproto();

  void InitAsDefaultInstance();
  static BINExtraBetRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINExtraBetResponse : public ::google::protobuf::Message {
 public:
  BINExtraBetResponse();
  virtual ~BINExtraBetResponse();

  BINExtraBetResponse(const BINExtraBetResponse& from);

  inline BINExtraBetResponse& operator=(const BINExtraBetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINExtraBetResponse& default_instance();

  void Swap(BINExtraBetResponse* other);

  // implements Message ----------------------------------------------

  BINExtraBetResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINExtraBetResponse& from);
  void MergeFrom(const BINExtraBetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // repeated .BINMapFieldEntry args = 3;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 3;
  inline const ::BINMapFieldEntry& args(int index) const;
  inline ::BINMapFieldEntry* mutable_args(int index);
  inline ::BINMapFieldEntry* add_args();
  inline const ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >&
      args() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >*
      mutable_args();

  // @@protoc_insertion_point(class_scope:BINExtraBetResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry > args_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_bet_2eproto();
  friend void protobuf_AssignDesc_bet_2eproto();
  friend void protobuf_ShutdownFile_bet_2eproto();

  void InitAsDefaultInstance();
  static BINExtraBetResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINPrivateBet

// required int64 targetUserId = 1;
inline bool BINPrivateBet::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINPrivateBet::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINPrivateBet::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINPrivateBet::clear_targetuserid() {
  targetuserid_ = GOOGLE_LONGLONG(0);
  clear_has_targetuserid();
}
inline ::google::protobuf::int64 BINPrivateBet::targetuserid() const {
  return targetuserid_;
}
inline void BINPrivateBet::set_targetuserid(::google::protobuf::int64 value) {
  set_has_targetuserid();
  targetuserid_ = value;
}

// required int64 betMoney = 2;
inline bool BINPrivateBet::has_betmoney() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINPrivateBet::set_has_betmoney() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINPrivateBet::clear_has_betmoney() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINPrivateBet::clear_betmoney() {
  betmoney_ = GOOGLE_LONGLONG(0);
  clear_has_betmoney();
}
inline ::google::protobuf::int64 BINPrivateBet::betmoney() const {
  return betmoney_;
}
inline void BINPrivateBet::set_betmoney(::google::protobuf::int64 value) {
  set_has_betmoney();
  betmoney_ = value;
}

// -------------------------------------------------------------------

// BINBetRequest

// required int32 roomIndex = 1;
inline bool BINBetRequest::has_roomindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINBetRequest::set_has_roomindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINBetRequest::clear_has_roomindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINBetRequest::clear_roomindex() {
  roomindex_ = 0;
  clear_has_roomindex();
}
inline ::google::protobuf::int32 BINBetRequest::roomindex() const {
  return roomindex_;
}
inline void BINBetRequest::set_roomindex(::google::protobuf::int32 value) {
  set_has_roomindex();
  roomindex_ = value;
}

// required int32 betType = 2;
inline bool BINBetRequest::has_bettype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINBetRequest::set_has_bettype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINBetRequest::clear_has_bettype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINBetRequest::clear_bettype() {
  bettype_ = 0;
  clear_has_bettype();
}
inline ::google::protobuf::int32 BINBetRequest::bettype() const {
  return bettype_;
}
inline void BINBetRequest::set_bettype(::google::protobuf::int32 value) {
  set_has_bettype();
  bettype_ = value;
}

// optional int64 betMoney = 3;
inline bool BINBetRequest::has_betmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINBetRequest::set_has_betmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINBetRequest::clear_has_betmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINBetRequest::clear_betmoney() {
  betmoney_ = GOOGLE_LONGLONG(0);
  clear_has_betmoney();
}
inline ::google::protobuf::int64 BINBetRequest::betmoney() const {
  return betmoney_;
}
inline void BINBetRequest::set_betmoney(::google::protobuf::int64 value) {
  set_has_betmoney();
  betmoney_ = value;
}

// repeated .BINPrivateBet privateBets = 4;
inline int BINBetRequest::privatebets_size() const {
  return privatebets_.size();
}
inline void BINBetRequest::clear_privatebets() {
  privatebets_.Clear();
}
inline const ::BINPrivateBet& BINBetRequest::privatebets(int index) const {
  return privatebets_.Get(index);
}
inline ::BINPrivateBet* BINBetRequest::mutable_privatebets(int index) {
  return privatebets_.Mutable(index);
}
inline ::BINPrivateBet* BINBetRequest::add_privatebets() {
  return privatebets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINPrivateBet >&
BINBetRequest::privatebets() const {
  return privatebets_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINPrivateBet >*
BINBetRequest::mutable_privatebets() {
  return &privatebets_;
}

// -------------------------------------------------------------------

// BINBetResponse

// required bool responseCode = 1;
inline bool BINBetResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINBetResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINBetResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINBetResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINBetResponse::responsecode() const {
  return responsecode_;
}
inline void BINBetResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINBetResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINBetResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINBetResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINBetResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINBetResponse::message() const {
  return *message_;
}
inline void BINBetResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINBetResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINBetResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINBetResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINBetResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINBetResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 sourceUserId = 3;
inline bool BINBetResponse::has_sourceuserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINBetResponse::set_has_sourceuserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINBetResponse::clear_has_sourceuserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINBetResponse::clear_sourceuserid() {
  sourceuserid_ = GOOGLE_LONGLONG(0);
  clear_has_sourceuserid();
}
inline ::google::protobuf::int64 BINBetResponse::sourceuserid() const {
  return sourceuserid_;
}
inline void BINBetResponse::set_sourceuserid(::google::protobuf::int64 value) {
  set_has_sourceuserid();
  sourceuserid_ = value;
}

// optional int32 betType = 4;
inline bool BINBetResponse::has_bettype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINBetResponse::set_has_bettype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINBetResponse::clear_has_bettype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINBetResponse::clear_bettype() {
  bettype_ = 0;
  clear_has_bettype();
}
inline ::google::protobuf::int32 BINBetResponse::bettype() const {
  return bettype_;
}
inline void BINBetResponse::set_bettype(::google::protobuf::int32 value) {
  set_has_bettype();
  bettype_ = value;
}

// optional int64 betMoney = 5;
inline bool BINBetResponse::has_betmoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINBetResponse::set_has_betmoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINBetResponse::clear_has_betmoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINBetResponse::clear_betmoney() {
  betmoney_ = GOOGLE_LONGLONG(0);
  clear_has_betmoney();
}
inline ::google::protobuf::int64 BINBetResponse::betmoney() const {
  return betmoney_;
}
inline void BINBetResponse::set_betmoney(::google::protobuf::int64 value) {
  set_has_betmoney();
  betmoney_ = value;
}

// optional int64 targetUserId = 6;
inline bool BINBetResponse::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINBetResponse::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINBetResponse::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINBetResponse::clear_targetuserid() {
  targetuserid_ = GOOGLE_LONGLONG(0);
  clear_has_targetuserid();
}
inline ::google::protobuf::int64 BINBetResponse::targetuserid() const {
  return targetuserid_;
}
inline void BINBetResponse::set_targetuserid(::google::protobuf::int64 value) {
  set_has_targetuserid();
  targetuserid_ = value;
}

// repeated .BINMapFieldEntry args = 7;
inline int BINBetResponse::args_size() const {
  return args_.size();
}
inline void BINBetResponse::clear_args() {
  args_.Clear();
}
inline const ::BINMapFieldEntry& BINBetResponse::args(int index) const {
  return args_.Get(index);
}
inline ::BINMapFieldEntry* BINBetResponse::mutable_args(int index) {
  return args_.Mutable(index);
}
inline ::BINMapFieldEntry* BINBetResponse::add_args() {
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >&
BINBetResponse::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >*
BINBetResponse::mutable_args() {
  return &args_;
}

// -------------------------------------------------------------------

// BINExtraBetRequest

// required int32 roomIndex = 1;
inline bool BINExtraBetRequest::has_roomindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINExtraBetRequest::set_has_roomindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINExtraBetRequest::clear_has_roomindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINExtraBetRequest::clear_roomindex() {
  roomindex_ = 0;
  clear_has_roomindex();
}
inline ::google::protobuf::int32 BINExtraBetRequest::roomindex() const {
  return roomindex_;
}
inline void BINExtraBetRequest::set_roomindex(::google::protobuf::int32 value) {
  set_has_roomindex();
  roomindex_ = value;
}

// optional int32 action = 2;
inline bool BINExtraBetRequest::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINExtraBetRequest::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINExtraBetRequest::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINExtraBetRequest::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 BINExtraBetRequest::action() const {
  return action_;
}
inline void BINExtraBetRequest::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// -------------------------------------------------------------------

// BINExtraBetResponse

// required bool responseCode = 1;
inline bool BINExtraBetResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINExtraBetResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINExtraBetResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINExtraBetResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINExtraBetResponse::responsecode() const {
  return responsecode_;
}
inline void BINExtraBetResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINExtraBetResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINExtraBetResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINExtraBetResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINExtraBetResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINExtraBetResponse::message() const {
  return *message_;
}
inline void BINExtraBetResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINExtraBetResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINExtraBetResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINExtraBetResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINExtraBetResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINExtraBetResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .BINMapFieldEntry args = 3;
inline int BINExtraBetResponse::args_size() const {
  return args_.size();
}
inline void BINExtraBetResponse::clear_args() {
  args_.Clear();
}
inline const ::BINMapFieldEntry& BINExtraBetResponse::args(int index) const {
  return args_.Get(index);
}
inline ::BINMapFieldEntry* BINExtraBetResponse::mutable_args(int index) {
  return args_.Mutable(index);
}
inline ::BINMapFieldEntry* BINExtraBetResponse::add_args() {
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >&
BINExtraBetResponse::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >*
BINExtraBetResponse::mutable_args() {
  return &args_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bet_2eproto__INCLUDED
