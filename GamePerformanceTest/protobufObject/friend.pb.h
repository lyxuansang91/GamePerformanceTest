// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#ifndef PROTOBUF_friend_2eproto__INCLUDED
#define PROTOBUF_friend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "user_info.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_friend_2eproto();
void protobuf_AssignDesc_friend_2eproto();
void protobuf_ShutdownFile_friend_2eproto();

class BINFilterFriendRequest;
class BINFilterFriendResponse;
class BINAddFriendRequest;
class BINAddFriendResponse;
class BINAddFriend;
class BINFilterAddFriendRequest;
class BINFilterAddFriendResponse;
class BINApproveAddFriendRequest;
class BINApproveAddFriendResponse;
class BINFindUserRequest;
class BINFindUserResponse;
class BINViewUserInfoRequest;
class BINViewUserInfoResponse;
class BINRemoveFriendRequest;
class BINRemoveFriendResponse;

// ===================================================================

class BINFilterFriendRequest : public ::google::protobuf::Message {
 public:
  BINFilterFriendRequest();
  virtual ~BINFilterFriendRequest();

  BINFilterFriendRequest(const BINFilterFriendRequest& from);

  inline BINFilterFriendRequest& operator=(const BINFilterFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINFilterFriendRequest& default_instance();

  void Swap(BINFilterFriendRequest* other);

  // implements Message ----------------------------------------------

  BINFilterFriendRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINFilterFriendRequest& from);
  void MergeFrom(const BINFilterFriendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 firstResult = 1;
  inline bool has_firstresult() const;
  inline void clear_firstresult();
  static const int kFirstResultFieldNumber = 1;
  inline ::google::protobuf::int32 firstresult() const;
  inline void set_firstresult(::google::protobuf::int32 value);

  // required int32 maxResult = 2;
  inline bool has_maxresult() const;
  inline void clear_maxresult();
  static const int kMaxResultFieldNumber = 2;
  inline ::google::protobuf::int32 maxresult() const;
  inline void set_maxresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BINFilterFriendRequest)
 private:
  inline void set_has_firstresult();
  inline void clear_has_firstresult();
  inline void set_has_maxresult();
  inline void clear_has_maxresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 firstresult_;
  ::google::protobuf::int32 maxresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINFilterFriendRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINFilterFriendResponse : public ::google::protobuf::Message {
 public:
  BINFilterFriendResponse();
  virtual ~BINFilterFriendResponse();

  BINFilterFriendResponse(const BINFilterFriendResponse& from);

  inline BINFilterFriendResponse& operator=(const BINFilterFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINFilterFriendResponse& default_instance();

  void Swap(BINFilterFriendResponse* other);

  // implements Message ----------------------------------------------

  BINFilterFriendResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINFilterFriendResponse& from);
  void MergeFrom(const BINFilterFriendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // repeated .BINUserInfo currentFriends = 3;
  inline int currentfriends_size() const;
  inline void clear_currentfriends();
  static const int kCurrentFriendsFieldNumber = 3;
  inline const ::BINUserInfo& currentfriends(int index) const;
  inline ::BINUserInfo* mutable_currentfriends(int index);
  inline ::BINUserInfo* add_currentfriends();
  inline const ::google::protobuf::RepeatedPtrField< ::BINUserInfo >&
      currentfriends() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINUserInfo >*
      mutable_currentfriends();

  // @@protoc_insertion_point(class_scope:BINFilterFriendResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::RepeatedPtrField< ::BINUserInfo > currentfriends_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINFilterFriendResponse* default_instance_;
};
// -------------------------------------------------------------------

class BINAddFriendRequest : public ::google::protobuf::Message {
 public:
  BINAddFriendRequest();
  virtual ~BINAddFriendRequest();

  BINAddFriendRequest(const BINAddFriendRequest& from);

  inline BINAddFriendRequest& operator=(const BINAddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINAddFriendRequest& default_instance();

  void Swap(BINAddFriendRequest* other);

  // implements Message ----------------------------------------------

  BINAddFriendRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINAddFriendRequest& from);
  void MergeFrom(const BINAddFriendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 targetUserId = 1;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BINAddFriendRequest)
 private:
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 targetuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINAddFriendRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINAddFriendResponse : public ::google::protobuf::Message {
 public:
  BINAddFriendResponse();
  virtual ~BINAddFriendResponse();

  BINAddFriendResponse(const BINAddFriendResponse& from);

  inline BINAddFriendResponse& operator=(const BINAddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINAddFriendResponse& default_instance();

  void Swap(BINAddFriendResponse* other);

  // implements Message ----------------------------------------------

  BINAddFriendResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINAddFriendResponse& from);
  void MergeFrom(const BINAddFriendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int32 friendStatus = 3;
  inline bool has_friendstatus() const;
  inline void clear_friendstatus();
  static const int kFriendStatusFieldNumber = 3;
  inline ::google::protobuf::int32 friendstatus() const;
  inline void set_friendstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BINAddFriendResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_friendstatus();
  inline void clear_has_friendstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;
  ::google::protobuf::int32 friendstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINAddFriendResponse* default_instance_;
};
// -------------------------------------------------------------------

class BINAddFriend : public ::google::protobuf::Message {
 public:
  BINAddFriend();
  virtual ~BINAddFriend();

  BINAddFriend(const BINAddFriend& from);

  inline BINAddFriend& operator=(const BINAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINAddFriend& default_instance();

  void Swap(BINAddFriend* other);

  // implements Message ----------------------------------------------

  BINAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINAddFriend& from);
  void MergeFrom(const BINAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 requestId = 1;
  inline bool has_requestid() const;
  inline void clear_requestid();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::int32 requestid() const;
  inline void set_requestid(::google::protobuf::int32 value);

  // required .BINUserInfo senderUser = 2;
  inline bool has_senderuser() const;
  inline void clear_senderuser();
  static const int kSenderUserFieldNumber = 2;
  inline const ::BINUserInfo& senderuser() const;
  inline ::BINUserInfo* mutable_senderuser();
  inline ::BINUserInfo* release_senderuser();
  inline void set_allocated_senderuser(::BINUserInfo* senderuser);

  // @@protoc_insertion_point(class_scope:BINAddFriend)
 private:
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_senderuser();
  inline void clear_has_senderuser();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::BINUserInfo* senderuser_;
  ::google::protobuf::int32 requestid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class BINFilterAddFriendRequest : public ::google::protobuf::Message {
 public:
  BINFilterAddFriendRequest();
  virtual ~BINFilterAddFriendRequest();

  BINFilterAddFriendRequest(const BINFilterAddFriendRequest& from);

  inline BINFilterAddFriendRequest& operator=(const BINFilterAddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINFilterAddFriendRequest& default_instance();

  void Swap(BINFilterAddFriendRequest* other);

  // implements Message ----------------------------------------------

  BINFilterAddFriendRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINFilterAddFriendRequest& from);
  void MergeFrom(const BINFilterAddFriendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 firstResult = 1;
  inline bool has_firstresult() const;
  inline void clear_firstresult();
  static const int kFirstResultFieldNumber = 1;
  inline ::google::protobuf::int32 firstresult() const;
  inline void set_firstresult(::google::protobuf::int32 value);

  // required int32 maxResult = 2;
  inline bool has_maxresult() const;
  inline void clear_maxresult();
  static const int kMaxResultFieldNumber = 2;
  inline ::google::protobuf::int32 maxresult() const;
  inline void set_maxresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BINFilterAddFriendRequest)
 private:
  inline void set_has_firstresult();
  inline void clear_has_firstresult();
  inline void set_has_maxresult();
  inline void clear_has_maxresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 firstresult_;
  ::google::protobuf::int32 maxresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINFilterAddFriendRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINFilterAddFriendResponse : public ::google::protobuf::Message {
 public:
  BINFilterAddFriendResponse();
  virtual ~BINFilterAddFriendResponse();

  BINFilterAddFriendResponse(const BINFilterAddFriendResponse& from);

  inline BINFilterAddFriendResponse& operator=(const BINFilterAddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINFilterAddFriendResponse& default_instance();

  void Swap(BINFilterAddFriendResponse* other);

  // implements Message ----------------------------------------------

  BINFilterAddFriendResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINFilterAddFriendResponse& from);
  void MergeFrom(const BINFilterAddFriendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // repeated .BINAddFriend requestFriends = 3;
  inline int requestfriends_size() const;
  inline void clear_requestfriends();
  static const int kRequestFriendsFieldNumber = 3;
  inline const ::BINAddFriend& requestfriends(int index) const;
  inline ::BINAddFriend* mutable_requestfriends(int index);
  inline ::BINAddFriend* add_requestfriends();
  inline const ::google::protobuf::RepeatedPtrField< ::BINAddFriend >&
      requestfriends() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINAddFriend >*
      mutable_requestfriends();

  // @@protoc_insertion_point(class_scope:BINFilterAddFriendResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::RepeatedPtrField< ::BINAddFriend > requestfriends_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINFilterAddFriendResponse* default_instance_;
};
// -------------------------------------------------------------------

class BINApproveAddFriendRequest : public ::google::protobuf::Message {
 public:
  BINApproveAddFriendRequest();
  virtual ~BINApproveAddFriendRequest();

  BINApproveAddFriendRequest(const BINApproveAddFriendRequest& from);

  inline BINApproveAddFriendRequest& operator=(const BINApproveAddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINApproveAddFriendRequest& default_instance();

  void Swap(BINApproveAddFriendRequest* other);

  // implements Message ----------------------------------------------

  BINApproveAddFriendRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINApproveAddFriendRequest& from);
  void MergeFrom(const BINApproveAddFriendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 senderUserId = 1;
  inline bool has_senderuserid() const;
  inline void clear_senderuserid();
  static const int kSenderUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 senderuserid() const;
  inline void set_senderuserid(::google::protobuf::int64 value);

  // required bool accepted = 2;
  inline bool has_accepted() const;
  inline void clear_accepted();
  static const int kAcceptedFieldNumber = 2;
  inline bool accepted() const;
  inline void set_accepted(bool value);

  // @@protoc_insertion_point(class_scope:BINApproveAddFriendRequest)
 private:
  inline void set_has_senderuserid();
  inline void clear_has_senderuserid();
  inline void set_has_accepted();
  inline void clear_has_accepted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 senderuserid_;
  bool accepted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINApproveAddFriendRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINApproveAddFriendResponse : public ::google::protobuf::Message {
 public:
  BINApproveAddFriendResponse();
  virtual ~BINApproveAddFriendResponse();

  BINApproveAddFriendResponse(const BINApproveAddFriendResponse& from);

  inline BINApproveAddFriendResponse& operator=(const BINApproveAddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINApproveAddFriendResponse& default_instance();

  void Swap(BINApproveAddFriendResponse* other);

  // implements Message ----------------------------------------------

  BINApproveAddFriendResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINApproveAddFriendResponse& from);
  void MergeFrom(const BINApproveAddFriendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int32 friendStatus = 3;
  inline bool has_friendstatus() const;
  inline void clear_friendstatus();
  static const int kFriendStatusFieldNumber = 3;
  inline ::google::protobuf::int32 friendstatus() const;
  inline void set_friendstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BINApproveAddFriendResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_friendstatus();
  inline void clear_has_friendstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;
  ::google::protobuf::int32 friendstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINApproveAddFriendResponse* default_instance_;
};
// -------------------------------------------------------------------

class BINFindUserRequest : public ::google::protobuf::Message {
 public:
  BINFindUserRequest();
  virtual ~BINFindUserRequest();

  BINFindUserRequest(const BINFindUserRequest& from);

  inline BINFindUserRequest& operator=(const BINFindUserRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINFindUserRequest& default_instance();

  void Swap(BINFindUserRequest* other);

  // implements Message ----------------------------------------------

  BINFindUserRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINFindUserRequest& from);
  void MergeFrom(const BINFindUserRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userNameQuery = 1;
  inline bool has_usernamequery() const;
  inline void clear_usernamequery();
  static const int kUserNameQueryFieldNumber = 1;
  inline const ::std::string& usernamequery() const;
  inline void set_usernamequery(const ::std::string& value);
  inline void set_usernamequery(const char* value);
  inline void set_usernamequery(const char* value, size_t size);
  inline ::std::string* mutable_usernamequery();
  inline ::std::string* release_usernamequery();
  inline void set_allocated_usernamequery(::std::string* usernamequery);

  // required int32 firstResult = 2;
  inline bool has_firstresult() const;
  inline void clear_firstresult();
  static const int kFirstResultFieldNumber = 2;
  inline ::google::protobuf::int32 firstresult() const;
  inline void set_firstresult(::google::protobuf::int32 value);

  // required int32 maxResult = 3;
  inline bool has_maxresult() const;
  inline void clear_maxresult();
  static const int kMaxResultFieldNumber = 3;
  inline ::google::protobuf::int32 maxresult() const;
  inline void set_maxresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BINFindUserRequest)
 private:
  inline void set_has_usernamequery();
  inline void clear_has_usernamequery();
  inline void set_has_firstresult();
  inline void clear_has_firstresult();
  inline void set_has_maxresult();
  inline void clear_has_maxresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* usernamequery_;
  ::google::protobuf::int32 firstresult_;
  ::google::protobuf::int32 maxresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINFindUserRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINFindUserResponse : public ::google::protobuf::Message {
 public:
  BINFindUserResponse();
  virtual ~BINFindUserResponse();

  BINFindUserResponse(const BINFindUserResponse& from);

  inline BINFindUserResponse& operator=(const BINFindUserResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINFindUserResponse& default_instance();

  void Swap(BINFindUserResponse* other);

  // implements Message ----------------------------------------------

  BINFindUserResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINFindUserResponse& from);
  void MergeFrom(const BINFindUserResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // repeated .BINUserInfo userInfos = 3;
  inline int userinfos_size() const;
  inline void clear_userinfos();
  static const int kUserInfosFieldNumber = 3;
  inline const ::BINUserInfo& userinfos(int index) const;
  inline ::BINUserInfo* mutable_userinfos(int index);
  inline ::BINUserInfo* add_userinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::BINUserInfo >&
      userinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINUserInfo >*
      mutable_userinfos();

  // @@protoc_insertion_point(class_scope:BINFindUserResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::RepeatedPtrField< ::BINUserInfo > userinfos_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINFindUserResponse* default_instance_;
};
// -------------------------------------------------------------------

class BINViewUserInfoRequest : public ::google::protobuf::Message {
 public:
  BINViewUserInfoRequest();
  virtual ~BINViewUserInfoRequest();

  BINViewUserInfoRequest(const BINViewUserInfoRequest& from);

  inline BINViewUserInfoRequest& operator=(const BINViewUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINViewUserInfoRequest& default_instance();

  void Swap(BINViewUserInfoRequest* other);

  // implements Message ----------------------------------------------

  BINViewUserInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINViewUserInfoRequest& from);
  void MergeFrom(const BINViewUserInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 targetUserId = 1;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BINViewUserInfoRequest)
 private:
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 targetuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINViewUserInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINViewUserInfoResponse : public ::google::protobuf::Message {
 public:
  BINViewUserInfoResponse();
  virtual ~BINViewUserInfoResponse();

  BINViewUserInfoResponse(const BINViewUserInfoResponse& from);

  inline BINViewUserInfoResponse& operator=(const BINViewUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINViewUserInfoResponse& default_instance();

  void Swap(BINViewUserInfoResponse* other);

  // implements Message ----------------------------------------------

  BINViewUserInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINViewUserInfoResponse& from);
  void MergeFrom(const BINViewUserInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional .BINUserInfo userInfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 3;
  inline const ::BINUserInfo& userinfo() const;
  inline ::BINUserInfo* mutable_userinfo();
  inline ::BINUserInfo* release_userinfo();
  inline void set_allocated_userinfo(::BINUserInfo* userinfo);

  // optional int32 friendStatus = 4;
  inline bool has_friendstatus() const;
  inline void clear_friendstatus();
  static const int kFriendStatusFieldNumber = 4;
  inline ::google::protobuf::int32 friendstatus() const;
  inline void set_friendstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BINViewUserInfoResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_friendstatus();
  inline void clear_has_friendstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;
  ::google::protobuf::int32 friendstatus_;
  ::BINUserInfo* userinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINViewUserInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class BINRemoveFriendRequest : public ::google::protobuf::Message {
 public:
  BINRemoveFriendRequest();
  virtual ~BINRemoveFriendRequest();

  BINRemoveFriendRequest(const BINRemoveFriendRequest& from);

  inline BINRemoveFriendRequest& operator=(const BINRemoveFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINRemoveFriendRequest& default_instance();

  void Swap(BINRemoveFriendRequest* other);

  // implements Message ----------------------------------------------

  BINRemoveFriendRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINRemoveFriendRequest& from);
  void MergeFrom(const BINRemoveFriendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 targetUserId = 1;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BINRemoveFriendRequest)
 private:
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 targetuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINRemoveFriendRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINRemoveFriendResponse : public ::google::protobuf::Message {
 public:
  BINRemoveFriendResponse();
  virtual ~BINRemoveFriendResponse();

  BINRemoveFriendResponse(const BINRemoveFriendResponse& from);

  inline BINRemoveFriendResponse& operator=(const BINRemoveFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINRemoveFriendResponse& default_instance();

  void Swap(BINRemoveFriendResponse* other);

  // implements Message ----------------------------------------------

  BINRemoveFriendResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINRemoveFriendResponse& from);
  void MergeFrom(const BINRemoveFriendResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:BINRemoveFriendResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static BINRemoveFriendResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINFilterFriendRequest

// required int32 firstResult = 1;
inline bool BINFilterFriendRequest::has_firstresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINFilterFriendRequest::set_has_firstresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINFilterFriendRequest::clear_has_firstresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINFilterFriendRequest::clear_firstresult() {
  firstresult_ = 0;
  clear_has_firstresult();
}
inline ::google::protobuf::int32 BINFilterFriendRequest::firstresult() const {
  return firstresult_;
}
inline void BINFilterFriendRequest::set_firstresult(::google::protobuf::int32 value) {
  set_has_firstresult();
  firstresult_ = value;
}

// required int32 maxResult = 2;
inline bool BINFilterFriendRequest::has_maxresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINFilterFriendRequest::set_has_maxresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINFilterFriendRequest::clear_has_maxresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINFilterFriendRequest::clear_maxresult() {
  maxresult_ = 0;
  clear_has_maxresult();
}
inline ::google::protobuf::int32 BINFilterFriendRequest::maxresult() const {
  return maxresult_;
}
inline void BINFilterFriendRequest::set_maxresult(::google::protobuf::int32 value) {
  set_has_maxresult();
  maxresult_ = value;
}

// -------------------------------------------------------------------

// BINFilterFriendResponse

// required bool responseCode = 1;
inline bool BINFilterFriendResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINFilterFriendResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINFilterFriendResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINFilterFriendResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINFilterFriendResponse::responsecode() const {
  return responsecode_;
}
inline void BINFilterFriendResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINFilterFriendResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINFilterFriendResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINFilterFriendResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINFilterFriendResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINFilterFriendResponse::message() const {
  return *message_;
}
inline void BINFilterFriendResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINFilterFriendResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINFilterFriendResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINFilterFriendResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINFilterFriendResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINFilterFriendResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .BINUserInfo currentFriends = 3;
inline int BINFilterFriendResponse::currentfriends_size() const {
  return currentfriends_.size();
}
inline void BINFilterFriendResponse::clear_currentfriends() {
  currentfriends_.Clear();
}
inline const ::BINUserInfo& BINFilterFriendResponse::currentfriends(int index) const {
  return currentfriends_.Get(index);
}
inline ::BINUserInfo* BINFilterFriendResponse::mutable_currentfriends(int index) {
  return currentfriends_.Mutable(index);
}
inline ::BINUserInfo* BINFilterFriendResponse::add_currentfriends() {
  return currentfriends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINUserInfo >&
BINFilterFriendResponse::currentfriends() const {
  return currentfriends_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINUserInfo >*
BINFilterFriendResponse::mutable_currentfriends() {
  return &currentfriends_;
}

// -------------------------------------------------------------------

// BINAddFriendRequest

// required int64 targetUserId = 1;
inline bool BINAddFriendRequest::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINAddFriendRequest::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINAddFriendRequest::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINAddFriendRequest::clear_targetuserid() {
  targetuserid_ = GOOGLE_LONGLONG(0);
  clear_has_targetuserid();
}
inline ::google::protobuf::int64 BINAddFriendRequest::targetuserid() const {
  return targetuserid_;
}
inline void BINAddFriendRequest::set_targetuserid(::google::protobuf::int64 value) {
  set_has_targetuserid();
  targetuserid_ = value;
}

// -------------------------------------------------------------------

// BINAddFriendResponse

// required bool responseCode = 1;
inline bool BINAddFriendResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINAddFriendResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINAddFriendResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINAddFriendResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINAddFriendResponse::responsecode() const {
  return responsecode_;
}
inline void BINAddFriendResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINAddFriendResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINAddFriendResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINAddFriendResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINAddFriendResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINAddFriendResponse::message() const {
  return *message_;
}
inline void BINAddFriendResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINAddFriendResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINAddFriendResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINAddFriendResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINAddFriendResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINAddFriendResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 friendStatus = 3;
inline bool BINAddFriendResponse::has_friendstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINAddFriendResponse::set_has_friendstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINAddFriendResponse::clear_has_friendstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINAddFriendResponse::clear_friendstatus() {
  friendstatus_ = 0;
  clear_has_friendstatus();
}
inline ::google::protobuf::int32 BINAddFriendResponse::friendstatus() const {
  return friendstatus_;
}
inline void BINAddFriendResponse::set_friendstatus(::google::protobuf::int32 value) {
  set_has_friendstatus();
  friendstatus_ = value;
}

// -------------------------------------------------------------------

// BINAddFriend

// required int32 requestId = 1;
inline bool BINAddFriend::has_requestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINAddFriend::set_has_requestid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINAddFriend::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINAddFriend::clear_requestid() {
  requestid_ = 0;
  clear_has_requestid();
}
inline ::google::protobuf::int32 BINAddFriend::requestid() const {
  return requestid_;
}
inline void BINAddFriend::set_requestid(::google::protobuf::int32 value) {
  set_has_requestid();
  requestid_ = value;
}

// required .BINUserInfo senderUser = 2;
inline bool BINAddFriend::has_senderuser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINAddFriend::set_has_senderuser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINAddFriend::clear_has_senderuser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINAddFriend::clear_senderuser() {
  if (senderuser_ != NULL) senderuser_->::BINUserInfo::Clear();
  clear_has_senderuser();
}
inline const ::BINUserInfo& BINAddFriend::senderuser() const {
  return senderuser_ != NULL ? *senderuser_ : *default_instance_->senderuser_;
}
inline ::BINUserInfo* BINAddFriend::mutable_senderuser() {
  set_has_senderuser();
  if (senderuser_ == NULL) senderuser_ = new ::BINUserInfo;
  return senderuser_;
}
inline ::BINUserInfo* BINAddFriend::release_senderuser() {
  clear_has_senderuser();
  ::BINUserInfo* temp = senderuser_;
  senderuser_ = NULL;
  return temp;
}
inline void BINAddFriend::set_allocated_senderuser(::BINUserInfo* senderuser) {
  delete senderuser_;
  senderuser_ = senderuser;
  if (senderuser) {
    set_has_senderuser();
  } else {
    clear_has_senderuser();
  }
}

// -------------------------------------------------------------------

// BINFilterAddFriendRequest

// required int32 firstResult = 1;
inline bool BINFilterAddFriendRequest::has_firstresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINFilterAddFriendRequest::set_has_firstresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINFilterAddFriendRequest::clear_has_firstresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINFilterAddFriendRequest::clear_firstresult() {
  firstresult_ = 0;
  clear_has_firstresult();
}
inline ::google::protobuf::int32 BINFilterAddFriendRequest::firstresult() const {
  return firstresult_;
}
inline void BINFilterAddFriendRequest::set_firstresult(::google::protobuf::int32 value) {
  set_has_firstresult();
  firstresult_ = value;
}

// required int32 maxResult = 2;
inline bool BINFilterAddFriendRequest::has_maxresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINFilterAddFriendRequest::set_has_maxresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINFilterAddFriendRequest::clear_has_maxresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINFilterAddFriendRequest::clear_maxresult() {
  maxresult_ = 0;
  clear_has_maxresult();
}
inline ::google::protobuf::int32 BINFilterAddFriendRequest::maxresult() const {
  return maxresult_;
}
inline void BINFilterAddFriendRequest::set_maxresult(::google::protobuf::int32 value) {
  set_has_maxresult();
  maxresult_ = value;
}

// -------------------------------------------------------------------

// BINFilterAddFriendResponse

// required bool responseCode = 1;
inline bool BINFilterAddFriendResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINFilterAddFriendResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINFilterAddFriendResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINFilterAddFriendResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINFilterAddFriendResponse::responsecode() const {
  return responsecode_;
}
inline void BINFilterAddFriendResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINFilterAddFriendResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINFilterAddFriendResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINFilterAddFriendResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINFilterAddFriendResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINFilterAddFriendResponse::message() const {
  return *message_;
}
inline void BINFilterAddFriendResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINFilterAddFriendResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINFilterAddFriendResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINFilterAddFriendResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINFilterAddFriendResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINFilterAddFriendResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .BINAddFriend requestFriends = 3;
inline int BINFilterAddFriendResponse::requestfriends_size() const {
  return requestfriends_.size();
}
inline void BINFilterAddFriendResponse::clear_requestfriends() {
  requestfriends_.Clear();
}
inline const ::BINAddFriend& BINFilterAddFriendResponse::requestfriends(int index) const {
  return requestfriends_.Get(index);
}
inline ::BINAddFriend* BINFilterAddFriendResponse::mutable_requestfriends(int index) {
  return requestfriends_.Mutable(index);
}
inline ::BINAddFriend* BINFilterAddFriendResponse::add_requestfriends() {
  return requestfriends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINAddFriend >&
BINFilterAddFriendResponse::requestfriends() const {
  return requestfriends_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINAddFriend >*
BINFilterAddFriendResponse::mutable_requestfriends() {
  return &requestfriends_;
}

// -------------------------------------------------------------------

// BINApproveAddFriendRequest

// required int64 senderUserId = 1;
inline bool BINApproveAddFriendRequest::has_senderuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINApproveAddFriendRequest::set_has_senderuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINApproveAddFriendRequest::clear_has_senderuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINApproveAddFriendRequest::clear_senderuserid() {
  senderuserid_ = GOOGLE_LONGLONG(0);
  clear_has_senderuserid();
}
inline ::google::protobuf::int64 BINApproveAddFriendRequest::senderuserid() const {
  return senderuserid_;
}
inline void BINApproveAddFriendRequest::set_senderuserid(::google::protobuf::int64 value) {
  set_has_senderuserid();
  senderuserid_ = value;
}

// required bool accepted = 2;
inline bool BINApproveAddFriendRequest::has_accepted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINApproveAddFriendRequest::set_has_accepted() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINApproveAddFriendRequest::clear_has_accepted() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINApproveAddFriendRequest::clear_accepted() {
  accepted_ = false;
  clear_has_accepted();
}
inline bool BINApproveAddFriendRequest::accepted() const {
  return accepted_;
}
inline void BINApproveAddFriendRequest::set_accepted(bool value) {
  set_has_accepted();
  accepted_ = value;
}

// -------------------------------------------------------------------

// BINApproveAddFriendResponse

// required bool responseCode = 1;
inline bool BINApproveAddFriendResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINApproveAddFriendResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINApproveAddFriendResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINApproveAddFriendResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINApproveAddFriendResponse::responsecode() const {
  return responsecode_;
}
inline void BINApproveAddFriendResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINApproveAddFriendResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINApproveAddFriendResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINApproveAddFriendResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINApproveAddFriendResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINApproveAddFriendResponse::message() const {
  return *message_;
}
inline void BINApproveAddFriendResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINApproveAddFriendResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINApproveAddFriendResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINApproveAddFriendResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINApproveAddFriendResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINApproveAddFriendResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 friendStatus = 3;
inline bool BINApproveAddFriendResponse::has_friendstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINApproveAddFriendResponse::set_has_friendstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINApproveAddFriendResponse::clear_has_friendstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINApproveAddFriendResponse::clear_friendstatus() {
  friendstatus_ = 0;
  clear_has_friendstatus();
}
inline ::google::protobuf::int32 BINApproveAddFriendResponse::friendstatus() const {
  return friendstatus_;
}
inline void BINApproveAddFriendResponse::set_friendstatus(::google::protobuf::int32 value) {
  set_has_friendstatus();
  friendstatus_ = value;
}

// -------------------------------------------------------------------

// BINFindUserRequest

// required string userNameQuery = 1;
inline bool BINFindUserRequest::has_usernamequery() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINFindUserRequest::set_has_usernamequery() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINFindUserRequest::clear_has_usernamequery() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINFindUserRequest::clear_usernamequery() {
  if (usernamequery_ != &::google::protobuf::internal::kEmptyString) {
    usernamequery_->clear();
  }
  clear_has_usernamequery();
}
inline const ::std::string& BINFindUserRequest::usernamequery() const {
  return *usernamequery_;
}
inline void BINFindUserRequest::set_usernamequery(const ::std::string& value) {
  set_has_usernamequery();
  if (usernamequery_ == &::google::protobuf::internal::kEmptyString) {
    usernamequery_ = new ::std::string;
  }
  usernamequery_->assign(value);
}
inline void BINFindUserRequest::set_usernamequery(const char* value) {
  set_has_usernamequery();
  if (usernamequery_ == &::google::protobuf::internal::kEmptyString) {
    usernamequery_ = new ::std::string;
  }
  usernamequery_->assign(value);
}
inline void BINFindUserRequest::set_usernamequery(const char* value, size_t size) {
  set_has_usernamequery();
  if (usernamequery_ == &::google::protobuf::internal::kEmptyString) {
    usernamequery_ = new ::std::string;
  }
  usernamequery_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINFindUserRequest::mutable_usernamequery() {
  set_has_usernamequery();
  if (usernamequery_ == &::google::protobuf::internal::kEmptyString) {
    usernamequery_ = new ::std::string;
  }
  return usernamequery_;
}
inline ::std::string* BINFindUserRequest::release_usernamequery() {
  clear_has_usernamequery();
  if (usernamequery_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usernamequery_;
    usernamequery_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINFindUserRequest::set_allocated_usernamequery(::std::string* usernamequery) {
  if (usernamequery_ != &::google::protobuf::internal::kEmptyString) {
    delete usernamequery_;
  }
  if (usernamequery) {
    set_has_usernamequery();
    usernamequery_ = usernamequery;
  } else {
    clear_has_usernamequery();
    usernamequery_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 firstResult = 2;
inline bool BINFindUserRequest::has_firstresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINFindUserRequest::set_has_firstresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINFindUserRequest::clear_has_firstresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINFindUserRequest::clear_firstresult() {
  firstresult_ = 0;
  clear_has_firstresult();
}
inline ::google::protobuf::int32 BINFindUserRequest::firstresult() const {
  return firstresult_;
}
inline void BINFindUserRequest::set_firstresult(::google::protobuf::int32 value) {
  set_has_firstresult();
  firstresult_ = value;
}

// required int32 maxResult = 3;
inline bool BINFindUserRequest::has_maxresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINFindUserRequest::set_has_maxresult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINFindUserRequest::clear_has_maxresult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINFindUserRequest::clear_maxresult() {
  maxresult_ = 0;
  clear_has_maxresult();
}
inline ::google::protobuf::int32 BINFindUserRequest::maxresult() const {
  return maxresult_;
}
inline void BINFindUserRequest::set_maxresult(::google::protobuf::int32 value) {
  set_has_maxresult();
  maxresult_ = value;
}

// -------------------------------------------------------------------

// BINFindUserResponse

// required bool responseCode = 1;
inline bool BINFindUserResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINFindUserResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINFindUserResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINFindUserResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINFindUserResponse::responsecode() const {
  return responsecode_;
}
inline void BINFindUserResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINFindUserResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINFindUserResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINFindUserResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINFindUserResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINFindUserResponse::message() const {
  return *message_;
}
inline void BINFindUserResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINFindUserResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINFindUserResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINFindUserResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINFindUserResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINFindUserResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .BINUserInfo userInfos = 3;
inline int BINFindUserResponse::userinfos_size() const {
  return userinfos_.size();
}
inline void BINFindUserResponse::clear_userinfos() {
  userinfos_.Clear();
}
inline const ::BINUserInfo& BINFindUserResponse::userinfos(int index) const {
  return userinfos_.Get(index);
}
inline ::BINUserInfo* BINFindUserResponse::mutable_userinfos(int index) {
  return userinfos_.Mutable(index);
}
inline ::BINUserInfo* BINFindUserResponse::add_userinfos() {
  return userinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINUserInfo >&
BINFindUserResponse::userinfos() const {
  return userinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINUserInfo >*
BINFindUserResponse::mutable_userinfos() {
  return &userinfos_;
}

// -------------------------------------------------------------------

// BINViewUserInfoRequest

// required int64 targetUserId = 1;
inline bool BINViewUserInfoRequest::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINViewUserInfoRequest::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINViewUserInfoRequest::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINViewUserInfoRequest::clear_targetuserid() {
  targetuserid_ = GOOGLE_LONGLONG(0);
  clear_has_targetuserid();
}
inline ::google::protobuf::int64 BINViewUserInfoRequest::targetuserid() const {
  return targetuserid_;
}
inline void BINViewUserInfoRequest::set_targetuserid(::google::protobuf::int64 value) {
  set_has_targetuserid();
  targetuserid_ = value;
}

// -------------------------------------------------------------------

// BINViewUserInfoResponse

// required bool responseCode = 1;
inline bool BINViewUserInfoResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINViewUserInfoResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINViewUserInfoResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINViewUserInfoResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINViewUserInfoResponse::responsecode() const {
  return responsecode_;
}
inline void BINViewUserInfoResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINViewUserInfoResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINViewUserInfoResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINViewUserInfoResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINViewUserInfoResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINViewUserInfoResponse::message() const {
  return *message_;
}
inline void BINViewUserInfoResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINViewUserInfoResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINViewUserInfoResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINViewUserInfoResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINViewUserInfoResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINViewUserInfoResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .BINUserInfo userInfo = 3;
inline bool BINViewUserInfoResponse::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINViewUserInfoResponse::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINViewUserInfoResponse::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINViewUserInfoResponse::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::BINUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::BINUserInfo& BINViewUserInfoResponse::userinfo() const {
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::BINUserInfo* BINViewUserInfoResponse::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::BINUserInfo;
  return userinfo_;
}
inline ::BINUserInfo* BINViewUserInfoResponse::release_userinfo() {
  clear_has_userinfo();
  ::BINUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void BINViewUserInfoResponse::set_allocated_userinfo(::BINUserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
}

// optional int32 friendStatus = 4;
inline bool BINViewUserInfoResponse::has_friendstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINViewUserInfoResponse::set_has_friendstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINViewUserInfoResponse::clear_has_friendstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINViewUserInfoResponse::clear_friendstatus() {
  friendstatus_ = 0;
  clear_has_friendstatus();
}
inline ::google::protobuf::int32 BINViewUserInfoResponse::friendstatus() const {
  return friendstatus_;
}
inline void BINViewUserInfoResponse::set_friendstatus(::google::protobuf::int32 value) {
  set_has_friendstatus();
  friendstatus_ = value;
}

// -------------------------------------------------------------------

// BINRemoveFriendRequest

// required int64 targetUserId = 1;
inline bool BINRemoveFriendRequest::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINRemoveFriendRequest::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINRemoveFriendRequest::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINRemoveFriendRequest::clear_targetuserid() {
  targetuserid_ = GOOGLE_LONGLONG(0);
  clear_has_targetuserid();
}
inline ::google::protobuf::int64 BINRemoveFriendRequest::targetuserid() const {
  return targetuserid_;
}
inline void BINRemoveFriendRequest::set_targetuserid(::google::protobuf::int64 value) {
  set_has_targetuserid();
  targetuserid_ = value;
}

// -------------------------------------------------------------------

// BINRemoveFriendResponse

// required bool responseCode = 1;
inline bool BINRemoveFriendResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINRemoveFriendResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINRemoveFriendResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINRemoveFriendResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINRemoveFriendResponse::responsecode() const {
  return responsecode_;
}
inline void BINRemoveFriendResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINRemoveFriendResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINRemoveFriendResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINRemoveFriendResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINRemoveFriendResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINRemoveFriendResponse::message() const {
  return *message_;
}
inline void BINRemoveFriendResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINRemoveFriendResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINRemoveFriendResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRemoveFriendResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINRemoveFriendResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRemoveFriendResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friend_2eproto__INCLUDED
