// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: captcha.proto

#ifndef PROTOBUF_captcha_2eproto__INCLUDED
#define PROTOBUF_captcha_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_captcha_2eproto();
void protobuf_AssignDesc_captcha_2eproto();
void protobuf_ShutdownFile_captcha_2eproto();

class BINCaptchaRequest;
class BINCaptcha;
class BINCaptchaResponse;

// ===================================================================

class BINCaptchaRequest : public ::google::protobuf::Message {
 public:
  BINCaptchaRequest();
  virtual ~BINCaptchaRequest();

  BINCaptchaRequest(const BINCaptchaRequest& from);

  inline BINCaptchaRequest& operator=(const BINCaptchaRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINCaptchaRequest& default_instance();

  void Swap(BINCaptchaRequest* other);

  // implements Message ----------------------------------------------

  BINCaptchaRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINCaptchaRequest& from);
  void MergeFrom(const BINCaptchaRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool refresh = 1;
  inline bool has_refresh() const;
  inline void clear_refresh();
  static const int kRefreshFieldNumber = 1;
  inline bool refresh() const;
  inline void set_refresh(bool value);

  // @@protoc_insertion_point(class_scope:BINCaptchaRequest)
 private:
  inline void set_has_refresh();
  inline void clear_has_refresh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool refresh_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_captcha_2eproto();
  friend void protobuf_AssignDesc_captcha_2eproto();
  friend void protobuf_ShutdownFile_captcha_2eproto();

  void InitAsDefaultInstance();
  static BINCaptchaRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINCaptcha : public ::google::protobuf::Message {
 public:
  BINCaptcha();
  virtual ~BINCaptcha();

  BINCaptcha(const BINCaptcha& from);

  inline BINCaptcha& operator=(const BINCaptcha& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINCaptcha& default_instance();

  void Swap(BINCaptcha* other);

  // implements Message ----------------------------------------------

  BINCaptcha* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINCaptcha& from);
  void MergeFrom(const BINCaptcha& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string securityKey = 1;
  inline bool has_securitykey() const;
  inline void clear_securitykey();
  static const int kSecurityKeyFieldNumber = 1;
  inline const ::std::string& securitykey() const;
  inline void set_securitykey(const ::std::string& value);
  inline void set_securitykey(const char* value);
  inline void set_securitykey(const char* value, size_t size);
  inline ::std::string* mutable_securitykey();
  inline ::std::string* release_securitykey();
  inline void set_allocated_securitykey(::std::string* securitykey);

  // required string captchaChallenge = 2;
  inline bool has_captchachallenge() const;
  inline void clear_captchachallenge();
  static const int kCaptchaChallengeFieldNumber = 2;
  inline const ::std::string& captchachallenge() const;
  inline void set_captchachallenge(const ::std::string& value);
  inline void set_captchachallenge(const char* value);
  inline void set_captchachallenge(const char* value, size_t size);
  inline ::std::string* mutable_captchachallenge();
  inline ::std::string* release_captchachallenge();
  inline void set_allocated_captchachallenge(::std::string* captchachallenge);

  // @@protoc_insertion_point(class_scope:BINCaptcha)
 private:
  inline void set_has_securitykey();
  inline void clear_has_securitykey();
  inline void set_has_captchachallenge();
  inline void clear_has_captchachallenge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* securitykey_;
  ::std::string* captchachallenge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_captcha_2eproto();
  friend void protobuf_AssignDesc_captcha_2eproto();
  friend void protobuf_ShutdownFile_captcha_2eproto();

  void InitAsDefaultInstance();
  static BINCaptcha* default_instance_;
};
// -------------------------------------------------------------------

class BINCaptchaResponse : public ::google::protobuf::Message {
 public:
  BINCaptchaResponse();
  virtual ~BINCaptchaResponse();

  BINCaptchaResponse(const BINCaptchaResponse& from);

  inline BINCaptchaResponse& operator=(const BINCaptchaResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINCaptchaResponse& default_instance();

  void Swap(BINCaptchaResponse* other);

  // implements Message ----------------------------------------------

  BINCaptchaResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINCaptchaResponse& from);
  void MergeFrom(const BINCaptchaResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional .BINCaptcha captcha = 3;
  inline bool has_captcha() const;
  inline void clear_captcha();
  static const int kCaptchaFieldNumber = 3;
  inline const ::BINCaptcha& captcha() const;
  inline ::BINCaptcha* mutable_captcha();
  inline ::BINCaptcha* release_captcha();
  inline void set_allocated_captcha(::BINCaptcha* captcha);

  // @@protoc_insertion_point(class_scope:BINCaptchaResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_captcha();
  inline void clear_has_captcha();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::BINCaptcha* captcha_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_captcha_2eproto();
  friend void protobuf_AssignDesc_captcha_2eproto();
  friend void protobuf_ShutdownFile_captcha_2eproto();

  void InitAsDefaultInstance();
  static BINCaptchaResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINCaptchaRequest

// optional bool refresh = 1;
inline bool BINCaptchaRequest::has_refresh() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINCaptchaRequest::set_has_refresh() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINCaptchaRequest::clear_has_refresh() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINCaptchaRequest::clear_refresh() {
  refresh_ = false;
  clear_has_refresh();
}
inline bool BINCaptchaRequest::refresh() const {
  return refresh_;
}
inline void BINCaptchaRequest::set_refresh(bool value) {
  set_has_refresh();
  refresh_ = value;
}

// -------------------------------------------------------------------

// BINCaptcha

// required string securityKey = 1;
inline bool BINCaptcha::has_securitykey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINCaptcha::set_has_securitykey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINCaptcha::clear_has_securitykey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINCaptcha::clear_securitykey() {
  if (securitykey_ != &::google::protobuf::internal::kEmptyString) {
    securitykey_->clear();
  }
  clear_has_securitykey();
}
inline const ::std::string& BINCaptcha::securitykey() const {
  return *securitykey_;
}
inline void BINCaptcha::set_securitykey(const ::std::string& value) {
  set_has_securitykey();
  if (securitykey_ == &::google::protobuf::internal::kEmptyString) {
    securitykey_ = new ::std::string;
  }
  securitykey_->assign(value);
}
inline void BINCaptcha::set_securitykey(const char* value) {
  set_has_securitykey();
  if (securitykey_ == &::google::protobuf::internal::kEmptyString) {
    securitykey_ = new ::std::string;
  }
  securitykey_->assign(value);
}
inline void BINCaptcha::set_securitykey(const char* value, size_t size) {
  set_has_securitykey();
  if (securitykey_ == &::google::protobuf::internal::kEmptyString) {
    securitykey_ = new ::std::string;
  }
  securitykey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINCaptcha::mutable_securitykey() {
  set_has_securitykey();
  if (securitykey_ == &::google::protobuf::internal::kEmptyString) {
    securitykey_ = new ::std::string;
  }
  return securitykey_;
}
inline ::std::string* BINCaptcha::release_securitykey() {
  clear_has_securitykey();
  if (securitykey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = securitykey_;
    securitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINCaptcha::set_allocated_securitykey(::std::string* securitykey) {
  if (securitykey_ != &::google::protobuf::internal::kEmptyString) {
    delete securitykey_;
  }
  if (securitykey) {
    set_has_securitykey();
    securitykey_ = securitykey;
  } else {
    clear_has_securitykey();
    securitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string captchaChallenge = 2;
inline bool BINCaptcha::has_captchachallenge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINCaptcha::set_has_captchachallenge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINCaptcha::clear_has_captchachallenge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINCaptcha::clear_captchachallenge() {
  if (captchachallenge_ != &::google::protobuf::internal::kEmptyString) {
    captchachallenge_->clear();
  }
  clear_has_captchachallenge();
}
inline const ::std::string& BINCaptcha::captchachallenge() const {
  return *captchachallenge_;
}
inline void BINCaptcha::set_captchachallenge(const ::std::string& value) {
  set_has_captchachallenge();
  if (captchachallenge_ == &::google::protobuf::internal::kEmptyString) {
    captchachallenge_ = new ::std::string;
  }
  captchachallenge_->assign(value);
}
inline void BINCaptcha::set_captchachallenge(const char* value) {
  set_has_captchachallenge();
  if (captchachallenge_ == &::google::protobuf::internal::kEmptyString) {
    captchachallenge_ = new ::std::string;
  }
  captchachallenge_->assign(value);
}
inline void BINCaptcha::set_captchachallenge(const char* value, size_t size) {
  set_has_captchachallenge();
  if (captchachallenge_ == &::google::protobuf::internal::kEmptyString) {
    captchachallenge_ = new ::std::string;
  }
  captchachallenge_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINCaptcha::mutable_captchachallenge() {
  set_has_captchachallenge();
  if (captchachallenge_ == &::google::protobuf::internal::kEmptyString) {
    captchachallenge_ = new ::std::string;
  }
  return captchachallenge_;
}
inline ::std::string* BINCaptcha::release_captchachallenge() {
  clear_has_captchachallenge();
  if (captchachallenge_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = captchachallenge_;
    captchachallenge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINCaptcha::set_allocated_captchachallenge(::std::string* captchachallenge) {
  if (captchachallenge_ != &::google::protobuf::internal::kEmptyString) {
    delete captchachallenge_;
  }
  if (captchachallenge) {
    set_has_captchachallenge();
    captchachallenge_ = captchachallenge;
  } else {
    clear_has_captchachallenge();
    captchachallenge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BINCaptchaResponse

// required bool responseCode = 1;
inline bool BINCaptchaResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINCaptchaResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINCaptchaResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINCaptchaResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINCaptchaResponse::responsecode() const {
  return responsecode_;
}
inline void BINCaptchaResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINCaptchaResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINCaptchaResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINCaptchaResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINCaptchaResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINCaptchaResponse::message() const {
  return *message_;
}
inline void BINCaptchaResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINCaptchaResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINCaptchaResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINCaptchaResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINCaptchaResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINCaptchaResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .BINCaptcha captcha = 3;
inline bool BINCaptchaResponse::has_captcha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINCaptchaResponse::set_has_captcha() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINCaptchaResponse::clear_has_captcha() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINCaptchaResponse::clear_captcha() {
  if (captcha_ != NULL) captcha_->::BINCaptcha::Clear();
  clear_has_captcha();
}
inline const ::BINCaptcha& BINCaptchaResponse::captcha() const {
  return captcha_ != NULL ? *captcha_ : *default_instance_->captcha_;
}
inline ::BINCaptcha* BINCaptchaResponse::mutable_captcha() {
  set_has_captcha();
  if (captcha_ == NULL) captcha_ = new ::BINCaptcha;
  return captcha_;
}
inline ::BINCaptcha* BINCaptchaResponse::release_captcha() {
  clear_has_captcha();
  ::BINCaptcha* temp = captcha_;
  captcha_ = NULL;
  return temp;
}
inline void BINCaptchaResponse::set_allocated_captcha(::BINCaptcha* captcha) {
  delete captcha_;
  captcha_ = captcha;
  if (captcha) {
    set_has_captcha();
  } else {
    clear_has_captcha();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_captcha_2eproto__INCLUDED
