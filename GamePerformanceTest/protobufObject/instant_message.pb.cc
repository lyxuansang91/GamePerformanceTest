// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instant_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "instant_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINInstantMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINInstantMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINInstantMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINInstantMessageResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_instant_5fmessage_2eproto() {
  protobuf_AddDesc_instant_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "instant_message.proto");
  GOOGLE_CHECK(file != NULL);
  BINInstantMessageRequest_descriptor_ = file->message_type(0);
  static const int BINInstantMessageRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageRequest, scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageRequest, instantmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageRequest, receiverusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageRequest, receiveruserid_),
  };
  BINInstantMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINInstantMessageRequest_descriptor_,
      BINInstantMessageRequest::default_instance_,
      BINInstantMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINInstantMessageRequest));
  BINInstantMessageResponse_descriptor_ = file->message_type(1);
  static const int BINInstantMessageResponse_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, senderusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, senderuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, instantmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, senttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, receiverusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, receiveruserid_),
  };
  BINInstantMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINInstantMessageResponse_descriptor_,
      BINInstantMessageResponse::default_instance_,
      BINInstantMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINInstantMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINInstantMessageResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_instant_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINInstantMessageRequest_descriptor_, &BINInstantMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINInstantMessageResponse_descriptor_, &BINInstantMessageResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_instant_5fmessage_2eproto() {
  delete BINInstantMessageRequest::default_instance_;
  delete BINInstantMessageRequest_reflection_;
  delete BINInstantMessageResponse::default_instance_;
  delete BINInstantMessageResponse_reflection_;
}

void protobuf_AddDesc_instant_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025instant_message.proto\"s\n\030BINInstantMes"
    "sageRequest\022\r\n\005scope\030\001 \002(\005\022\026\n\016instantMes"
    "sage\030\002 \002(\t\022\030\n\020receiverUserName\030\003 \001(\t\022\026\n\016"
    "receiverUserId\030\004 \001(\003\"\376\001\n\031BINInstantMessa"
    "geResponse\022\024\n\014responseCode\030\001 \002(\010\022\017\n\007mess"
    "age\030\002 \001(\t\022\r\n\005scope\030\003 \001(\005\022\026\n\016senderUserNa"
    "me\030\004 \001(\t\022\024\n\014senderUserId\030\005 \001(\003\022\026\n\016instan"
    "tMessage\030\006 \001(\t\022\020\n\010sentTime\030\007 \001(\003\022\016\n\006zone"
    "Id\030\010 \001(\005\022\021\n\troomIndex\030\t \001(\005\022\030\n\020receiverU"
    "serName\030\n \001(\t\022\026\n\016receiverUserId\030\013 \001(\003B\036\n"
    "\034com.mi.game.network.data.bin", 429);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "instant_message.proto", &protobuf_RegisterTypes);
  BINInstantMessageRequest::default_instance_ = new BINInstantMessageRequest();
  BINInstantMessageResponse::default_instance_ = new BINInstantMessageResponse();
  BINInstantMessageRequest::default_instance_->InitAsDefaultInstance();
  BINInstantMessageResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_instant_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_instant_5fmessage_2eproto {
  StaticDescriptorInitializer_instant_5fmessage_2eproto() {
    protobuf_AddDesc_instant_5fmessage_2eproto();
  }
} static_descriptor_initializer_instant_5fmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINInstantMessageRequest::kScopeFieldNumber;
const int BINInstantMessageRequest::kInstantMessageFieldNumber;
const int BINInstantMessageRequest::kReceiverUserNameFieldNumber;
const int BINInstantMessageRequest::kReceiverUserIdFieldNumber;
#endif  // !_MSC_VER

BINInstantMessageRequest::BINInstantMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINInstantMessageRequest::InitAsDefaultInstance() {
}

BINInstantMessageRequest::BINInstantMessageRequest(const BINInstantMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINInstantMessageRequest::SharedCtor() {
  _cached_size_ = 0;
  scope_ = 0;
  instantmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiverusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiveruserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINInstantMessageRequest::~BINInstantMessageRequest() {
  SharedDtor();
}

void BINInstantMessageRequest::SharedDtor() {
  if (instantmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete instantmessage_;
  }
  if (receiverusername_ != &::google::protobuf::internal::kEmptyString) {
    delete receiverusername_;
  }
  if (this != default_instance_) {
  }
}

void BINInstantMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINInstantMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINInstantMessageRequest_descriptor_;
}

const BINInstantMessageRequest& BINInstantMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instant_5fmessage_2eproto();
  return *default_instance_;
}

BINInstantMessageRequest* BINInstantMessageRequest::default_instance_ = NULL;

BINInstantMessageRequest* BINInstantMessageRequest::New() const {
  return new BINInstantMessageRequest;
}

void BINInstantMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scope_ = 0;
    if (has_instantmessage()) {
      if (instantmessage_ != &::google::protobuf::internal::kEmptyString) {
        instantmessage_->clear();
      }
    }
    if (has_receiverusername()) {
      if (receiverusername_ != &::google::protobuf::internal::kEmptyString) {
        receiverusername_->clear();
      }
    }
    receiveruserid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINInstantMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scope = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scope_)));
          set_has_scope();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instantMessage;
        break;
      }

      // required string instantMessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instantMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instantmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instantmessage().data(), this->instantmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_receiverUserName;
        break;
      }

      // optional string receiverUserName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiverUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiverusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiverusername().data(), this->receiverusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_receiverUserId;
        break;
      }

      // optional int64 receiverUserId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiveruserid_)));
          set_has_receiveruserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINInstantMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 scope = 1;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scope(), output);
  }

  // required string instantMessage = 2;
  if (has_instantmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instantmessage().data(), this->instantmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instantmessage(), output);
  }

  // optional string receiverUserName = 3;
  if (has_receiverusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiverusername().data(), this->receiverusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->receiverusername(), output);
  }

  // optional int64 receiverUserId = 4;
  if (has_receiveruserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->receiveruserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINInstantMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 scope = 1;
  if (has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scope(), target);
  }

  // required string instantMessage = 2;
  if (has_instantmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instantmessage().data(), this->instantmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instantmessage(), target);
  }

  // optional string receiverUserName = 3;
  if (has_receiverusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiverusername().data(), this->receiverusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->receiverusername(), target);
  }

  // optional int64 receiverUserId = 4;
  if (has_receiveruserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->receiveruserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINInstantMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scope = 1;
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scope());
    }

    // required string instantMessage = 2;
    if (has_instantmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instantmessage());
    }

    // optional string receiverUserName = 3;
    if (has_receiverusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiverusername());
    }

    // optional int64 receiverUserId = 4;
    if (has_receiveruserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiveruserid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINInstantMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINInstantMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINInstantMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINInstantMessageRequest::MergeFrom(const BINInstantMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scope()) {
      set_scope(from.scope());
    }
    if (from.has_instantmessage()) {
      set_instantmessage(from.instantmessage());
    }
    if (from.has_receiverusername()) {
      set_receiverusername(from.receiverusername());
    }
    if (from.has_receiveruserid()) {
      set_receiveruserid(from.receiveruserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINInstantMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINInstantMessageRequest::CopyFrom(const BINInstantMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINInstantMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BINInstantMessageRequest::Swap(BINInstantMessageRequest* other) {
  if (other != this) {
    std::swap(scope_, other->scope_);
    std::swap(instantmessage_, other->instantmessage_);
    std::swap(receiverusername_, other->receiverusername_);
    std::swap(receiveruserid_, other->receiveruserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINInstantMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINInstantMessageRequest_descriptor_;
  metadata.reflection = BINInstantMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINInstantMessageResponse::kResponseCodeFieldNumber;
const int BINInstantMessageResponse::kMessageFieldNumber;
const int BINInstantMessageResponse::kScopeFieldNumber;
const int BINInstantMessageResponse::kSenderUserNameFieldNumber;
const int BINInstantMessageResponse::kSenderUserIdFieldNumber;
const int BINInstantMessageResponse::kInstantMessageFieldNumber;
const int BINInstantMessageResponse::kSentTimeFieldNumber;
const int BINInstantMessageResponse::kZoneIdFieldNumber;
const int BINInstantMessageResponse::kRoomIndexFieldNumber;
const int BINInstantMessageResponse::kReceiverUserNameFieldNumber;
const int BINInstantMessageResponse::kReceiverUserIdFieldNumber;
#endif  // !_MSC_VER

BINInstantMessageResponse::BINInstantMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINInstantMessageResponse::InitAsDefaultInstance() {
}

BINInstantMessageResponse::BINInstantMessageResponse(const BINInstantMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINInstantMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scope_ = 0;
  senderusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senderuserid_ = GOOGLE_LONGLONG(0);
  instantmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senttime_ = GOOGLE_LONGLONG(0);
  zoneid_ = 0;
  roomindex_ = 0;
  receiverusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiveruserid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINInstantMessageResponse::~BINInstantMessageResponse() {
  SharedDtor();
}

void BINInstantMessageResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (senderusername_ != &::google::protobuf::internal::kEmptyString) {
    delete senderusername_;
  }
  if (instantmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete instantmessage_;
  }
  if (receiverusername_ != &::google::protobuf::internal::kEmptyString) {
    delete receiverusername_;
  }
  if (this != default_instance_) {
  }
}

void BINInstantMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINInstantMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINInstantMessageResponse_descriptor_;
}

const BINInstantMessageResponse& BINInstantMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instant_5fmessage_2eproto();
  return *default_instance_;
}

BINInstantMessageResponse* BINInstantMessageResponse::default_instance_ = NULL;

BINInstantMessageResponse* BINInstantMessageResponse::New() const {
  return new BINInstantMessageResponse;
}

void BINInstantMessageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    scope_ = 0;
    if (has_senderusername()) {
      if (senderusername_ != &::google::protobuf::internal::kEmptyString) {
        senderusername_->clear();
      }
    }
    senderuserid_ = GOOGLE_LONGLONG(0);
    if (has_instantmessage()) {
      if (instantmessage_ != &::google::protobuf::internal::kEmptyString) {
        instantmessage_->clear();
      }
    }
    senttime_ = GOOGLE_LONGLONG(0);
    zoneid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    roomindex_ = 0;
    if (has_receiverusername()) {
      if (receiverusername_ != &::google::protobuf::internal::kEmptyString) {
        receiverusername_->clear();
      }
    }
    receiveruserid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINInstantMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scope;
        break;
      }

      // optional int32 scope = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scope:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scope_)));
          set_has_scope();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_senderUserName;
        break;
      }

      // optional string senderUserName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->senderusername().data(), this->senderusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_senderUserId;
        break;
      }

      // optional int64 senderUserId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_senderUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &senderuserid_)));
          set_has_senderuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_instantMessage;
        break;
      }

      // optional string instantMessage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instantMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instantmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instantmessage().data(), this->instantmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sentTime;
        break;
      }

      // optional int64 sentTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sentTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &senttime_)));
          set_has_senttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_zoneId;
        break;
      }

      // optional int32 zoneId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_roomIndex;
        break;
      }

      // optional int32 roomIndex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_receiverUserName;
        break;
      }

      // optional string receiverUserName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiverUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiverusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiverusername().data(), this->receiverusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_receiverUserId;
        break;
      }

      // optional int64 receiverUserId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiverUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiveruserid_)));
          set_has_receiveruserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINInstantMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional int32 scope = 3;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scope(), output);
  }

  // optional string senderUserName = 4;
  if (has_senderusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senderusername().data(), this->senderusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->senderusername(), output);
  }

  // optional int64 senderUserId = 5;
  if (has_senderuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->senderuserid(), output);
  }

  // optional string instantMessage = 6;
  if (has_instantmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instantmessage().data(), this->instantmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->instantmessage(), output);
  }

  // optional int64 sentTime = 7;
  if (has_senttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->senttime(), output);
  }

  // optional int32 zoneId = 8;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->zoneid(), output);
  }

  // optional int32 roomIndex = 9;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->roomindex(), output);
  }

  // optional string receiverUserName = 10;
  if (has_receiverusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiverusername().data(), this->receiverusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->receiverusername(), output);
  }

  // optional int64 receiverUserId = 11;
  if (has_receiveruserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->receiveruserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINInstantMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional int32 scope = 3;
  if (has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scope(), target);
  }

  // optional string senderUserName = 4;
  if (has_senderusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senderusername().data(), this->senderusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->senderusername(), target);
  }

  // optional int64 senderUserId = 5;
  if (has_senderuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->senderuserid(), target);
  }

  // optional string instantMessage = 6;
  if (has_instantmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instantmessage().data(), this->instantmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->instantmessage(), target);
  }

  // optional int64 sentTime = 7;
  if (has_senttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->senttime(), target);
  }

  // optional int32 zoneId = 8;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->zoneid(), target);
  }

  // optional int32 roomIndex = 9;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->roomindex(), target);
  }

  // optional string receiverUserName = 10;
  if (has_receiverusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiverusername().data(), this->receiverusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->receiverusername(), target);
  }

  // optional int64 receiverUserId = 11;
  if (has_receiveruserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->receiveruserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINInstantMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 scope = 3;
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scope());
    }

    // optional string senderUserName = 4;
    if (has_senderusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->senderusername());
    }

    // optional int64 senderUserId = 5;
    if (has_senderuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->senderuserid());
    }

    // optional string instantMessage = 6;
    if (has_instantmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instantmessage());
    }

    // optional int64 sentTime = 7;
    if (has_senttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->senttime());
    }

    // optional int32 zoneId = 8;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 roomIndex = 9;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

    // optional string receiverUserName = 10;
    if (has_receiverusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiverusername());
    }

    // optional int64 receiverUserId = 11;
    if (has_receiveruserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiveruserid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINInstantMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINInstantMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINInstantMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINInstantMessageResponse::MergeFrom(const BINInstantMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_scope()) {
      set_scope(from.scope());
    }
    if (from.has_senderusername()) {
      set_senderusername(from.senderusername());
    }
    if (from.has_senderuserid()) {
      set_senderuserid(from.senderuserid());
    }
    if (from.has_instantmessage()) {
      set_instantmessage(from.instantmessage());
    }
    if (from.has_senttime()) {
      set_senttime(from.senttime());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
    if (from.has_receiverusername()) {
      set_receiverusername(from.receiverusername());
    }
    if (from.has_receiveruserid()) {
      set_receiveruserid(from.receiveruserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINInstantMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINInstantMessageResponse::CopyFrom(const BINInstantMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINInstantMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINInstantMessageResponse::Swap(BINInstantMessageResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(scope_, other->scope_);
    std::swap(senderusername_, other->senderusername_);
    std::swap(senderuserid_, other->senderuserid_);
    std::swap(instantmessage_, other->instantmessage_);
    std::swap(senttime_, other->senttime_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(roomindex_, other->roomindex_);
    std::swap(receiverusername_, other->receiverusername_);
    std::swap(receiveruserid_, other->receiveruserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINInstantMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINInstantMessageResponse_descriptor_;
  metadata.reflection = BINInstantMessageResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
