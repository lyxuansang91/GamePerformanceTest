// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enter_zone.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "enter_zone.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINEnterZoneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINEnterZoneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINRoomConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINRoomConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINEnterZoneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINEnterZoneResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINExitZoneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINExitZoneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINExitZoneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINExitZoneResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_enter_5fzone_2eproto() {
  protobuf_AddDesc_enter_5fzone_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "enter_zone.proto");
  GOOGLE_CHECK(file != NULL);
  BINEnterZoneRequest_descriptor_ = file->message_type(0);
  static const int BINEnterZoneRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINEnterZoneRequest, zoneid_),
  };
  BINEnterZoneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINEnterZoneRequest_descriptor_,
      BINEnterZoneRequest::default_instance_,
      BINEnterZoneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINEnterZoneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINEnterZoneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINEnterZoneRequest));
  BINRoomConfig_descriptor_ = file->message_type(1);
  static const int BINRoomConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, roomgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, viproom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, mincash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, mingold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, minlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, roomcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, playersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, minbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, active_),
  };
  BINRoomConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINRoomConfig_descriptor_,
      BINRoomConfig::default_instance_,
      BINRoomConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINRoomConfig));
  BINEnterZoneResponse_descriptor_ = file->message_type(2);
  static const int BINEnterZoneResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINEnterZoneResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINEnterZoneResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINEnterZoneResponse, enabledisplayroomlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINEnterZoneResponse, cashroomconfigs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINEnterZoneResponse, goldroomconfigs_),
  };
  BINEnterZoneResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINEnterZoneResponse_descriptor_,
      BINEnterZoneResponse::default_instance_,
      BINEnterZoneResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINEnterZoneResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINEnterZoneResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINEnterZoneResponse));
  BINExitZoneRequest_descriptor_ = file->message_type(3);
  static const int BINExitZoneRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExitZoneRequest, zoneid_),
  };
  BINExitZoneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINExitZoneRequest_descriptor_,
      BINExitZoneRequest::default_instance_,
      BINExitZoneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExitZoneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExitZoneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINExitZoneRequest));
  BINExitZoneResponse_descriptor_ = file->message_type(4);
  static const int BINExitZoneResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExitZoneResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExitZoneResponse, message_),
  };
  BINExitZoneResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINExitZoneResponse_descriptor_,
      BINExitZoneResponse::default_instance_,
      BINExitZoneResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExitZoneResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINExitZoneResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINExitZoneResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_enter_5fzone_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINEnterZoneRequest_descriptor_, &BINEnterZoneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINRoomConfig_descriptor_, &BINRoomConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINEnterZoneResponse_descriptor_, &BINEnterZoneResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINExitZoneRequest_descriptor_, &BINExitZoneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINExitZoneResponse_descriptor_, &BINExitZoneResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_enter_5fzone_2eproto() {
  delete BINEnterZoneRequest::default_instance_;
  delete BINEnterZoneRequest_reflection_;
  delete BINRoomConfig::default_instance_;
  delete BINRoomConfig_reflection_;
  delete BINEnterZoneResponse::default_instance_;
  delete BINEnterZoneResponse_reflection_;
  delete BINExitZoneRequest::default_instance_;
  delete BINExitZoneRequest_reflection_;
  delete BINExitZoneResponse::default_instance_;
  delete BINExitZoneResponse_reflection_;
}

void protobuf_AddDesc_enter_5fzone_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020enter_zone.proto\"%\n\023BINEnterZoneReques"
    "t\022\016\n\006zoneId\030\001 \002(\005\"\322\001\n\rBINRoomConfig\022\023\n\013r"
    "oomGroupId\030\001 \002(\005\022\020\n\010roomName\030\002 \001(\t\022\017\n\007vi"
    "pRoom\030\003 \002(\010\022\017\n\007minCash\030\004 \002(\005\022\017\n\007minGold\030"
    "\005 \002(\005\022\020\n\010minLevel\030\006 \002(\005\022\024\n\014roomCapacity\030"
    "\007 \002(\005\022\022\n\nplayerSize\030\010 \002(\005\022\016\n\006minBet\030\t \002("
    "\005\022\013\n\003tax\030\n \002(\005\022\016\n\006active\030\013 \002(\010\"\256\001\n\024BINEn"
    "terZoneResponse\022\024\n\014responseCode\030\001 \002(\010\022\017\n"
    "\007message\030\002 \001(\t\022\035\n\025enableDisplayRoomList\030"
    "\003 \001(\010\022\'\n\017cashRoomConfigs\030\004 \003(\0132\016.BINRoom"
    "Config\022\'\n\017goldRoomConfigs\030\005 \003(\0132\016.BINRoo"
    "mConfig\"$\n\022BINExitZoneRequest\022\016\n\006zoneId\030"
    "\001 \002(\005\"<\n\023BINExitZoneResponse\022\024\n\014response"
    "Code\030\001 \002(\010\022\017\n\007message\030\002 \001(\tB\036\n\034com.mi.ga"
    "me.network.data.bin", 579);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "enter_zone.proto", &protobuf_RegisterTypes);
  BINEnterZoneRequest::default_instance_ = new BINEnterZoneRequest();
  BINRoomConfig::default_instance_ = new BINRoomConfig();
  BINEnterZoneResponse::default_instance_ = new BINEnterZoneResponse();
  BINExitZoneRequest::default_instance_ = new BINExitZoneRequest();
  BINExitZoneResponse::default_instance_ = new BINExitZoneResponse();
  BINEnterZoneRequest::default_instance_->InitAsDefaultInstance();
  BINRoomConfig::default_instance_->InitAsDefaultInstance();
  BINEnterZoneResponse::default_instance_->InitAsDefaultInstance();
  BINExitZoneRequest::default_instance_->InitAsDefaultInstance();
  BINExitZoneResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_enter_5fzone_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_enter_5fzone_2eproto {
  StaticDescriptorInitializer_enter_5fzone_2eproto() {
    protobuf_AddDesc_enter_5fzone_2eproto();
  }
} static_descriptor_initializer_enter_5fzone_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINEnterZoneRequest::kZoneIdFieldNumber;
#endif  // !_MSC_VER

BINEnterZoneRequest::BINEnterZoneRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINEnterZoneRequest::InitAsDefaultInstance() {
}

BINEnterZoneRequest::BINEnterZoneRequest(const BINEnterZoneRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINEnterZoneRequest::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINEnterZoneRequest::~BINEnterZoneRequest() {
  SharedDtor();
}

void BINEnterZoneRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINEnterZoneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINEnterZoneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINEnterZoneRequest_descriptor_;
}

const BINEnterZoneRequest& BINEnterZoneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_enter_5fzone_2eproto();
  return *default_instance_;
}

BINEnterZoneRequest* BINEnterZoneRequest::default_instance_ = NULL;

BINEnterZoneRequest* BINEnterZoneRequest::New() const {
  return new BINEnterZoneRequest;
}

void BINEnterZoneRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINEnterZoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 zoneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINEnterZoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 zoneId = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINEnterZoneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 zoneId = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINEnterZoneRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 zoneId = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINEnterZoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINEnterZoneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINEnterZoneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINEnterZoneRequest::MergeFrom(const BINEnterZoneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINEnterZoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINEnterZoneRequest::CopyFrom(const BINEnterZoneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINEnterZoneRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINEnterZoneRequest::Swap(BINEnterZoneRequest* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINEnterZoneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINEnterZoneRequest_descriptor_;
  metadata.reflection = BINEnterZoneRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINRoomConfig::kRoomGroupIdFieldNumber;
const int BINRoomConfig::kRoomNameFieldNumber;
const int BINRoomConfig::kVipRoomFieldNumber;
const int BINRoomConfig::kMinCashFieldNumber;
const int BINRoomConfig::kMinGoldFieldNumber;
const int BINRoomConfig::kMinLevelFieldNumber;
const int BINRoomConfig::kRoomCapacityFieldNumber;
const int BINRoomConfig::kPlayerSizeFieldNumber;
const int BINRoomConfig::kMinBetFieldNumber;
const int BINRoomConfig::kTaxFieldNumber;
const int BINRoomConfig::kActiveFieldNumber;
#endif  // !_MSC_VER

BINRoomConfig::BINRoomConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINRoomConfig::InitAsDefaultInstance() {
}

BINRoomConfig::BINRoomConfig(const BINRoomConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINRoomConfig::SharedCtor() {
  _cached_size_ = 0;
  roomgroupid_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viproom_ = false;
  mincash_ = 0;
  mingold_ = 0;
  minlevel_ = 0;
  roomcapacity_ = 0;
  playersize_ = 0;
  minbet_ = 0;
  tax_ = 0;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINRoomConfig::~BINRoomConfig() {
  SharedDtor();
}

void BINRoomConfig::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (this != default_instance_) {
  }
}

void BINRoomConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINRoomConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINRoomConfig_descriptor_;
}

const BINRoomConfig& BINRoomConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_enter_5fzone_2eproto();
  return *default_instance_;
}

BINRoomConfig* BINRoomConfig::default_instance_ = NULL;

BINRoomConfig* BINRoomConfig::New() const {
  return new BINRoomConfig;
}

void BINRoomConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomgroupid_ = 0;
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
    viproom_ = false;
    mincash_ = 0;
    mingold_ = 0;
    minlevel_ = 0;
    roomcapacity_ = 0;
    playersize_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    minbet_ = 0;
    tax_ = 0;
    active_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINRoomConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomGroupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomgroupid_)));
          set_has_roomgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomName;
        break;
      }

      // optional string roomName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vipRoom;
        break;
      }

      // required bool vipRoom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &viproom_)));
          set_has_viproom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_minCash;
        break;
      }

      // required int32 minCash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mincash_)));
          set_has_mincash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minGold;
        break;
      }

      // required int32 minGold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mingold_)));
          set_has_mingold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_minLevel;
        break;
      }

      // required int32 minLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlevel_)));
          set_has_minlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roomCapacity;
        break;
      }

      // required int32 roomCapacity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomcapacity_)));
          set_has_roomcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_playerSize;
        break;
      }

      // required int32 playerSize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playersize_)));
          set_has_playersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_minBet;
        break;
      }

      // required int32 minBet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minbet_)));
          set_has_minbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tax;
        break;
      }

      // required int32 tax = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_active;
        break;
      }

      // required bool active = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINRoomConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomGroupId = 1;
  if (has_roomgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomgroupid(), output);
  }

  // optional string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomname(), output);
  }

  // required bool vipRoom = 3;
  if (has_viproom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->viproom(), output);
  }

  // required int32 minCash = 4;
  if (has_mincash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mincash(), output);
  }

  // required int32 minGold = 5;
  if (has_mingold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mingold(), output);
  }

  // required int32 minLevel = 6;
  if (has_minlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->minlevel(), output);
  }

  // required int32 roomCapacity = 7;
  if (has_roomcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->roomcapacity(), output);
  }

  // required int32 playerSize = 8;
  if (has_playersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->playersize(), output);
  }

  // required int32 minBet = 9;
  if (has_minbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->minbet(), output);
  }

  // required int32 tax = 10;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tax(), output);
  }

  // required bool active = 11;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINRoomConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomGroupId = 1;
  if (has_roomgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomgroupid(), target);
  }

  // optional string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }

  // required bool vipRoom = 3;
  if (has_viproom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->viproom(), target);
  }

  // required int32 minCash = 4;
  if (has_mincash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mincash(), target);
  }

  // required int32 minGold = 5;
  if (has_mingold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mingold(), target);
  }

  // required int32 minLevel = 6;
  if (has_minlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->minlevel(), target);
  }

  // required int32 roomCapacity = 7;
  if (has_roomcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->roomcapacity(), target);
  }

  // required int32 playerSize = 8;
  if (has_playersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->playersize(), target);
  }

  // required int32 minBet = 9;
  if (has_minbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->minbet(), target);
  }

  // required int32 tax = 10;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tax(), target);
  }

  // required bool active = 11;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINRoomConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomGroupId = 1;
    if (has_roomgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomgroupid());
    }

    // optional string roomName = 2;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // required bool vipRoom = 3;
    if (has_viproom()) {
      total_size += 1 + 1;
    }

    // required int32 minCash = 4;
    if (has_mincash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mincash());
    }

    // required int32 minGold = 5;
    if (has_mingold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mingold());
    }

    // required int32 minLevel = 6;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlevel());
    }

    // required int32 roomCapacity = 7;
    if (has_roomcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomcapacity());
    }

    // required int32 playerSize = 8;
    if (has_playersize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playersize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 minBet = 9;
    if (has_minbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minbet());
    }

    // required int32 tax = 10;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax());
    }

    // required bool active = 11;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINRoomConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINRoomConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINRoomConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINRoomConfig::MergeFrom(const BINRoomConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomgroupid()) {
      set_roomgroupid(from.roomgroupid());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_viproom()) {
      set_viproom(from.viproom());
    }
    if (from.has_mincash()) {
      set_mincash(from.mincash());
    }
    if (from.has_mingold()) {
      set_mingold(from.mingold());
    }
    if (from.has_minlevel()) {
      set_minlevel(from.minlevel());
    }
    if (from.has_roomcapacity()) {
      set_roomcapacity(from.roomcapacity());
    }
    if (from.has_playersize()) {
      set_playersize(from.playersize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_minbet()) {
      set_minbet(from.minbet());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINRoomConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINRoomConfig::CopyFrom(const BINRoomConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINRoomConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007fd) != 0x000007fd) return false;

  return true;
}

void BINRoomConfig::Swap(BINRoomConfig* other) {
  if (other != this) {
    std::swap(roomgroupid_, other->roomgroupid_);
    std::swap(roomname_, other->roomname_);
    std::swap(viproom_, other->viproom_);
    std::swap(mincash_, other->mincash_);
    std::swap(mingold_, other->mingold_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(roomcapacity_, other->roomcapacity_);
    std::swap(playersize_, other->playersize_);
    std::swap(minbet_, other->minbet_);
    std::swap(tax_, other->tax_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINRoomConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINRoomConfig_descriptor_;
  metadata.reflection = BINRoomConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINEnterZoneResponse::kResponseCodeFieldNumber;
const int BINEnterZoneResponse::kMessageFieldNumber;
const int BINEnterZoneResponse::kEnableDisplayRoomListFieldNumber;
const int BINEnterZoneResponse::kCashRoomConfigsFieldNumber;
const int BINEnterZoneResponse::kGoldRoomConfigsFieldNumber;
#endif  // !_MSC_VER

BINEnterZoneResponse::BINEnterZoneResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINEnterZoneResponse::InitAsDefaultInstance() {
}

BINEnterZoneResponse::BINEnterZoneResponse(const BINEnterZoneResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINEnterZoneResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enabledisplayroomlist_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINEnterZoneResponse::~BINEnterZoneResponse() {
  SharedDtor();
}

void BINEnterZoneResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINEnterZoneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINEnterZoneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINEnterZoneResponse_descriptor_;
}

const BINEnterZoneResponse& BINEnterZoneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_enter_5fzone_2eproto();
  return *default_instance_;
}

BINEnterZoneResponse* BINEnterZoneResponse::default_instance_ = NULL;

BINEnterZoneResponse* BINEnterZoneResponse::New() const {
  return new BINEnterZoneResponse;
}

void BINEnterZoneResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    enabledisplayroomlist_ = false;
  }
  cashroomconfigs_.Clear();
  goldroomconfigs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINEnterZoneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enableDisplayRoomList;
        break;
      }

      // optional bool enableDisplayRoomList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableDisplayRoomList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabledisplayroomlist_)));
          set_has_enabledisplayroomlist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cashRoomConfigs;
        break;
      }

      // repeated .BINRoomConfig cashRoomConfigs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cashRoomConfigs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cashroomconfigs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cashRoomConfigs;
        if (input->ExpectTag(42)) goto parse_goldRoomConfigs;
        break;
      }

      // repeated .BINRoomConfig goldRoomConfigs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goldRoomConfigs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goldroomconfigs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_goldRoomConfigs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINEnterZoneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional bool enableDisplayRoomList = 3;
  if (has_enabledisplayroomlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabledisplayroomlist(), output);
  }

  // repeated .BINRoomConfig cashRoomConfigs = 4;
  for (int i = 0; i < this->cashroomconfigs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cashroomconfigs(i), output);
  }

  // repeated .BINRoomConfig goldRoomConfigs = 5;
  for (int i = 0; i < this->goldroomconfigs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->goldroomconfigs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINEnterZoneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional bool enableDisplayRoomList = 3;
  if (has_enabledisplayroomlist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enabledisplayroomlist(), target);
  }

  // repeated .BINRoomConfig cashRoomConfigs = 4;
  for (int i = 0; i < this->cashroomconfigs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cashroomconfigs(i), target);
  }

  // repeated .BINRoomConfig goldRoomConfigs = 5;
  for (int i = 0; i < this->goldroomconfigs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->goldroomconfigs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINEnterZoneResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bool enableDisplayRoomList = 3;
    if (has_enabledisplayroomlist()) {
      total_size += 1 + 1;
    }

  }
  // repeated .BINRoomConfig cashRoomConfigs = 4;
  total_size += 1 * this->cashroomconfigs_size();
  for (int i = 0; i < this->cashroomconfigs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cashroomconfigs(i));
  }

  // repeated .BINRoomConfig goldRoomConfigs = 5;
  total_size += 1 * this->goldroomconfigs_size();
  for (int i = 0; i < this->goldroomconfigs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goldroomconfigs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINEnterZoneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINEnterZoneResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINEnterZoneResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINEnterZoneResponse::MergeFrom(const BINEnterZoneResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  cashroomconfigs_.MergeFrom(from.cashroomconfigs_);
  goldroomconfigs_.MergeFrom(from.goldroomconfigs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_enabledisplayroomlist()) {
      set_enabledisplayroomlist(from.enabledisplayroomlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINEnterZoneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINEnterZoneResponse::CopyFrom(const BINEnterZoneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINEnterZoneResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < cashroomconfigs_size(); i++) {
    if (!this->cashroomconfigs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < goldroomconfigs_size(); i++) {
    if (!this->goldroomconfigs(i).IsInitialized()) return false;
  }
  return true;
}

void BINEnterZoneResponse::Swap(BINEnterZoneResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(enabledisplayroomlist_, other->enabledisplayroomlist_);
    cashroomconfigs_.Swap(&other->cashroomconfigs_);
    goldroomconfigs_.Swap(&other->goldroomconfigs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINEnterZoneResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINEnterZoneResponse_descriptor_;
  metadata.reflection = BINEnterZoneResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINExitZoneRequest::kZoneIdFieldNumber;
#endif  // !_MSC_VER

BINExitZoneRequest::BINExitZoneRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINExitZoneRequest::InitAsDefaultInstance() {
}

BINExitZoneRequest::BINExitZoneRequest(const BINExitZoneRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINExitZoneRequest::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINExitZoneRequest::~BINExitZoneRequest() {
  SharedDtor();
}

void BINExitZoneRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINExitZoneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINExitZoneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINExitZoneRequest_descriptor_;
}

const BINExitZoneRequest& BINExitZoneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_enter_5fzone_2eproto();
  return *default_instance_;
}

BINExitZoneRequest* BINExitZoneRequest::default_instance_ = NULL;

BINExitZoneRequest* BINExitZoneRequest::New() const {
  return new BINExitZoneRequest;
}

void BINExitZoneRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINExitZoneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 zoneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINExitZoneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 zoneId = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINExitZoneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 zoneId = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINExitZoneRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 zoneId = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINExitZoneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINExitZoneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINExitZoneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINExitZoneRequest::MergeFrom(const BINExitZoneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINExitZoneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINExitZoneRequest::CopyFrom(const BINExitZoneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINExitZoneRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINExitZoneRequest::Swap(BINExitZoneRequest* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINExitZoneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINExitZoneRequest_descriptor_;
  metadata.reflection = BINExitZoneRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINExitZoneResponse::kResponseCodeFieldNumber;
const int BINExitZoneResponse::kMessageFieldNumber;
#endif  // !_MSC_VER

BINExitZoneResponse::BINExitZoneResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINExitZoneResponse::InitAsDefaultInstance() {
}

BINExitZoneResponse::BINExitZoneResponse(const BINExitZoneResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINExitZoneResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINExitZoneResponse::~BINExitZoneResponse() {
  SharedDtor();
}

void BINExitZoneResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINExitZoneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINExitZoneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINExitZoneResponse_descriptor_;
}

const BINExitZoneResponse& BINExitZoneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_enter_5fzone_2eproto();
  return *default_instance_;
}

BINExitZoneResponse* BINExitZoneResponse::default_instance_ = NULL;

BINExitZoneResponse* BINExitZoneResponse::New() const {
  return new BINExitZoneResponse;
}

void BINExitZoneResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINExitZoneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINExitZoneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINExitZoneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINExitZoneResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINExitZoneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINExitZoneResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINExitZoneResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINExitZoneResponse::MergeFrom(const BINExitZoneResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINExitZoneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINExitZoneResponse::CopyFrom(const BINExitZoneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINExitZoneResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINExitZoneResponse::Swap(BINExitZoneResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINExitZoneResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINExitZoneResponse_descriptor_;
  metadata.reflection = BINExitZoneResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
