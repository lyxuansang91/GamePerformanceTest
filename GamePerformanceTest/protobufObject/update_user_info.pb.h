// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: update_user_info.proto

#ifndef PROTOBUF_update_5fuser_5finfo_2eproto__INCLUDED
#define PROTOBUF_update_5fuser_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_update_5fuser_5finfo_2eproto();
void protobuf_AssignDesc_update_5fuser_5finfo_2eproto();
void protobuf_ShutdownFile_update_5fuser_5finfo_2eproto();

class BINEditingInfo;
class BINUpdateUserInfoRequest;
class BINUpdateUserInfoResponse;

// ===================================================================

class BINEditingInfo : public ::google::protobuf::Message {
 public:
  BINEditingInfo();
  virtual ~BINEditingInfo();

  BINEditingInfo(const BINEditingInfo& from);

  inline BINEditingInfo& operator=(const BINEditingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINEditingInfo& default_instance();

  void Swap(BINEditingInfo* other);

  // implements Message ----------------------------------------------

  BINEditingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINEditingInfo& from);
  void MergeFrom(const BINEditingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 infoField = 1;
  inline bool has_infofield() const;
  inline void clear_infofield();
  static const int kInfoFieldFieldNumber = 1;
  inline ::google::protobuf::int32 infofield() const;
  inline void set_infofield(::google::protobuf::int32 value);

  // optional string oldValue = 2;
  inline bool has_oldvalue() const;
  inline void clear_oldvalue();
  static const int kOldValueFieldNumber = 2;
  inline const ::std::string& oldvalue() const;
  inline void set_oldvalue(const ::std::string& value);
  inline void set_oldvalue(const char* value);
  inline void set_oldvalue(const char* value, size_t size);
  inline ::std::string* mutable_oldvalue();
  inline ::std::string* release_oldvalue();
  inline void set_allocated_oldvalue(::std::string* oldvalue);

  // required string newValue = 3;
  inline bool has_newvalue() const;
  inline void clear_newvalue();
  static const int kNewValueFieldNumber = 3;
  inline const ::std::string& newvalue() const;
  inline void set_newvalue(const ::std::string& value);
  inline void set_newvalue(const char* value);
  inline void set_newvalue(const char* value, size_t size);
  inline ::std::string* mutable_newvalue();
  inline ::std::string* release_newvalue();
  inline void set_allocated_newvalue(::std::string* newvalue);

  // optional string confirmValue = 4;
  inline bool has_confirmvalue() const;
  inline void clear_confirmvalue();
  static const int kConfirmValueFieldNumber = 4;
  inline const ::std::string& confirmvalue() const;
  inline void set_confirmvalue(const ::std::string& value);
  inline void set_confirmvalue(const char* value);
  inline void set_confirmvalue(const char* value, size_t size);
  inline ::std::string* mutable_confirmvalue();
  inline ::std::string* release_confirmvalue();
  inline void set_allocated_confirmvalue(::std::string* confirmvalue);

  // @@protoc_insertion_point(class_scope:BINEditingInfo)
 private:
  inline void set_has_infofield();
  inline void clear_has_infofield();
  inline void set_has_oldvalue();
  inline void clear_has_oldvalue();
  inline void set_has_newvalue();
  inline void clear_has_newvalue();
  inline void set_has_confirmvalue();
  inline void clear_has_confirmvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* oldvalue_;
  ::std::string* newvalue_;
  ::std::string* confirmvalue_;
  ::google::protobuf::int32 infofield_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_update_5fuser_5finfo_2eproto();
  friend void protobuf_AssignDesc_update_5fuser_5finfo_2eproto();
  friend void protobuf_ShutdownFile_update_5fuser_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BINEditingInfo* default_instance_;
};
// -------------------------------------------------------------------

class BINUpdateUserInfoRequest : public ::google::protobuf::Message {
 public:
  BINUpdateUserInfoRequest();
  virtual ~BINUpdateUserInfoRequest();

  BINUpdateUserInfoRequest(const BINUpdateUserInfoRequest& from);

  inline BINUpdateUserInfoRequest& operator=(const BINUpdateUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINUpdateUserInfoRequest& default_instance();

  void Swap(BINUpdateUserInfoRequest* other);

  // implements Message ----------------------------------------------

  BINUpdateUserInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINUpdateUserInfoRequest& from);
  void MergeFrom(const BINUpdateUserInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BINEditingInfo userInfos = 1;
  inline int userinfos_size() const;
  inline void clear_userinfos();
  static const int kUserInfosFieldNumber = 1;
  inline const ::BINEditingInfo& userinfos(int index) const;
  inline ::BINEditingInfo* mutable_userinfos(int index);
  inline ::BINEditingInfo* add_userinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::BINEditingInfo >&
      userinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINEditingInfo >*
      mutable_userinfos();

  // @@protoc_insertion_point(class_scope:BINUpdateUserInfoRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::BINEditingInfo > userinfos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_update_5fuser_5finfo_2eproto();
  friend void protobuf_AssignDesc_update_5fuser_5finfo_2eproto();
  friend void protobuf_ShutdownFile_update_5fuser_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BINUpdateUserInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINUpdateUserInfoResponse : public ::google::protobuf::Message {
 public:
  BINUpdateUserInfoResponse();
  virtual ~BINUpdateUserInfoResponse();

  BINUpdateUserInfoResponse(const BINUpdateUserInfoResponse& from);

  inline BINUpdateUserInfoResponse& operator=(const BINUpdateUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINUpdateUserInfoResponse& default_instance();

  void Swap(BINUpdateUserInfoResponse* other);

  // implements Message ----------------------------------------------

  BINUpdateUserInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINUpdateUserInfoResponse& from);
  void MergeFrom(const BINUpdateUserInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:BINUpdateUserInfoResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_update_5fuser_5finfo_2eproto();
  friend void protobuf_AssignDesc_update_5fuser_5finfo_2eproto();
  friend void protobuf_ShutdownFile_update_5fuser_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BINUpdateUserInfoResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINEditingInfo

// required int32 infoField = 1;
inline bool BINEditingInfo::has_infofield() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINEditingInfo::set_has_infofield() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINEditingInfo::clear_has_infofield() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINEditingInfo::clear_infofield() {
  infofield_ = 0;
  clear_has_infofield();
}
inline ::google::protobuf::int32 BINEditingInfo::infofield() const {
  return infofield_;
}
inline void BINEditingInfo::set_infofield(::google::protobuf::int32 value) {
  set_has_infofield();
  infofield_ = value;
}

// optional string oldValue = 2;
inline bool BINEditingInfo::has_oldvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINEditingInfo::set_has_oldvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINEditingInfo::clear_has_oldvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINEditingInfo::clear_oldvalue() {
  if (oldvalue_ != &::google::protobuf::internal::kEmptyString) {
    oldvalue_->clear();
  }
  clear_has_oldvalue();
}
inline const ::std::string& BINEditingInfo::oldvalue() const {
  return *oldvalue_;
}
inline void BINEditingInfo::set_oldvalue(const ::std::string& value) {
  set_has_oldvalue();
  if (oldvalue_ == &::google::protobuf::internal::kEmptyString) {
    oldvalue_ = new ::std::string;
  }
  oldvalue_->assign(value);
}
inline void BINEditingInfo::set_oldvalue(const char* value) {
  set_has_oldvalue();
  if (oldvalue_ == &::google::protobuf::internal::kEmptyString) {
    oldvalue_ = new ::std::string;
  }
  oldvalue_->assign(value);
}
inline void BINEditingInfo::set_oldvalue(const char* value, size_t size) {
  set_has_oldvalue();
  if (oldvalue_ == &::google::protobuf::internal::kEmptyString) {
    oldvalue_ = new ::std::string;
  }
  oldvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINEditingInfo::mutable_oldvalue() {
  set_has_oldvalue();
  if (oldvalue_ == &::google::protobuf::internal::kEmptyString) {
    oldvalue_ = new ::std::string;
  }
  return oldvalue_;
}
inline ::std::string* BINEditingInfo::release_oldvalue() {
  clear_has_oldvalue();
  if (oldvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldvalue_;
    oldvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINEditingInfo::set_allocated_oldvalue(::std::string* oldvalue) {
  if (oldvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete oldvalue_;
  }
  if (oldvalue) {
    set_has_oldvalue();
    oldvalue_ = oldvalue;
  } else {
    clear_has_oldvalue();
    oldvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string newValue = 3;
inline bool BINEditingInfo::has_newvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINEditingInfo::set_has_newvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINEditingInfo::clear_has_newvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINEditingInfo::clear_newvalue() {
  if (newvalue_ != &::google::protobuf::internal::kEmptyString) {
    newvalue_->clear();
  }
  clear_has_newvalue();
}
inline const ::std::string& BINEditingInfo::newvalue() const {
  return *newvalue_;
}
inline void BINEditingInfo::set_newvalue(const ::std::string& value) {
  set_has_newvalue();
  if (newvalue_ == &::google::protobuf::internal::kEmptyString) {
    newvalue_ = new ::std::string;
  }
  newvalue_->assign(value);
}
inline void BINEditingInfo::set_newvalue(const char* value) {
  set_has_newvalue();
  if (newvalue_ == &::google::protobuf::internal::kEmptyString) {
    newvalue_ = new ::std::string;
  }
  newvalue_->assign(value);
}
inline void BINEditingInfo::set_newvalue(const char* value, size_t size) {
  set_has_newvalue();
  if (newvalue_ == &::google::protobuf::internal::kEmptyString) {
    newvalue_ = new ::std::string;
  }
  newvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINEditingInfo::mutable_newvalue() {
  set_has_newvalue();
  if (newvalue_ == &::google::protobuf::internal::kEmptyString) {
    newvalue_ = new ::std::string;
  }
  return newvalue_;
}
inline ::std::string* BINEditingInfo::release_newvalue() {
  clear_has_newvalue();
  if (newvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newvalue_;
    newvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINEditingInfo::set_allocated_newvalue(::std::string* newvalue) {
  if (newvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete newvalue_;
  }
  if (newvalue) {
    set_has_newvalue();
    newvalue_ = newvalue;
  } else {
    clear_has_newvalue();
    newvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string confirmValue = 4;
inline bool BINEditingInfo::has_confirmvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINEditingInfo::set_has_confirmvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINEditingInfo::clear_has_confirmvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINEditingInfo::clear_confirmvalue() {
  if (confirmvalue_ != &::google::protobuf::internal::kEmptyString) {
    confirmvalue_->clear();
  }
  clear_has_confirmvalue();
}
inline const ::std::string& BINEditingInfo::confirmvalue() const {
  return *confirmvalue_;
}
inline void BINEditingInfo::set_confirmvalue(const ::std::string& value) {
  set_has_confirmvalue();
  if (confirmvalue_ == &::google::protobuf::internal::kEmptyString) {
    confirmvalue_ = new ::std::string;
  }
  confirmvalue_->assign(value);
}
inline void BINEditingInfo::set_confirmvalue(const char* value) {
  set_has_confirmvalue();
  if (confirmvalue_ == &::google::protobuf::internal::kEmptyString) {
    confirmvalue_ = new ::std::string;
  }
  confirmvalue_->assign(value);
}
inline void BINEditingInfo::set_confirmvalue(const char* value, size_t size) {
  set_has_confirmvalue();
  if (confirmvalue_ == &::google::protobuf::internal::kEmptyString) {
    confirmvalue_ = new ::std::string;
  }
  confirmvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINEditingInfo::mutable_confirmvalue() {
  set_has_confirmvalue();
  if (confirmvalue_ == &::google::protobuf::internal::kEmptyString) {
    confirmvalue_ = new ::std::string;
  }
  return confirmvalue_;
}
inline ::std::string* BINEditingInfo::release_confirmvalue() {
  clear_has_confirmvalue();
  if (confirmvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = confirmvalue_;
    confirmvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINEditingInfo::set_allocated_confirmvalue(::std::string* confirmvalue) {
  if (confirmvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete confirmvalue_;
  }
  if (confirmvalue) {
    set_has_confirmvalue();
    confirmvalue_ = confirmvalue;
  } else {
    clear_has_confirmvalue();
    confirmvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BINUpdateUserInfoRequest

// repeated .BINEditingInfo userInfos = 1;
inline int BINUpdateUserInfoRequest::userinfos_size() const {
  return userinfos_.size();
}
inline void BINUpdateUserInfoRequest::clear_userinfos() {
  userinfos_.Clear();
}
inline const ::BINEditingInfo& BINUpdateUserInfoRequest::userinfos(int index) const {
  return userinfos_.Get(index);
}
inline ::BINEditingInfo* BINUpdateUserInfoRequest::mutable_userinfos(int index) {
  return userinfos_.Mutable(index);
}
inline ::BINEditingInfo* BINUpdateUserInfoRequest::add_userinfos() {
  return userinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINEditingInfo >&
BINUpdateUserInfoRequest::userinfos() const {
  return userinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINEditingInfo >*
BINUpdateUserInfoRequest::mutable_userinfos() {
  return &userinfos_;
}

// -------------------------------------------------------------------

// BINUpdateUserInfoResponse

// required bool responseCode = 1;
inline bool BINUpdateUserInfoResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINUpdateUserInfoResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINUpdateUserInfoResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINUpdateUserInfoResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINUpdateUserInfoResponse::responsecode() const {
  return responsecode_;
}
inline void BINUpdateUserInfoResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINUpdateUserInfoResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINUpdateUserInfoResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINUpdateUserInfoResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINUpdateUserInfoResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINUpdateUserInfoResponse::message() const {
  return *message_;
}
inline void BINUpdateUserInfoResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINUpdateUserInfoResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINUpdateUserInfoResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINUpdateUserInfoResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINUpdateUserInfoResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINUpdateUserInfoResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_update_5fuser_5finfo_2eproto__INCLUDED
