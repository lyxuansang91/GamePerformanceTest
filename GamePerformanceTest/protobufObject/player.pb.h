// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_player_2eproto__INCLUDED
#define PROTOBUF_player_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "map_field_entry.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_player_2eproto();
void protobuf_AssignDesc_player_2eproto();
void protobuf_ShutdownFile_player_2eproto();

class BINPlayer;

// ===================================================================

class BINPlayer : public ::google::protobuf::Message {
 public:
  BINPlayer();
  virtual ~BINPlayer();

  BINPlayer(const BINPlayer& from);

  inline BINPlayer& operator=(const BINPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINPlayer& default_instance();

  void Swap(BINPlayer* other);

  // implements Message ----------------------------------------------

  BINPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINPlayer& from);
  void MergeFrom(const BINPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional string userName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string displayName = 3;
  inline bool has_displayname() const;
  inline void clear_displayname();
  static const int kDisplayNameFieldNumber = 3;
  inline const ::std::string& displayname() const;
  inline void set_displayname(const ::std::string& value);
  inline void set_displayname(const char* value);
  inline void set_displayname(const char* value, size_t size);
  inline ::std::string* mutable_displayname();
  inline ::std::string* release_displayname();
  inline void set_allocated_displayname(::std::string* displayname);

  // optional int32 avatarId = 4;
  inline bool has_avatarid() const;
  inline void clear_avatarid();
  static const int kAvatarIdFieldNumber = 4;
  inline ::google::protobuf::int32 avatarid() const;
  inline void set_avatarid(::google::protobuf::int32 value);

  // required int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int64 cash = 6;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 6;
  inline ::google::protobuf::int64 cash() const;
  inline void set_cash(::google::protobuf::int64 value);

  // required int64 gold = 7;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 7;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // required bool ready = 8;
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 8;
  inline bool ready() const;
  inline void set_ready(bool value);

  // required bool exitAfterMatchEnd = 9;
  inline bool has_exitaftermatchend() const;
  inline void clear_exitaftermatchend();
  static const int kExitAfterMatchEndFieldNumber = 9;
  inline bool exitaftermatchend() const;
  inline void set_exitaftermatchend(bool value);

  // required int32 tableIndex = 10;
  inline bool has_tableindex() const;
  inline void clear_tableindex();
  static const int kTableIndexFieldNumber = 10;
  inline ::google::protobuf::int32 tableindex() const;
  inline void set_tableindex(::google::protobuf::int32 value);

  // repeated .BINMapFieldEntry args = 11;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 11;
  inline const ::BINMapFieldEntry& args(int index) const;
  inline ::BINMapFieldEntry* mutable_args(int index);
  inline ::BINMapFieldEntry* add_args();
  inline const ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >&
      args() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >*
      mutable_args();

  // @@protoc_insertion_point(class_scope:BINPlayer)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_displayname();
  inline void clear_has_displayname();
  inline void set_has_avatarid();
  inline void clear_has_avatarid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_ready();
  inline void clear_has_ready();
  inline void set_has_exitaftermatchend();
  inline void clear_has_exitaftermatchend();
  inline void set_has_tableindex();
  inline void clear_has_tableindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid_;
  ::std::string* username_;
  ::std::string* displayname_;
  ::google::protobuf::int32 avatarid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 cash_;
  ::google::protobuf::int64 gold_;
  bool ready_;
  bool exitaftermatchend_;
  ::google::protobuf::int32 tableindex_;
  ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry > args_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_player_2eproto();
  friend void protobuf_AssignDesc_player_2eproto();
  friend void protobuf_ShutdownFile_player_2eproto();

  void InitAsDefaultInstance();
  static BINPlayer* default_instance_;
};
// ===================================================================


// ===================================================================

// BINPlayer

// required int64 userId = 1;
inline bool BINPlayer::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINPlayer::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINPlayer::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINPlayer::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 BINPlayer::userid() const {
  return userid_;
}
inline void BINPlayer::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string userName = 2;
inline bool BINPlayer::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINPlayer::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINPlayer::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINPlayer::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& BINPlayer::username() const {
  return *username_;
}
inline void BINPlayer::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BINPlayer::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BINPlayer::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINPlayer::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* BINPlayer::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINPlayer::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string displayName = 3;
inline bool BINPlayer::has_displayname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINPlayer::set_has_displayname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINPlayer::clear_has_displayname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINPlayer::clear_displayname() {
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    displayname_->clear();
  }
  clear_has_displayname();
}
inline const ::std::string& BINPlayer::displayname() const {
  return *displayname_;
}
inline void BINPlayer::set_displayname(const ::std::string& value) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
}
inline void BINPlayer::set_displayname(const char* value) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
}
inline void BINPlayer::set_displayname(const char* value, size_t size) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINPlayer::mutable_displayname() {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    displayname_ = new ::std::string;
  }
  return displayname_;
}
inline ::std::string* BINPlayer::release_displayname() {
  clear_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = displayname_;
    displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINPlayer::set_allocated_displayname(::std::string* displayname) {
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (displayname) {
    set_has_displayname();
    displayname_ = displayname;
  } else {
    clear_has_displayname();
    displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 avatarId = 4;
inline bool BINPlayer::has_avatarid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINPlayer::set_has_avatarid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINPlayer::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINPlayer::clear_avatarid() {
  avatarid_ = 0;
  clear_has_avatarid();
}
inline ::google::protobuf::int32 BINPlayer::avatarid() const {
  return avatarid_;
}
inline void BINPlayer::set_avatarid(::google::protobuf::int32 value) {
  set_has_avatarid();
  avatarid_ = value;
}

// required int32 level = 5;
inline bool BINPlayer::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINPlayer::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINPlayer::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINPlayer::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BINPlayer::level() const {
  return level_;
}
inline void BINPlayer::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int64 cash = 6;
inline bool BINPlayer::has_cash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINPlayer::set_has_cash() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINPlayer::clear_has_cash() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINPlayer::clear_cash() {
  cash_ = GOOGLE_LONGLONG(0);
  clear_has_cash();
}
inline ::google::protobuf::int64 BINPlayer::cash() const {
  return cash_;
}
inline void BINPlayer::set_cash(::google::protobuf::int64 value) {
  set_has_cash();
  cash_ = value;
}

// required int64 gold = 7;
inline bool BINPlayer::has_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BINPlayer::set_has_gold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BINPlayer::clear_has_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BINPlayer::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 BINPlayer::gold() const {
  return gold_;
}
inline void BINPlayer::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// required bool ready = 8;
inline bool BINPlayer::has_ready() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BINPlayer::set_has_ready() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BINPlayer::clear_has_ready() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BINPlayer::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
inline bool BINPlayer::ready() const {
  return ready_;
}
inline void BINPlayer::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
}

// required bool exitAfterMatchEnd = 9;
inline bool BINPlayer::has_exitaftermatchend() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BINPlayer::set_has_exitaftermatchend() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BINPlayer::clear_has_exitaftermatchend() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BINPlayer::clear_exitaftermatchend() {
  exitaftermatchend_ = false;
  clear_has_exitaftermatchend();
}
inline bool BINPlayer::exitaftermatchend() const {
  return exitaftermatchend_;
}
inline void BINPlayer::set_exitaftermatchend(bool value) {
  set_has_exitaftermatchend();
  exitaftermatchend_ = value;
}

// required int32 tableIndex = 10;
inline bool BINPlayer::has_tableindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BINPlayer::set_has_tableindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BINPlayer::clear_has_tableindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BINPlayer::clear_tableindex() {
  tableindex_ = 0;
  clear_has_tableindex();
}
inline ::google::protobuf::int32 BINPlayer::tableindex() const {
  return tableindex_;
}
inline void BINPlayer::set_tableindex(::google::protobuf::int32 value) {
  set_has_tableindex();
  tableindex_ = value;
}

// repeated .BINMapFieldEntry args = 11;
inline int BINPlayer::args_size() const {
  return args_.size();
}
inline void BINPlayer::clear_args() {
  args_.Clear();
}
inline const ::BINMapFieldEntry& BINPlayer::args(int index) const {
  return args_.Get(index);
}
inline ::BINMapFieldEntry* BINPlayer::mutable_args(int index) {
  return args_.Mutable(index);
}
inline ::BINMapFieldEntry* BINPlayer::add_args() {
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >&
BINPlayer::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINMapFieldEntry >*
BINPlayer::mutable_args() {
  return &args_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_player_2eproto__INCLUDED
