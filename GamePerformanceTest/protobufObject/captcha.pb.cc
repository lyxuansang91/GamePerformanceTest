// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: captcha.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "captcha.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINCaptchaRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINCaptchaRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINCaptcha_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINCaptcha_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINCaptchaResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINCaptchaResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_captcha_2eproto() {
  protobuf_AddDesc_captcha_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "captcha.proto");
  GOOGLE_CHECK(file != NULL);
  BINCaptchaRequest_descriptor_ = file->message_type(0);
  static const int BINCaptchaRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCaptchaRequest, refresh_),
  };
  BINCaptchaRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINCaptchaRequest_descriptor_,
      BINCaptchaRequest::default_instance_,
      BINCaptchaRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCaptchaRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCaptchaRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINCaptchaRequest));
  BINCaptcha_descriptor_ = file->message_type(1);
  static const int BINCaptcha_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCaptcha, securitykey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCaptcha, captchachallenge_),
  };
  BINCaptcha_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINCaptcha_descriptor_,
      BINCaptcha::default_instance_,
      BINCaptcha_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCaptcha, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCaptcha, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINCaptcha));
  BINCaptchaResponse_descriptor_ = file->message_type(2);
  static const int BINCaptchaResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCaptchaResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCaptchaResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCaptchaResponse, captcha_),
  };
  BINCaptchaResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINCaptchaResponse_descriptor_,
      BINCaptchaResponse::default_instance_,
      BINCaptchaResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCaptchaResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCaptchaResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINCaptchaResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_captcha_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINCaptchaRequest_descriptor_, &BINCaptchaRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINCaptcha_descriptor_, &BINCaptcha::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINCaptchaResponse_descriptor_, &BINCaptchaResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_captcha_2eproto() {
  delete BINCaptchaRequest::default_instance_;
  delete BINCaptchaRequest_reflection_;
  delete BINCaptcha::default_instance_;
  delete BINCaptcha_reflection_;
  delete BINCaptchaResponse::default_instance_;
  delete BINCaptchaResponse_reflection_;
}

void protobuf_AddDesc_captcha_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcaptcha.proto\"$\n\021BINCaptchaRequest\022\017\n\007"
    "refresh\030\001 \001(\010\";\n\nBINCaptcha\022\023\n\013securityK"
    "ey\030\001 \002(\t\022\030\n\020captchaChallenge\030\002 \002(\t\"Y\n\022BI"
    "NCaptchaResponse\022\024\n\014responseCode\030\001 \002(\010\022\017"
    "\n\007message\030\002 \001(\t\022\034\n\007captcha\030\003 \001(\0132\013.BINCa"
    "ptchaB\036\n\034com.mi.game.network.data.bin", 237);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "captcha.proto", &protobuf_RegisterTypes);
  BINCaptchaRequest::default_instance_ = new BINCaptchaRequest();
  BINCaptcha::default_instance_ = new BINCaptcha();
  BINCaptchaResponse::default_instance_ = new BINCaptchaResponse();
  BINCaptchaRequest::default_instance_->InitAsDefaultInstance();
  BINCaptcha::default_instance_->InitAsDefaultInstance();
  BINCaptchaResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_captcha_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_captcha_2eproto {
  StaticDescriptorInitializer_captcha_2eproto() {
    protobuf_AddDesc_captcha_2eproto();
  }
} static_descriptor_initializer_captcha_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINCaptchaRequest::kRefreshFieldNumber;
#endif  // !_MSC_VER

BINCaptchaRequest::BINCaptchaRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINCaptchaRequest::InitAsDefaultInstance() {
}

BINCaptchaRequest::BINCaptchaRequest(const BINCaptchaRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINCaptchaRequest::SharedCtor() {
  _cached_size_ = 0;
  refresh_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINCaptchaRequest::~BINCaptchaRequest() {
  SharedDtor();
}

void BINCaptchaRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINCaptchaRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINCaptchaRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINCaptchaRequest_descriptor_;
}

const BINCaptchaRequest& BINCaptchaRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_captcha_2eproto();
  return *default_instance_;
}

BINCaptchaRequest* BINCaptchaRequest::default_instance_ = NULL;

BINCaptchaRequest* BINCaptchaRequest::New() const {
  return new BINCaptchaRequest;
}

void BINCaptchaRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refresh_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINCaptchaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool refresh = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refresh_)));
          set_has_refresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINCaptchaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool refresh = 1;
  if (has_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->refresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINCaptchaRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool refresh = 1;
  if (has_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->refresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINCaptchaRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool refresh = 1;
    if (has_refresh()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINCaptchaRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINCaptchaRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINCaptchaRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINCaptchaRequest::MergeFrom(const BINCaptchaRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refresh()) {
      set_refresh(from.refresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINCaptchaRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINCaptchaRequest::CopyFrom(const BINCaptchaRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINCaptchaRequest::IsInitialized() const {

  return true;
}

void BINCaptchaRequest::Swap(BINCaptchaRequest* other) {
  if (other != this) {
    std::swap(refresh_, other->refresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINCaptchaRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINCaptchaRequest_descriptor_;
  metadata.reflection = BINCaptchaRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINCaptcha::kSecurityKeyFieldNumber;
const int BINCaptcha::kCaptchaChallengeFieldNumber;
#endif  // !_MSC_VER

BINCaptcha::BINCaptcha()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINCaptcha::InitAsDefaultInstance() {
}

BINCaptcha::BINCaptcha(const BINCaptcha& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINCaptcha::SharedCtor() {
  _cached_size_ = 0;
  securitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  captchachallenge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINCaptcha::~BINCaptcha() {
  SharedDtor();
}

void BINCaptcha::SharedDtor() {
  if (securitykey_ != &::google::protobuf::internal::kEmptyString) {
    delete securitykey_;
  }
  if (captchachallenge_ != &::google::protobuf::internal::kEmptyString) {
    delete captchachallenge_;
  }
  if (this != default_instance_) {
  }
}

void BINCaptcha::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINCaptcha::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINCaptcha_descriptor_;
}

const BINCaptcha& BINCaptcha::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_captcha_2eproto();
  return *default_instance_;
}

BINCaptcha* BINCaptcha::default_instance_ = NULL;

BINCaptcha* BINCaptcha::New() const {
  return new BINCaptcha;
}

void BINCaptcha::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_securitykey()) {
      if (securitykey_ != &::google::protobuf::internal::kEmptyString) {
        securitykey_->clear();
      }
    }
    if (has_captchachallenge()) {
      if (captchachallenge_ != &::google::protobuf::internal::kEmptyString) {
        captchachallenge_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINCaptcha::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string securityKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitykey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->securitykey().data(), this->securitykey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_captchaChallenge;
        break;
      }

      // required string captchaChallenge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_captchaChallenge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captchachallenge()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->captchachallenge().data(), this->captchachallenge().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINCaptcha::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string securityKey = 1;
  if (has_securitykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securitykey().data(), this->securitykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->securitykey(), output);
  }

  // required string captchaChallenge = 2;
  if (has_captchachallenge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->captchachallenge().data(), this->captchachallenge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->captchachallenge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINCaptcha::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string securityKey = 1;
  if (has_securitykey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securitykey().data(), this->securitykey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->securitykey(), target);
  }

  // required string captchaChallenge = 2;
  if (has_captchachallenge()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->captchachallenge().data(), this->captchachallenge().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->captchachallenge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINCaptcha::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string securityKey = 1;
    if (has_securitykey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securitykey());
    }

    // required string captchaChallenge = 2;
    if (has_captchachallenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->captchachallenge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINCaptcha::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINCaptcha* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINCaptcha*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINCaptcha::MergeFrom(const BINCaptcha& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_securitykey()) {
      set_securitykey(from.securitykey());
    }
    if (from.has_captchachallenge()) {
      set_captchachallenge(from.captchachallenge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINCaptcha::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINCaptcha::CopyFrom(const BINCaptcha& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINCaptcha::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BINCaptcha::Swap(BINCaptcha* other) {
  if (other != this) {
    std::swap(securitykey_, other->securitykey_);
    std::swap(captchachallenge_, other->captchachallenge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINCaptcha::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINCaptcha_descriptor_;
  metadata.reflection = BINCaptcha_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINCaptchaResponse::kResponseCodeFieldNumber;
const int BINCaptchaResponse::kMessageFieldNumber;
const int BINCaptchaResponse::kCaptchaFieldNumber;
#endif  // !_MSC_VER

BINCaptchaResponse::BINCaptchaResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINCaptchaResponse::InitAsDefaultInstance() {
  captcha_ = const_cast< ::BINCaptcha*>(&::BINCaptcha::default_instance());
}

BINCaptchaResponse::BINCaptchaResponse(const BINCaptchaResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINCaptchaResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  captcha_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINCaptchaResponse::~BINCaptchaResponse() {
  SharedDtor();
}

void BINCaptchaResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
    delete captcha_;
  }
}

void BINCaptchaResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINCaptchaResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINCaptchaResponse_descriptor_;
}

const BINCaptchaResponse& BINCaptchaResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_captcha_2eproto();
  return *default_instance_;
}

BINCaptchaResponse* BINCaptchaResponse::default_instance_ = NULL;

BINCaptchaResponse* BINCaptchaResponse::New() const {
  return new BINCaptchaResponse;
}

void BINCaptchaResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_captcha()) {
      if (captcha_ != NULL) captcha_->::BINCaptcha::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINCaptchaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_captcha;
        break;
      }

      // optional .BINCaptcha captcha = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_captcha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_captcha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINCaptchaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional .BINCaptcha captcha = 3;
  if (has_captcha()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->captcha(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINCaptchaResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional .BINCaptcha captcha = 3;
  if (has_captcha()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->captcha(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINCaptchaResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .BINCaptcha captcha = 3;
    if (has_captcha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->captcha());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINCaptchaResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINCaptchaResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINCaptchaResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINCaptchaResponse::MergeFrom(const BINCaptchaResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_captcha()) {
      mutable_captcha()->::BINCaptcha::MergeFrom(from.captcha());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINCaptchaResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINCaptchaResponse::CopyFrom(const BINCaptchaResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINCaptchaResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_captcha()) {
    if (!this->captcha().IsInitialized()) return false;
  }
  return true;
}

void BINCaptchaResponse::Swap(BINCaptchaResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(captcha_, other->captcha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINCaptchaResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINCaptchaResponse_descriptor_;
  metadata.reflection = BINCaptchaResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
