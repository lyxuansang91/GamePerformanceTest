// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_info.proto

#ifndef PROTOBUF_user_5finfo_2eproto__INCLUDED
#define PROTOBUF_user_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "level.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_user_5finfo_2eproto();
void protobuf_AssignDesc_user_5finfo_2eproto();
void protobuf_ShutdownFile_user_5finfo_2eproto();

class BINUserInfo;
class BINUserSetting;

// ===================================================================

class BINUserInfo : public ::google::protobuf::Message {
 public:
  BINUserInfo();
  virtual ~BINUserInfo();

  BINUserInfo(const BINUserInfo& from);

  inline BINUserInfo& operator=(const BINUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINUserInfo& default_instance();

  void Swap(BINUserInfo* other);

  // implements Message ----------------------------------------------

  BINUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINUserInfo& from);
  void MergeFrom(const BINUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // required string userName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string displayName = 3;
  inline bool has_displayname() const;
  inline void clear_displayname();
  static const int kDisplayNameFieldNumber = 3;
  inline const ::std::string& displayname() const;
  inline void set_displayname(const ::std::string& value);
  inline void set_displayname(const char* value);
  inline void set_displayname(const char* value, size_t size);
  inline ::std::string* mutable_displayname();
  inline ::std::string* release_displayname();
  inline void set_allocated_displayname(::std::string* displayname);

  // optional int32 avatarId = 4;
  inline bool has_avatarid() const;
  inline void clear_avatarid();
  static const int kAvatarIdFieldNumber = 4;
  inline ::google::protobuf::int32 avatarid() const;
  inline void set_avatarid(::google::protobuf::int32 value);

  // optional int32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 age = 6;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 6;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // optional .BINLevel level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline const ::BINLevel& level() const;
  inline ::BINLevel* mutable_level();
  inline ::BINLevel* release_level();
  inline void set_allocated_level(::BINLevel* level);

  // optional .BINMedal medal = 8;
  inline bool has_medal() const;
  inline void clear_medal();
  static const int kMedalFieldNumber = 8;
  inline const ::BINMedal& medal() const;
  inline ::BINMedal* mutable_medal();
  inline ::BINMedal* release_medal();
  inline void set_allocated_medal(::BINMedal* medal);

  // optional int32 trustedIndex = 9;
  inline bool has_trustedindex() const;
  inline void clear_trustedindex();
  static const int kTrustedIndexFieldNumber = 9;
  inline ::google::protobuf::int32 trustedindex() const;
  inline void set_trustedindex(::google::protobuf::int32 value);

  // optional int64 exp = 10;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 10;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional int64 cash = 11;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 11;
  inline ::google::protobuf::int64 cash() const;
  inline void set_cash(::google::protobuf::int64 value);

  // optional int64 gold = 12;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 12;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int32 totalMatch = 13;
  inline bool has_totalmatch() const;
  inline void clear_totalmatch();
  static const int kTotalMatchFieldNumber = 13;
  inline ::google::protobuf::int32 totalmatch() const;
  inline void set_totalmatch(::google::protobuf::int32 value);

  // optional int32 totalWin = 14;
  inline bool has_totalwin() const;
  inline void clear_totalwin();
  static const int kTotalWinFieldNumber = 14;
  inline ::google::protobuf::int32 totalwin() const;
  inline void set_totalwin(::google::protobuf::int32 value);

  // optional int64 lastLoginTime = 15;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 15;
  inline ::google::protobuf::int64 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::int64 value);

  // optional bool isOnline = 16;
  inline bool has_isonline() const;
  inline void clear_isonline();
  static const int kIsOnlineFieldNumber = 16;
  inline bool isonline() const;
  inline void set_isonline(bool value);

  // optional int32 userType = 17;
  inline bool has_usertype() const;
  inline void clear_usertype();
  static const int kUserTypeFieldNumber = 17;
  inline ::google::protobuf::int32 usertype() const;
  inline void set_usertype(::google::protobuf::int32 value);

  // optional string email = 18;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 18;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional string mobile = 19;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 19;
  inline const ::std::string& mobile() const;
  inline void set_mobile(const ::std::string& value);
  inline void set_mobile(const char* value);
  inline void set_mobile(const char* value, size_t size);
  inline ::std::string* mutable_mobile();
  inline ::std::string* release_mobile();
  inline void set_allocated_mobile(::std::string* mobile);

  // optional string identity = 20;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 20;
  inline const ::std::string& identity() const;
  inline void set_identity(const ::std::string& value);
  inline void set_identity(const char* value);
  inline void set_identity(const char* value, size_t size);
  inline ::std::string* mutable_identity();
  inline ::std::string* release_identity();
  inline void set_allocated_identity(::std::string* identity);

  // @@protoc_insertion_point(class_scope:BINUserInfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_displayname();
  inline void clear_has_displayname();
  inline void set_has_avatarid();
  inline void clear_has_avatarid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_medal();
  inline void clear_has_medal();
  inline void set_has_trustedindex();
  inline void clear_has_trustedindex();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_totalmatch();
  inline void clear_has_totalmatch();
  inline void set_has_totalwin();
  inline void clear_has_totalwin();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_isonline();
  inline void clear_has_isonline();
  inline void set_has_usertype();
  inline void clear_has_usertype();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_mobile();
  inline void clear_has_mobile();
  inline void set_has_identity();
  inline void clear_has_identity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid_;
  ::std::string* username_;
  ::std::string* displayname_;
  ::google::protobuf::int32 avatarid_;
  ::google::protobuf::int32 sex_;
  ::BINLevel* level_;
  ::google::protobuf::int32 age_;
  ::google::protobuf::int32 trustedindex_;
  ::BINMedal* medal_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int64 cash_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int32 totalmatch_;
  ::google::protobuf::int32 totalwin_;
  ::google::protobuf::int64 lastlogintime_;
  bool isonline_;
  ::google::protobuf::int32 usertype_;
  ::std::string* email_;
  ::std::string* mobile_;
  ::std::string* identity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_user_5finfo_2eproto();
  friend void protobuf_AssignDesc_user_5finfo_2eproto();
  friend void protobuf_ShutdownFile_user_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BINUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class BINUserSetting : public ::google::protobuf::Message {
 public:
  BINUserSetting();
  virtual ~BINUserSetting();

  BINUserSetting(const BINUserSetting& from);

  inline BINUserSetting& operator=(const BINUserSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINUserSetting& default_instance();

  void Swap(BINUserSetting* other);

  // implements Message ----------------------------------------------

  BINUserSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINUserSetting& from);
  void MergeFrom(const BINUserSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional bool autoReady = 2;
  inline bool has_autoready() const;
  inline void clear_autoready();
  static const int kAutoReadyFieldNumber = 2;
  inline bool autoready() const;
  inline void set_autoready(bool value);

  // optional bool autoDenyInvitation = 3;
  inline bool has_autodenyinvitation() const;
  inline void clear_autodenyinvitation();
  static const int kAutoDenyInvitationFieldNumber = 3;
  inline bool autodenyinvitation() const;
  inline void set_autodenyinvitation(bool value);

  // @@protoc_insertion_point(class_scope:BINUserSetting)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_autoready();
  inline void clear_has_autoready();
  inline void set_has_autodenyinvitation();
  inline void clear_has_autodenyinvitation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid_;
  bool autoready_;
  bool autodenyinvitation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_user_5finfo_2eproto();
  friend void protobuf_AssignDesc_user_5finfo_2eproto();
  friend void protobuf_ShutdownFile_user_5finfo_2eproto();

  void InitAsDefaultInstance();
  static BINUserSetting* default_instance_;
};
// ===================================================================


// ===================================================================

// BINUserInfo

// required int64 userId = 1;
inline bool BINUserInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINUserInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINUserInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINUserInfo::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 BINUserInfo::userid() const {
  return userid_;
}
inline void BINUserInfo::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// required string userName = 2;
inline bool BINUserInfo::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINUserInfo::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINUserInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINUserInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& BINUserInfo::username() const {
  return *username_;
}
inline void BINUserInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BINUserInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BINUserInfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINUserInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* BINUserInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINUserInfo::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string displayName = 3;
inline bool BINUserInfo::has_displayname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINUserInfo::set_has_displayname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINUserInfo::clear_has_displayname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINUserInfo::clear_displayname() {
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    displayname_->clear();
  }
  clear_has_displayname();
}
inline const ::std::string& BINUserInfo::displayname() const {
  return *displayname_;
}
inline void BINUserInfo::set_displayname(const ::std::string& value) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
}
inline void BINUserInfo::set_displayname(const char* value) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
}
inline void BINUserInfo::set_displayname(const char* value, size_t size) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINUserInfo::mutable_displayname() {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    displayname_ = new ::std::string;
  }
  return displayname_;
}
inline ::std::string* BINUserInfo::release_displayname() {
  clear_has_displayname();
  if (displayname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = displayname_;
    displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINUserInfo::set_allocated_displayname(::std::string* displayname) {
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (displayname) {
    set_has_displayname();
    displayname_ = displayname;
  } else {
    clear_has_displayname();
    displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 avatarId = 4;
inline bool BINUserInfo::has_avatarid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINUserInfo::set_has_avatarid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINUserInfo::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINUserInfo::clear_avatarid() {
  avatarid_ = 0;
  clear_has_avatarid();
}
inline ::google::protobuf::int32 BINUserInfo::avatarid() const {
  return avatarid_;
}
inline void BINUserInfo::set_avatarid(::google::protobuf::int32 value) {
  set_has_avatarid();
  avatarid_ = value;
}

// optional int32 sex = 5;
inline bool BINUserInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINUserInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINUserInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINUserInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 BINUserInfo::sex() const {
  return sex_;
}
inline void BINUserInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 age = 6;
inline bool BINUserInfo::has_age() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINUserInfo::set_has_age() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINUserInfo::clear_has_age() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINUserInfo::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 BINUserInfo::age() const {
  return age_;
}
inline void BINUserInfo::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
}

// optional .BINLevel level = 7;
inline bool BINUserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BINUserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BINUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BINUserInfo::clear_level() {
  if (level_ != NULL) level_->::BINLevel::Clear();
  clear_has_level();
}
inline const ::BINLevel& BINUserInfo::level() const {
  return level_ != NULL ? *level_ : *default_instance_->level_;
}
inline ::BINLevel* BINUserInfo::mutable_level() {
  set_has_level();
  if (level_ == NULL) level_ = new ::BINLevel;
  return level_;
}
inline ::BINLevel* BINUserInfo::release_level() {
  clear_has_level();
  ::BINLevel* temp = level_;
  level_ = NULL;
  return temp;
}
inline void BINUserInfo::set_allocated_level(::BINLevel* level) {
  delete level_;
  level_ = level;
  if (level) {
    set_has_level();
  } else {
    clear_has_level();
  }
}

// optional .BINMedal medal = 8;
inline bool BINUserInfo::has_medal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BINUserInfo::set_has_medal() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BINUserInfo::clear_has_medal() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BINUserInfo::clear_medal() {
  if (medal_ != NULL) medal_->::BINMedal::Clear();
  clear_has_medal();
}
inline const ::BINMedal& BINUserInfo::medal() const {
  return medal_ != NULL ? *medal_ : *default_instance_->medal_;
}
inline ::BINMedal* BINUserInfo::mutable_medal() {
  set_has_medal();
  if (medal_ == NULL) medal_ = new ::BINMedal;
  return medal_;
}
inline ::BINMedal* BINUserInfo::release_medal() {
  clear_has_medal();
  ::BINMedal* temp = medal_;
  medal_ = NULL;
  return temp;
}
inline void BINUserInfo::set_allocated_medal(::BINMedal* medal) {
  delete medal_;
  medal_ = medal;
  if (medal) {
    set_has_medal();
  } else {
    clear_has_medal();
  }
}

// optional int32 trustedIndex = 9;
inline bool BINUserInfo::has_trustedindex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BINUserInfo::set_has_trustedindex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BINUserInfo::clear_has_trustedindex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BINUserInfo::clear_trustedindex() {
  trustedindex_ = 0;
  clear_has_trustedindex();
}
inline ::google::protobuf::int32 BINUserInfo::trustedindex() const {
  return trustedindex_;
}
inline void BINUserInfo::set_trustedindex(::google::protobuf::int32 value) {
  set_has_trustedindex();
  trustedindex_ = value;
}

// optional int64 exp = 10;
inline bool BINUserInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BINUserInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BINUserInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BINUserInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 BINUserInfo::exp() const {
  return exp_;
}
inline void BINUserInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int64 cash = 11;
inline bool BINUserInfo::has_cash() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BINUserInfo::set_has_cash() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BINUserInfo::clear_has_cash() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BINUserInfo::clear_cash() {
  cash_ = GOOGLE_LONGLONG(0);
  clear_has_cash();
}
inline ::google::protobuf::int64 BINUserInfo::cash() const {
  return cash_;
}
inline void BINUserInfo::set_cash(::google::protobuf::int64 value) {
  set_has_cash();
  cash_ = value;
}

// optional int64 gold = 12;
inline bool BINUserInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BINUserInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BINUserInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BINUserInfo::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 BINUserInfo::gold() const {
  return gold_;
}
inline void BINUserInfo::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 totalMatch = 13;
inline bool BINUserInfo::has_totalmatch() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BINUserInfo::set_has_totalmatch() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BINUserInfo::clear_has_totalmatch() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BINUserInfo::clear_totalmatch() {
  totalmatch_ = 0;
  clear_has_totalmatch();
}
inline ::google::protobuf::int32 BINUserInfo::totalmatch() const {
  return totalmatch_;
}
inline void BINUserInfo::set_totalmatch(::google::protobuf::int32 value) {
  set_has_totalmatch();
  totalmatch_ = value;
}

// optional int32 totalWin = 14;
inline bool BINUserInfo::has_totalwin() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BINUserInfo::set_has_totalwin() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BINUserInfo::clear_has_totalwin() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BINUserInfo::clear_totalwin() {
  totalwin_ = 0;
  clear_has_totalwin();
}
inline ::google::protobuf::int32 BINUserInfo::totalwin() const {
  return totalwin_;
}
inline void BINUserInfo::set_totalwin(::google::protobuf::int32 value) {
  set_has_totalwin();
  totalwin_ = value;
}

// optional int64 lastLoginTime = 15;
inline bool BINUserInfo::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BINUserInfo::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BINUserInfo::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BINUserInfo::clear_lastlogintime() {
  lastlogintime_ = GOOGLE_LONGLONG(0);
  clear_has_lastlogintime();
}
inline ::google::protobuf::int64 BINUserInfo::lastlogintime() const {
  return lastlogintime_;
}
inline void BINUserInfo::set_lastlogintime(::google::protobuf::int64 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// optional bool isOnline = 16;
inline bool BINUserInfo::has_isonline() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BINUserInfo::set_has_isonline() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BINUserInfo::clear_has_isonline() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BINUserInfo::clear_isonline() {
  isonline_ = false;
  clear_has_isonline();
}
inline bool BINUserInfo::isonline() const {
  return isonline_;
}
inline void BINUserInfo::set_isonline(bool value) {
  set_has_isonline();
  isonline_ = value;
}

// optional int32 userType = 17;
inline bool BINUserInfo::has_usertype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BINUserInfo::set_has_usertype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BINUserInfo::clear_has_usertype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BINUserInfo::clear_usertype() {
  usertype_ = 0;
  clear_has_usertype();
}
inline ::google::protobuf::int32 BINUserInfo::usertype() const {
  return usertype_;
}
inline void BINUserInfo::set_usertype(::google::protobuf::int32 value) {
  set_has_usertype();
  usertype_ = value;
}

// optional string email = 18;
inline bool BINUserInfo::has_email() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BINUserInfo::set_has_email() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BINUserInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BINUserInfo::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& BINUserInfo::email() const {
  return *email_;
}
inline void BINUserInfo::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void BINUserInfo::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void BINUserInfo::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINUserInfo::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* BINUserInfo::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINUserInfo::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mobile = 19;
inline bool BINUserInfo::has_mobile() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BINUserInfo::set_has_mobile() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BINUserInfo::clear_has_mobile() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BINUserInfo::clear_mobile() {
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    mobile_->clear();
  }
  clear_has_mobile();
}
inline const ::std::string& BINUserInfo::mobile() const {
  return *mobile_;
}
inline void BINUserInfo::set_mobile(const ::std::string& value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void BINUserInfo::set_mobile(const char* value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void BINUserInfo::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINUserInfo::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  return mobile_;
}
inline ::std::string* BINUserInfo::release_mobile() {
  clear_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobile_;
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINUserInfo::set_allocated_mobile(::std::string* mobile) {
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (mobile) {
    set_has_mobile();
    mobile_ = mobile;
  } else {
    clear_has_mobile();
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string identity = 20;
inline bool BINUserInfo::has_identity() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BINUserInfo::set_has_identity() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BINUserInfo::clear_has_identity() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BINUserInfo::clear_identity() {
  if (identity_ != &::google::protobuf::internal::kEmptyString) {
    identity_->clear();
  }
  clear_has_identity();
}
inline const ::std::string& BINUserInfo::identity() const {
  return *identity_;
}
inline void BINUserInfo::set_identity(const ::std::string& value) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    identity_ = new ::std::string;
  }
  identity_->assign(value);
}
inline void BINUserInfo::set_identity(const char* value) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    identity_ = new ::std::string;
  }
  identity_->assign(value);
}
inline void BINUserInfo::set_identity(const char* value, size_t size) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    identity_ = new ::std::string;
  }
  identity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINUserInfo::mutable_identity() {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    identity_ = new ::std::string;
  }
  return identity_;
}
inline ::std::string* BINUserInfo::release_identity() {
  clear_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identity_;
    identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINUserInfo::set_allocated_identity(::std::string* identity) {
  if (identity_ != &::google::protobuf::internal::kEmptyString) {
    delete identity_;
  }
  if (identity) {
    set_has_identity();
    identity_ = identity;
  } else {
    clear_has_identity();
    identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BINUserSetting

// required int64 userId = 1;
inline bool BINUserSetting::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINUserSetting::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINUserSetting::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINUserSetting::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 BINUserSetting::userid() const {
  return userid_;
}
inline void BINUserSetting::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional bool autoReady = 2;
inline bool BINUserSetting::has_autoready() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINUserSetting::set_has_autoready() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINUserSetting::clear_has_autoready() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINUserSetting::clear_autoready() {
  autoready_ = false;
  clear_has_autoready();
}
inline bool BINUserSetting::autoready() const {
  return autoready_;
}
inline void BINUserSetting::set_autoready(bool value) {
  set_has_autoready();
  autoready_ = value;
}

// optional bool autoDenyInvitation = 3;
inline bool BINUserSetting::has_autodenyinvitation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINUserSetting::set_has_autodenyinvitation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINUserSetting::clear_has_autodenyinvitation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINUserSetting::clear_autodenyinvitation() {
  autodenyinvitation_ = false;
  clear_has_autodenyinvitation();
}
inline bool BINUserSetting::autodenyinvitation() const {
  return autodenyinvitation_;
}
inline void BINUserSetting::set_autodenyinvitation(bool value) {
  set_has_autodenyinvitation();
  autodenyinvitation_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_5finfo_2eproto__INCLUDED
