// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: create_room.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "create_room.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINCreateRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINCreateRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINCreateRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINCreateRoomResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_create_5froom_2eproto() {
  protobuf_AddDesc_create_5froom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "create_room.proto");
  GOOGLE_CHECK(file != NULL);
  BINCreateRoomRequest_descriptor_ = file->message_type(0);
  static const int BINCreateRoomRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomRequest, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomRequest, roomgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomRequest, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomRequest, viproom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomRequest, minbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomRequest, playersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomRequest, password_),
  };
  BINCreateRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINCreateRoomRequest_descriptor_,
      BINCreateRoomRequest::default_instance_,
      BINCreateRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINCreateRoomRequest));
  BINCreateRoomResponse_descriptor_ = file->message_type(1);
  static const int BINCreateRoomResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomResponse, roomplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomResponse, myplayer_),
  };
  BINCreateRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINCreateRoomResponse_descriptor_,
      BINCreateRoomResponse::default_instance_,
      BINCreateRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINCreateRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINCreateRoomResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_create_5froom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINCreateRoomRequest_descriptor_, &BINCreateRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINCreateRoomResponse_descriptor_, &BINCreateRoomResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_create_5froom_2eproto() {
  delete BINCreateRoomRequest::default_instance_;
  delete BINCreateRoomRequest_reflection_;
  delete BINCreateRoomResponse::default_instance_;
  delete BINCreateRoomResponse_reflection_;
}

void protobuf_AddDesc_create_5froom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_filter_5froom_2eproto();
  ::protobuf_AddDesc_player_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021create_room.proto\032\021filter_room.proto\032\014"
    "player.proto\"\224\001\n\024BINCreateRoomRequest\022\016\n"
    "\006zoneId\030\001 \002(\005\022\023\n\013roomGroupId\030\002 \002(\005\022\020\n\010ro"
    "omName\030\003 \001(\t\022\017\n\007vipRoom\030\004 \002(\010\022\016\n\006minBet\030"
    "\005 \001(\005\022\022\n\nplayerSize\030\006 \001(\005\022\020\n\010password\030\007 "
    "\001(\t\"|\n\025BINCreateRoomResponse\022\024\n\014response"
    "Code\030\001 \002(\010\022\017\n\007message\030\002 \001(\t\022\036\n\010roomPlay\030"
    "\003 \001(\0132\014.BINRoomPlay\022\034\n\010myPlayer\030\004 \001(\0132\n."
    "BINPlayerB\036\n\034com.mi.game.network.data.bi"
    "n", 361);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "create_room.proto", &protobuf_RegisterTypes);
  BINCreateRoomRequest::default_instance_ = new BINCreateRoomRequest();
  BINCreateRoomResponse::default_instance_ = new BINCreateRoomResponse();
  BINCreateRoomRequest::default_instance_->InitAsDefaultInstance();
  BINCreateRoomResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_create_5froom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_create_5froom_2eproto {
  StaticDescriptorInitializer_create_5froom_2eproto() {
    protobuf_AddDesc_create_5froom_2eproto();
  }
} static_descriptor_initializer_create_5froom_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINCreateRoomRequest::kZoneIdFieldNumber;
const int BINCreateRoomRequest::kRoomGroupIdFieldNumber;
const int BINCreateRoomRequest::kRoomNameFieldNumber;
const int BINCreateRoomRequest::kVipRoomFieldNumber;
const int BINCreateRoomRequest::kMinBetFieldNumber;
const int BINCreateRoomRequest::kPlayerSizeFieldNumber;
const int BINCreateRoomRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

BINCreateRoomRequest::BINCreateRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINCreateRoomRequest::InitAsDefaultInstance() {
}

BINCreateRoomRequest::BINCreateRoomRequest(const BINCreateRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINCreateRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0;
  roomgroupid_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viproom_ = false;
  minbet_ = 0;
  playersize_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINCreateRoomRequest::~BINCreateRoomRequest() {
  SharedDtor();
}

void BINCreateRoomRequest::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void BINCreateRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINCreateRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINCreateRoomRequest_descriptor_;
}

const BINCreateRoomRequest& BINCreateRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_create_5froom_2eproto();
  return *default_instance_;
}

BINCreateRoomRequest* BINCreateRoomRequest::default_instance_ = NULL;

BINCreateRoomRequest* BINCreateRoomRequest::New() const {
  return new BINCreateRoomRequest;
}

void BINCreateRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0;
    roomgroupid_ = 0;
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
    viproom_ = false;
    minbet_ = 0;
    playersize_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINCreateRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 zoneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomGroupId;
        break;
      }

      // required int32 roomGroupId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomgroupid_)));
          set_has_roomgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roomName;
        break;
      }

      // optional string roomName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vipRoom;
        break;
      }

      // required bool vipRoom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &viproom_)));
          set_has_viproom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minBet;
        break;
      }

      // optional int32 minBet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minbet_)));
          set_has_minbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playerSize;
        break;
      }

      // optional int32 playerSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playersize_)));
          set_has_playersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_password;
        break;
      }

      // optional string password = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINCreateRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 zoneId = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zoneid(), output);
  }

  // required int32 roomGroupId = 2;
  if (has_roomgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomgroupid(), output);
  }

  // optional string roomName = 3;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->roomname(), output);
  }

  // required bool vipRoom = 4;
  if (has_viproom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->viproom(), output);
  }

  // optional int32 minBet = 5;
  if (has_minbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minbet(), output);
  }

  // optional int32 playerSize = 6;
  if (has_playersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playersize(), output);
  }

  // optional string password = 7;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINCreateRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 zoneId = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zoneid(), target);
  }

  // required int32 roomGroupId = 2;
  if (has_roomgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomgroupid(), target);
  }

  // optional string roomName = 3;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomname(), target);
  }

  // required bool vipRoom = 4;
  if (has_viproom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->viproom(), target);
  }

  // optional int32 minBet = 5;
  if (has_minbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minbet(), target);
  }

  // optional int32 playerSize = 6;
  if (has_playersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playersize(), target);
  }

  // optional string password = 7;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINCreateRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 zoneId = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

    // required int32 roomGroupId = 2;
    if (has_roomgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomgroupid());
    }

    // optional string roomName = 3;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // required bool vipRoom = 4;
    if (has_viproom()) {
      total_size += 1 + 1;
    }

    // optional int32 minBet = 5;
    if (has_minbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minbet());
    }

    // optional int32 playerSize = 6;
    if (has_playersize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playersize());
    }

    // optional string password = 7;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINCreateRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINCreateRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINCreateRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINCreateRoomRequest::MergeFrom(const BINCreateRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_roomgroupid()) {
      set_roomgroupid(from.roomgroupid());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_viproom()) {
      set_viproom(from.viproom());
    }
    if (from.has_minbet()) {
      set_minbet(from.minbet());
    }
    if (from.has_playersize()) {
      set_playersize(from.playersize());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINCreateRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINCreateRoomRequest::CopyFrom(const BINCreateRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINCreateRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void BINCreateRoomRequest::Swap(BINCreateRoomRequest* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(roomgroupid_, other->roomgroupid_);
    std::swap(roomname_, other->roomname_);
    std::swap(viproom_, other->viproom_);
    std::swap(minbet_, other->minbet_);
    std::swap(playersize_, other->playersize_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINCreateRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINCreateRoomRequest_descriptor_;
  metadata.reflection = BINCreateRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINCreateRoomResponse::kResponseCodeFieldNumber;
const int BINCreateRoomResponse::kMessageFieldNumber;
const int BINCreateRoomResponse::kRoomPlayFieldNumber;
const int BINCreateRoomResponse::kMyPlayerFieldNumber;
#endif  // !_MSC_VER

BINCreateRoomResponse::BINCreateRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINCreateRoomResponse::InitAsDefaultInstance() {
  roomplay_ = const_cast< ::BINRoomPlay*>(&::BINRoomPlay::default_instance());
  myplayer_ = const_cast< ::BINPlayer*>(&::BINPlayer::default_instance());
}

BINCreateRoomResponse::BINCreateRoomResponse(const BINCreateRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINCreateRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomplay_ = NULL;
  myplayer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINCreateRoomResponse::~BINCreateRoomResponse() {
  SharedDtor();
}

void BINCreateRoomResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
    delete roomplay_;
    delete myplayer_;
  }
}

void BINCreateRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINCreateRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINCreateRoomResponse_descriptor_;
}

const BINCreateRoomResponse& BINCreateRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_create_5froom_2eproto();
  return *default_instance_;
}

BINCreateRoomResponse* BINCreateRoomResponse::default_instance_ = NULL;

BINCreateRoomResponse* BINCreateRoomResponse::New() const {
  return new BINCreateRoomResponse;
}

void BINCreateRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_roomplay()) {
      if (roomplay_ != NULL) roomplay_->::BINRoomPlay::Clear();
    }
    if (has_myplayer()) {
      if (myplayer_ != NULL) myplayer_->::BINPlayer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINCreateRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roomPlay;
        break;
      }

      // optional .BINRoomPlay roomPlay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomPlay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomplay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_myPlayer;
        break;
      }

      // optional .BINPlayer myPlayer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myPlayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myplayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINCreateRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional .BINRoomPlay roomPlay = 3;
  if (has_roomplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->roomplay(), output);
  }

  // optional .BINPlayer myPlayer = 4;
  if (has_myplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->myplayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINCreateRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional .BINRoomPlay roomPlay = 3;
  if (has_roomplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->roomplay(), target);
  }

  // optional .BINPlayer myPlayer = 4;
  if (has_myplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->myplayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINCreateRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .BINRoomPlay roomPlay = 3;
    if (has_roomplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomplay());
    }

    // optional .BINPlayer myPlayer = 4;
    if (has_myplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myplayer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINCreateRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINCreateRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINCreateRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINCreateRoomResponse::MergeFrom(const BINCreateRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_roomplay()) {
      mutable_roomplay()->::BINRoomPlay::MergeFrom(from.roomplay());
    }
    if (from.has_myplayer()) {
      mutable_myplayer()->::BINPlayer::MergeFrom(from.myplayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINCreateRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINCreateRoomResponse::CopyFrom(const BINCreateRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINCreateRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roomplay()) {
    if (!this->roomplay().IsInitialized()) return false;
  }
  if (has_myplayer()) {
    if (!this->myplayer().IsInitialized()) return false;
  }
  return true;
}

void BINCreateRoomResponse::Swap(BINCreateRoomResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(roomplay_, other->roomplay_);
    std::swap(myplayer_, other->myplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINCreateRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINCreateRoomResponse_descriptor_;
  metadata.reflection = BINCreateRoomResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
