// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: change_host.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "change_host.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINChangeHostRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINChangeHostRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINChangeHostResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINChangeHostResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINHostRegistrationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINHostRegistrationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINHostRegistrationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINHostRegistrationResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_change_5fhost_2eproto() {
  protobuf_AddDesc_change_5fhost_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "change_host.proto");
  GOOGLE_CHECK(file != NULL);
  BINChangeHostRequest_descriptor_ = file->message_type(0);
  static const int BINChangeHostRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINChangeHostRequest, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINChangeHostRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINChangeHostRequest, isaccept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINChangeHostRequest, requesttype_),
  };
  BINChangeHostRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINChangeHostRequest_descriptor_,
      BINChangeHostRequest::default_instance_,
      BINChangeHostRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINChangeHostRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINChangeHostRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINChangeHostRequest));
  BINChangeHostResponse_descriptor_ = file->message_type(1);
  static const int BINChangeHostResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINChangeHostResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINChangeHostResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINChangeHostResponse, hostid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINChangeHostResponse, responsetype_),
  };
  BINChangeHostResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINChangeHostResponse_descriptor_,
      BINChangeHostResponse::default_instance_,
      BINChangeHostResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINChangeHostResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINChangeHostResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINChangeHostResponse));
  BINHostRegistrationRequest_descriptor_ = file->message_type(2);
  static const int BINHostRegistrationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINHostRegistrationRequest, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINHostRegistrationRequest, cancelregistration_),
  };
  BINHostRegistrationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINHostRegistrationRequest_descriptor_,
      BINHostRegistrationRequest::default_instance_,
      BINHostRegistrationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINHostRegistrationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINHostRegistrationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINHostRegistrationRequest));
  BINHostRegistrationResponse_descriptor_ = file->message_type(3);
  static const int BINHostRegistrationResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINHostRegistrationResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINHostRegistrationResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINHostRegistrationResponse, hostuseridqueue_),
  };
  BINHostRegistrationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINHostRegistrationResponse_descriptor_,
      BINHostRegistrationResponse::default_instance_,
      BINHostRegistrationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINHostRegistrationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINHostRegistrationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINHostRegistrationResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_change_5fhost_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINChangeHostRequest_descriptor_, &BINChangeHostRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINChangeHostResponse_descriptor_, &BINChangeHostResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINHostRegistrationRequest_descriptor_, &BINHostRegistrationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINHostRegistrationResponse_descriptor_, &BINHostRegistrationResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_change_5fhost_2eproto() {
  delete BINChangeHostRequest::default_instance_;
  delete BINChangeHostRequest_reflection_;
  delete BINChangeHostResponse::default_instance_;
  delete BINChangeHostResponse_reflection_;
  delete BINHostRegistrationRequest::default_instance_;
  delete BINHostRegistrationRequest_reflection_;
  delete BINHostRegistrationResponse::default_instance_;
  delete BINHostRegistrationResponse_reflection_;
}

void protobuf_AddDesc_change_5fhost_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021change_host.proto\"`\n\024BINChangeHostRequ"
    "est\022\021\n\troomIndex\030\001 \002(\005\022\016\n\006userId\030\002 \002(\003\022\020"
    "\n\010isAccept\030\003 \001(\010\022\023\n\013requestType\030\004 \002(\005\"d\n"
    "\025BINChangeHostResponse\022\024\n\014responseCode\030\001"
    " \002(\010\022\017\n\007message\030\002 \001(\t\022\016\n\006hostId\030\003 \001(\003\022\024\n"
    "\014responseType\030\004 \001(\005\"K\n\032BINHostRegistrati"
    "onRequest\022\021\n\troomIndex\030\001 \002(\005\022\032\n\022cancelRe"
    "gistration\030\002 \001(\010\"]\n\033BINHostRegistrationR"
    "esponse\022\024\n\014responseCode\030\001 \002(\010\022\017\n\007message"
    "\030\002 \001(\t\022\027\n\017hostUserIdQueue\030\003 \003(\003B\036\n\034com.m"
    "i.game.network.data.bin", 423);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "change_host.proto", &protobuf_RegisterTypes);
  BINChangeHostRequest::default_instance_ = new BINChangeHostRequest();
  BINChangeHostResponse::default_instance_ = new BINChangeHostResponse();
  BINHostRegistrationRequest::default_instance_ = new BINHostRegistrationRequest();
  BINHostRegistrationResponse::default_instance_ = new BINHostRegistrationResponse();
  BINChangeHostRequest::default_instance_->InitAsDefaultInstance();
  BINChangeHostResponse::default_instance_->InitAsDefaultInstance();
  BINHostRegistrationRequest::default_instance_->InitAsDefaultInstance();
  BINHostRegistrationResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_change_5fhost_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_change_5fhost_2eproto {
  StaticDescriptorInitializer_change_5fhost_2eproto() {
    protobuf_AddDesc_change_5fhost_2eproto();
  }
} static_descriptor_initializer_change_5fhost_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINChangeHostRequest::kRoomIndexFieldNumber;
const int BINChangeHostRequest::kUserIdFieldNumber;
const int BINChangeHostRequest::kIsAcceptFieldNumber;
const int BINChangeHostRequest::kRequestTypeFieldNumber;
#endif  // !_MSC_VER

BINChangeHostRequest::BINChangeHostRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINChangeHostRequest::InitAsDefaultInstance() {
}

BINChangeHostRequest::BINChangeHostRequest(const BINChangeHostRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINChangeHostRequest::SharedCtor() {
  _cached_size_ = 0;
  roomindex_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  isaccept_ = false;
  requesttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINChangeHostRequest::~BINChangeHostRequest() {
  SharedDtor();
}

void BINChangeHostRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINChangeHostRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINChangeHostRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINChangeHostRequest_descriptor_;
}

const BINChangeHostRequest& BINChangeHostRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_change_5fhost_2eproto();
  return *default_instance_;
}

BINChangeHostRequest* BINChangeHostRequest::default_instance_ = NULL;

BINChangeHostRequest* BINChangeHostRequest::New() const {
  return new BINChangeHostRequest;
}

void BINChangeHostRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomindex_ = 0;
    userid_ = GOOGLE_LONGLONG(0);
    isaccept_ = false;
    requesttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINChangeHostRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // required int64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isAccept;
        break;
      }

      // optional bool isAccept = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAccept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaccept_)));
          set_has_isaccept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_requestType;
        break;
      }

      // required int32 requestType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINChangeHostRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // required int64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->userid(), output);
  }

  // optional bool isAccept = 3;
  if (has_isaccept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isaccept(), output);
  }

  // required int32 requestType = 4;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->requesttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINChangeHostRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // required int64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->userid(), target);
  }

  // optional bool isAccept = 3;
  if (has_isaccept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isaccept(), target);
  }

  // required int32 requestType = 4;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->requesttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINChangeHostRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomIndex = 1;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

    // required int64 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // optional bool isAccept = 3;
    if (has_isaccept()) {
      total_size += 1 + 1;
    }

    // required int32 requestType = 4;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINChangeHostRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINChangeHostRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINChangeHostRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINChangeHostRequest::MergeFrom(const BINChangeHostRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_isaccept()) {
      set_isaccept(from.isaccept());
    }
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINChangeHostRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINChangeHostRequest::CopyFrom(const BINChangeHostRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINChangeHostRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void BINChangeHostRequest::Swap(BINChangeHostRequest* other) {
  if (other != this) {
    std::swap(roomindex_, other->roomindex_);
    std::swap(userid_, other->userid_);
    std::swap(isaccept_, other->isaccept_);
    std::swap(requesttype_, other->requesttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINChangeHostRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINChangeHostRequest_descriptor_;
  metadata.reflection = BINChangeHostRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINChangeHostResponse::kResponseCodeFieldNumber;
const int BINChangeHostResponse::kMessageFieldNumber;
const int BINChangeHostResponse::kHostIdFieldNumber;
const int BINChangeHostResponse::kResponseTypeFieldNumber;
#endif  // !_MSC_VER

BINChangeHostResponse::BINChangeHostResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINChangeHostResponse::InitAsDefaultInstance() {
}

BINChangeHostResponse::BINChangeHostResponse(const BINChangeHostResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINChangeHostResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostid_ = GOOGLE_LONGLONG(0);
  responsetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINChangeHostResponse::~BINChangeHostResponse() {
  SharedDtor();
}

void BINChangeHostResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINChangeHostResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINChangeHostResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINChangeHostResponse_descriptor_;
}

const BINChangeHostResponse& BINChangeHostResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_change_5fhost_2eproto();
  return *default_instance_;
}

BINChangeHostResponse* BINChangeHostResponse::default_instance_ = NULL;

BINChangeHostResponse* BINChangeHostResponse::New() const {
  return new BINChangeHostResponse;
}

void BINChangeHostResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    hostid_ = GOOGLE_LONGLONG(0);
    responsetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINChangeHostResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hostId;
        break;
      }

      // optional int64 hostId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hostId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hostid_)));
          set_has_hostid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_responseType;
        break;
      }

      // optional int32 responseType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_responseType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &responsetype_)));
          set_has_responsetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINChangeHostResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional int64 hostId = 3;
  if (has_hostid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hostid(), output);
  }

  // optional int32 responseType = 4;
  if (has_responsetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->responsetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINChangeHostResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional int64 hostId = 3;
  if (has_hostid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hostid(), target);
  }

  // optional int32 responseType = 4;
  if (has_responsetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->responsetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINChangeHostResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int64 hostId = 3;
    if (has_hostid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hostid());
    }

    // optional int32 responseType = 4;
    if (has_responsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->responsetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINChangeHostResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINChangeHostResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINChangeHostResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINChangeHostResponse::MergeFrom(const BINChangeHostResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_hostid()) {
      set_hostid(from.hostid());
    }
    if (from.has_responsetype()) {
      set_responsetype(from.responsetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINChangeHostResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINChangeHostResponse::CopyFrom(const BINChangeHostResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINChangeHostResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINChangeHostResponse::Swap(BINChangeHostResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(hostid_, other->hostid_);
    std::swap(responsetype_, other->responsetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINChangeHostResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINChangeHostResponse_descriptor_;
  metadata.reflection = BINChangeHostResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINHostRegistrationRequest::kRoomIndexFieldNumber;
const int BINHostRegistrationRequest::kCancelRegistrationFieldNumber;
#endif  // !_MSC_VER

BINHostRegistrationRequest::BINHostRegistrationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINHostRegistrationRequest::InitAsDefaultInstance() {
}

BINHostRegistrationRequest::BINHostRegistrationRequest(const BINHostRegistrationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINHostRegistrationRequest::SharedCtor() {
  _cached_size_ = 0;
  roomindex_ = 0;
  cancelregistration_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINHostRegistrationRequest::~BINHostRegistrationRequest() {
  SharedDtor();
}

void BINHostRegistrationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINHostRegistrationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINHostRegistrationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINHostRegistrationRequest_descriptor_;
}

const BINHostRegistrationRequest& BINHostRegistrationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_change_5fhost_2eproto();
  return *default_instance_;
}

BINHostRegistrationRequest* BINHostRegistrationRequest::default_instance_ = NULL;

BINHostRegistrationRequest* BINHostRegistrationRequest::New() const {
  return new BINHostRegistrationRequest;
}

void BINHostRegistrationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomindex_ = 0;
    cancelregistration_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINHostRegistrationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cancelRegistration;
        break;
      }

      // optional bool cancelRegistration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cancelRegistration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cancelregistration_)));
          set_has_cancelregistration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINHostRegistrationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // optional bool cancelRegistration = 2;
  if (has_cancelregistration()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cancelregistration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINHostRegistrationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // optional bool cancelRegistration = 2;
  if (has_cancelregistration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cancelregistration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINHostRegistrationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomIndex = 1;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

    // optional bool cancelRegistration = 2;
    if (has_cancelregistration()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINHostRegistrationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINHostRegistrationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINHostRegistrationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINHostRegistrationRequest::MergeFrom(const BINHostRegistrationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
    if (from.has_cancelregistration()) {
      set_cancelregistration(from.cancelregistration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINHostRegistrationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINHostRegistrationRequest::CopyFrom(const BINHostRegistrationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINHostRegistrationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINHostRegistrationRequest::Swap(BINHostRegistrationRequest* other) {
  if (other != this) {
    std::swap(roomindex_, other->roomindex_);
    std::swap(cancelregistration_, other->cancelregistration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINHostRegistrationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINHostRegistrationRequest_descriptor_;
  metadata.reflection = BINHostRegistrationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINHostRegistrationResponse::kResponseCodeFieldNumber;
const int BINHostRegistrationResponse::kMessageFieldNumber;
const int BINHostRegistrationResponse::kHostUserIdQueueFieldNumber;
#endif  // !_MSC_VER

BINHostRegistrationResponse::BINHostRegistrationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINHostRegistrationResponse::InitAsDefaultInstance() {
}

BINHostRegistrationResponse::BINHostRegistrationResponse(const BINHostRegistrationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINHostRegistrationResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINHostRegistrationResponse::~BINHostRegistrationResponse() {
  SharedDtor();
}

void BINHostRegistrationResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINHostRegistrationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINHostRegistrationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINHostRegistrationResponse_descriptor_;
}

const BINHostRegistrationResponse& BINHostRegistrationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_change_5fhost_2eproto();
  return *default_instance_;
}

BINHostRegistrationResponse* BINHostRegistrationResponse::default_instance_ = NULL;

BINHostRegistrationResponse* BINHostRegistrationResponse::New() const {
  return new BINHostRegistrationResponse;
}

void BINHostRegistrationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  hostuseridqueue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINHostRegistrationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hostUserIdQueue;
        break;
      }

      // repeated int64 hostUserIdQueue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hostUserIdQueue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_hostuseridqueue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_hostuseridqueue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hostUserIdQueue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINHostRegistrationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // repeated int64 hostUserIdQueue = 3;
  for (int i = 0; i < this->hostuseridqueue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->hostuseridqueue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINHostRegistrationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // repeated int64 hostUserIdQueue = 3;
  for (int i = 0; i < this->hostuseridqueue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->hostuseridqueue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINHostRegistrationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  // repeated int64 hostUserIdQueue = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hostuseridqueue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->hostuseridqueue(i));
    }
    total_size += 1 * this->hostuseridqueue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINHostRegistrationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINHostRegistrationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINHostRegistrationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINHostRegistrationResponse::MergeFrom(const BINHostRegistrationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  hostuseridqueue_.MergeFrom(from.hostuseridqueue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINHostRegistrationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINHostRegistrationResponse::CopyFrom(const BINHostRegistrationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINHostRegistrationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINHostRegistrationResponse::Swap(BINHostRegistrationResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    hostuseridqueue_.Swap(&other->hostuseridqueue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINHostRegistrationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINHostRegistrationResponse_descriptor_;
  metadata.reflection = BINHostRegistrationResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
