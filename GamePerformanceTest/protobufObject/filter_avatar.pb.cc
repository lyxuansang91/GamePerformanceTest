// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filter_avatar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "filter_avatar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINFilterAvatarRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINFilterAvatarRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINFilterAvatarResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINFilterAvatarResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_filter_5favatar_2eproto() {
  protobuf_AddDesc_filter_5favatar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "filter_avatar.proto");
  GOOGLE_CHECK(file != NULL);
  BINFilterAvatarRequest_descriptor_ = file->message_type(0);
  static const int BINFilterAvatarRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterAvatarRequest, firstresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterAvatarRequest, maxresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterAvatarRequest, type_),
  };
  BINFilterAvatarRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINFilterAvatarRequest_descriptor_,
      BINFilterAvatarRequest::default_instance_,
      BINFilterAvatarRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterAvatarRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterAvatarRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINFilterAvatarRequest));
  BINFilterAvatarResponse_descriptor_ = file->message_type(1);
  static const int BINFilterAvatarResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterAvatarResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterAvatarResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterAvatarResponse, avatarids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterAvatarResponse, inuseavatarid_),
  };
  BINFilterAvatarResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINFilterAvatarResponse_descriptor_,
      BINFilterAvatarResponse::default_instance_,
      BINFilterAvatarResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterAvatarResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterAvatarResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINFilterAvatarResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_filter_5favatar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINFilterAvatarRequest_descriptor_, &BINFilterAvatarRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINFilterAvatarResponse_descriptor_, &BINFilterAvatarResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_filter_5favatar_2eproto() {
  delete BINFilterAvatarRequest::default_instance_;
  delete BINFilterAvatarRequest_reflection_;
  delete BINFilterAvatarResponse::default_instance_;
  delete BINFilterAvatarResponse_reflection_;
}

void protobuf_AddDesc_filter_5favatar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023filter_avatar.proto\"N\n\026BINFilterAvatar"
    "Request\022\023\n\013firstResult\030\001 \002(\005\022\021\n\tmaxResul"
    "t\030\002 \002(\005\022\014\n\004type\030\003 \001(\005\"j\n\027BINFilterAvatar"
    "Response\022\024\n\014responseCode\030\001 \002(\010\022\017\n\007messag"
    "e\030\002 \001(\t\022\021\n\tavatarIds\030\003 \003(\005\022\025\n\rinUseAvata"
    "rId\030\004 \001(\005B\036\n\034com.mi.game.network.data.bi"
    "n", 241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "filter_avatar.proto", &protobuf_RegisterTypes);
  BINFilterAvatarRequest::default_instance_ = new BINFilterAvatarRequest();
  BINFilterAvatarResponse::default_instance_ = new BINFilterAvatarResponse();
  BINFilterAvatarRequest::default_instance_->InitAsDefaultInstance();
  BINFilterAvatarResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_filter_5favatar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_filter_5favatar_2eproto {
  StaticDescriptorInitializer_filter_5favatar_2eproto() {
    protobuf_AddDesc_filter_5favatar_2eproto();
  }
} static_descriptor_initializer_filter_5favatar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINFilterAvatarRequest::kFirstResultFieldNumber;
const int BINFilterAvatarRequest::kMaxResultFieldNumber;
const int BINFilterAvatarRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

BINFilterAvatarRequest::BINFilterAvatarRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINFilterAvatarRequest::InitAsDefaultInstance() {
}

BINFilterAvatarRequest::BINFilterAvatarRequest(const BINFilterAvatarRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINFilterAvatarRequest::SharedCtor() {
  _cached_size_ = 0;
  firstresult_ = 0;
  maxresult_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINFilterAvatarRequest::~BINFilterAvatarRequest() {
  SharedDtor();
}

void BINFilterAvatarRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINFilterAvatarRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINFilterAvatarRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINFilterAvatarRequest_descriptor_;
}

const BINFilterAvatarRequest& BINFilterAvatarRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_filter_5favatar_2eproto();
  return *default_instance_;
}

BINFilterAvatarRequest* BINFilterAvatarRequest::default_instance_ = NULL;

BINFilterAvatarRequest* BINFilterAvatarRequest::New() const {
  return new BINFilterAvatarRequest;
}

void BINFilterAvatarRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    firstresult_ = 0;
    maxresult_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINFilterAvatarRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 firstResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstresult_)));
          set_has_firstresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxResult;
        break;
      }

      // required int32 maxResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxresult_)));
          set_has_maxresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINFilterAvatarRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 firstResult = 1;
  if (has_firstresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->firstresult(), output);
  }

  // required int32 maxResult = 2;
  if (has_maxresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxresult(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINFilterAvatarRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 firstResult = 1;
  if (has_firstresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->firstresult(), target);
  }

  // required int32 maxResult = 2;
  if (has_maxresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxresult(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINFilterAvatarRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 firstResult = 1;
    if (has_firstresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstresult());
    }

    // required int32 maxResult = 2;
    if (has_maxresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxresult());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINFilterAvatarRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINFilterAvatarRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINFilterAvatarRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINFilterAvatarRequest::MergeFrom(const BINFilterAvatarRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstresult()) {
      set_firstresult(from.firstresult());
    }
    if (from.has_maxresult()) {
      set_maxresult(from.maxresult());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINFilterAvatarRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINFilterAvatarRequest::CopyFrom(const BINFilterAvatarRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINFilterAvatarRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BINFilterAvatarRequest::Swap(BINFilterAvatarRequest* other) {
  if (other != this) {
    std::swap(firstresult_, other->firstresult_);
    std::swap(maxresult_, other->maxresult_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINFilterAvatarRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINFilterAvatarRequest_descriptor_;
  metadata.reflection = BINFilterAvatarRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINFilterAvatarResponse::kResponseCodeFieldNumber;
const int BINFilterAvatarResponse::kMessageFieldNumber;
const int BINFilterAvatarResponse::kAvatarIdsFieldNumber;
const int BINFilterAvatarResponse::kInUseAvatarIdFieldNumber;
#endif  // !_MSC_VER

BINFilterAvatarResponse::BINFilterAvatarResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINFilterAvatarResponse::InitAsDefaultInstance() {
}

BINFilterAvatarResponse::BINFilterAvatarResponse(const BINFilterAvatarResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINFilterAvatarResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inuseavatarid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINFilterAvatarResponse::~BINFilterAvatarResponse() {
  SharedDtor();
}

void BINFilterAvatarResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINFilterAvatarResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINFilterAvatarResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINFilterAvatarResponse_descriptor_;
}

const BINFilterAvatarResponse& BINFilterAvatarResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_filter_5favatar_2eproto();
  return *default_instance_;
}

BINFilterAvatarResponse* BINFilterAvatarResponse::default_instance_ = NULL;

BINFilterAvatarResponse* BINFilterAvatarResponse::New() const {
  return new BINFilterAvatarResponse;
}

void BINFilterAvatarResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    inuseavatarid_ = 0;
  }
  avatarids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINFilterAvatarResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_avatarIds;
        break;
      }

      // repeated int32 avatarIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatarIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_avatarids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_avatarids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_avatarIds;
        if (input->ExpectTag(32)) goto parse_inUseAvatarId;
        break;
      }

      // optional int32 inUseAvatarId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inUseAvatarId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuseavatarid_)));
          set_has_inuseavatarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINFilterAvatarResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // repeated int32 avatarIds = 3;
  for (int i = 0; i < this->avatarids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->avatarids(i), output);
  }

  // optional int32 inUseAvatarId = 4;
  if (has_inuseavatarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inuseavatarid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINFilterAvatarResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // repeated int32 avatarIds = 3;
  for (int i = 0; i < this->avatarids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->avatarids(i), target);
  }

  // optional int32 inUseAvatarId = 4;
  if (has_inuseavatarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inuseavatarid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINFilterAvatarResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 inUseAvatarId = 4;
    if (has_inuseavatarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuseavatarid());
    }

  }
  // repeated int32 avatarIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->avatarids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->avatarids(i));
    }
    total_size += 1 * this->avatarids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINFilterAvatarResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINFilterAvatarResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINFilterAvatarResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINFilterAvatarResponse::MergeFrom(const BINFilterAvatarResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  avatarids_.MergeFrom(from.avatarids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_inuseavatarid()) {
      set_inuseavatarid(from.inuseavatarid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINFilterAvatarResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINFilterAvatarResponse::CopyFrom(const BINFilterAvatarResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINFilterAvatarResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINFilterAvatarResponse::Swap(BINFilterAvatarResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    avatarids_.Swap(&other->avatarids_);
    std::swap(inuseavatarid_, other->inuseavatarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINFilterAvatarResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINFilterAvatarResponse_descriptor_;
  metadata.reflection = BINFilterAvatarResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
