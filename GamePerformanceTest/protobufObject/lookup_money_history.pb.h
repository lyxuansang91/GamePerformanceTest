// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lookup_money_history.proto

#ifndef PROTOBUF_lookup_5fmoney_5fhistory_2eproto__INCLUDED
#define PROTOBUF_lookup_5fmoney_5fhistory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lookup_5fmoney_5fhistory_2eproto();
void protobuf_AssignDesc_lookup_5fmoney_5fhistory_2eproto();
void protobuf_ShutdownFile_lookup_5fmoney_5fhistory_2eproto();

class BINLookUpMoneyHistoryRequest;
class BINMoneyLog;
class BINLookUpMoneyHistoryResponse;

// ===================================================================

class BINLookUpMoneyHistoryRequest : public ::google::protobuf::Message {
 public:
  BINLookUpMoneyHistoryRequest();
  virtual ~BINLookUpMoneyHistoryRequest();

  BINLookUpMoneyHistoryRequest(const BINLookUpMoneyHistoryRequest& from);

  inline BINLookUpMoneyHistoryRequest& operator=(const BINLookUpMoneyHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINLookUpMoneyHistoryRequest& default_instance();

  void Swap(BINLookUpMoneyHistoryRequest* other);

  // implements Message ----------------------------------------------

  BINLookUpMoneyHistoryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINLookUpMoneyHistoryRequest& from);
  void MergeFrom(const BINLookUpMoneyHistoryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 firstResult = 1;
  inline bool has_firstresult() const;
  inline void clear_firstresult();
  static const int kFirstResultFieldNumber = 1;
  inline ::google::protobuf::int32 firstresult() const;
  inline void set_firstresult(::google::protobuf::int32 value);

  // required int32 maxResult = 2;
  inline bool has_maxresult() const;
  inline void clear_maxresult();
  static const int kMaxResultFieldNumber = 2;
  inline ::google::protobuf::int32 maxresult() const;
  inline void set_maxresult(::google::protobuf::int32 value);

  // required int32 filterType = 3;
  inline bool has_filtertype() const;
  inline void clear_filtertype();
  static const int kFilterTypeFieldNumber = 3;
  inline ::google::protobuf::int32 filtertype() const;
  inline void set_filtertype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BINLookUpMoneyHistoryRequest)
 private:
  inline void set_has_firstresult();
  inline void clear_has_firstresult();
  inline void set_has_maxresult();
  inline void clear_has_maxresult();
  inline void set_has_filtertype();
  inline void clear_has_filtertype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 firstresult_;
  ::google::protobuf::int32 maxresult_;
  ::google::protobuf::int32 filtertype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lookup_5fmoney_5fhistory_2eproto();
  friend void protobuf_AssignDesc_lookup_5fmoney_5fhistory_2eproto();
  friend void protobuf_ShutdownFile_lookup_5fmoney_5fhistory_2eproto();

  void InitAsDefaultInstance();
  static BINLookUpMoneyHistoryRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINMoneyLog : public ::google::protobuf::Message {
 public:
  BINMoneyLog();
  virtual ~BINMoneyLog();

  BINMoneyLog(const BINMoneyLog& from);

  inline BINMoneyLog& operator=(const BINMoneyLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINMoneyLog& default_instance();

  void Swap(BINMoneyLog* other);

  // implements Message ----------------------------------------------

  BINMoneyLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINMoneyLog& from);
  void MergeFrom(const BINMoneyLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 logId = 1;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogIdFieldNumber = 1;
  inline ::google::protobuf::int64 logid() const;
  inline void set_logid(::google::protobuf::int64 value);

  // optional string uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional int64 logStamp = 3;
  inline bool has_logstamp() const;
  inline void clear_logstamp();
  static const int kLogStampFieldNumber = 3;
  inline ::google::protobuf::int64 logstamp() const;
  inline void set_logstamp(::google::protobuf::int64 value);

  // optional int64 insertedTime = 4;
  inline bool has_insertedtime() const;
  inline void clear_insertedtime();
  static const int kInsertedTimeFieldNumber = 4;
  inline ::google::protobuf::int64 insertedtime() const;
  inline void set_insertedtime(::google::protobuf::int64 value);

  // optional int64 currentMoney = 5;
  inline bool has_currentmoney() const;
  inline void clear_currentmoney();
  static const int kCurrentMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 currentmoney() const;
  inline void set_currentmoney(::google::protobuf::int64 value);

  // optional int64 changeMoney = 6;
  inline bool has_changemoney() const;
  inline void clear_changemoney();
  static const int kChangeMoneyFieldNumber = 6;
  inline ::google::protobuf::int64 changemoney() const;
  inline void set_changemoney(::google::protobuf::int64 value);

  // optional int64 lastMoney = 7;
  inline bool has_lastmoney() const;
  inline void clear_lastmoney();
  static const int kLastMoneyFieldNumber = 7;
  inline ::google::protobuf::int64 lastmoney() const;
  inline void set_lastmoney(::google::protobuf::int64 value);

  // optional bool isCash = 8;
  inline bool has_iscash() const;
  inline void clear_iscash();
  static const int kIsCashFieldNumber = 8;
  inline bool iscash() const;
  inline void set_iscash(bool value);

  // optional string transactionType = 9;
  inline bool has_transactiontype() const;
  inline void clear_transactiontype();
  static const int kTransactionTypeFieldNumber = 9;
  inline const ::std::string& transactiontype() const;
  inline void set_transactiontype(const ::std::string& value);
  inline void set_transactiontype(const char* value);
  inline void set_transactiontype(const char* value, size_t size);
  inline ::std::string* mutable_transactiontype();
  inline ::std::string* release_transactiontype();
  inline void set_allocated_transactiontype(::std::string* transactiontype);

  // optional string description = 10;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 10;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:BINMoneyLog)
 private:
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_logstamp();
  inline void clear_has_logstamp();
  inline void set_has_insertedtime();
  inline void clear_has_insertedtime();
  inline void set_has_currentmoney();
  inline void clear_has_currentmoney();
  inline void set_has_changemoney();
  inline void clear_has_changemoney();
  inline void set_has_lastmoney();
  inline void clear_has_lastmoney();
  inline void set_has_iscash();
  inline void clear_has_iscash();
  inline void set_has_transactiontype();
  inline void clear_has_transactiontype();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 logid_;
  ::std::string* uuid_;
  ::google::protobuf::int64 logstamp_;
  ::google::protobuf::int64 insertedtime_;
  ::google::protobuf::int64 currentmoney_;
  ::google::protobuf::int64 changemoney_;
  ::google::protobuf::int64 lastmoney_;
  ::std::string* transactiontype_;
  ::std::string* description_;
  bool iscash_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_lookup_5fmoney_5fhistory_2eproto();
  friend void protobuf_AssignDesc_lookup_5fmoney_5fhistory_2eproto();
  friend void protobuf_ShutdownFile_lookup_5fmoney_5fhistory_2eproto();

  void InitAsDefaultInstance();
  static BINMoneyLog* default_instance_;
};
// -------------------------------------------------------------------

class BINLookUpMoneyHistoryResponse : public ::google::protobuf::Message {
 public:
  BINLookUpMoneyHistoryResponse();
  virtual ~BINLookUpMoneyHistoryResponse();

  BINLookUpMoneyHistoryResponse(const BINLookUpMoneyHistoryResponse& from);

  inline BINLookUpMoneyHistoryResponse& operator=(const BINLookUpMoneyHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINLookUpMoneyHistoryResponse& default_instance();

  void Swap(BINLookUpMoneyHistoryResponse* other);

  // implements Message ----------------------------------------------

  BINLookUpMoneyHistoryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINLookUpMoneyHistoryResponse& from);
  void MergeFrom(const BINLookUpMoneyHistoryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // repeated .BINMoneyLog moneyLogs = 3;
  inline int moneylogs_size() const;
  inline void clear_moneylogs();
  static const int kMoneyLogsFieldNumber = 3;
  inline const ::BINMoneyLog& moneylogs(int index) const;
  inline ::BINMoneyLog* mutable_moneylogs(int index);
  inline ::BINMoneyLog* add_moneylogs();
  inline const ::google::protobuf::RepeatedPtrField< ::BINMoneyLog >&
      moneylogs() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINMoneyLog >*
      mutable_moneylogs();

  // @@protoc_insertion_point(class_scope:BINLookUpMoneyHistoryResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::RepeatedPtrField< ::BINMoneyLog > moneylogs_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lookup_5fmoney_5fhistory_2eproto();
  friend void protobuf_AssignDesc_lookup_5fmoney_5fhistory_2eproto();
  friend void protobuf_ShutdownFile_lookup_5fmoney_5fhistory_2eproto();

  void InitAsDefaultInstance();
  static BINLookUpMoneyHistoryResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINLookUpMoneyHistoryRequest

// required int32 firstResult = 1;
inline bool BINLookUpMoneyHistoryRequest::has_firstresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINLookUpMoneyHistoryRequest::set_has_firstresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINLookUpMoneyHistoryRequest::clear_has_firstresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINLookUpMoneyHistoryRequest::clear_firstresult() {
  firstresult_ = 0;
  clear_has_firstresult();
}
inline ::google::protobuf::int32 BINLookUpMoneyHistoryRequest::firstresult() const {
  return firstresult_;
}
inline void BINLookUpMoneyHistoryRequest::set_firstresult(::google::protobuf::int32 value) {
  set_has_firstresult();
  firstresult_ = value;
}

// required int32 maxResult = 2;
inline bool BINLookUpMoneyHistoryRequest::has_maxresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINLookUpMoneyHistoryRequest::set_has_maxresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINLookUpMoneyHistoryRequest::clear_has_maxresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINLookUpMoneyHistoryRequest::clear_maxresult() {
  maxresult_ = 0;
  clear_has_maxresult();
}
inline ::google::protobuf::int32 BINLookUpMoneyHistoryRequest::maxresult() const {
  return maxresult_;
}
inline void BINLookUpMoneyHistoryRequest::set_maxresult(::google::protobuf::int32 value) {
  set_has_maxresult();
  maxresult_ = value;
}

// required int32 filterType = 3;
inline bool BINLookUpMoneyHistoryRequest::has_filtertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINLookUpMoneyHistoryRequest::set_has_filtertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINLookUpMoneyHistoryRequest::clear_has_filtertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINLookUpMoneyHistoryRequest::clear_filtertype() {
  filtertype_ = 0;
  clear_has_filtertype();
}
inline ::google::protobuf::int32 BINLookUpMoneyHistoryRequest::filtertype() const {
  return filtertype_;
}
inline void BINLookUpMoneyHistoryRequest::set_filtertype(::google::protobuf::int32 value) {
  set_has_filtertype();
  filtertype_ = value;
}

// -------------------------------------------------------------------

// BINMoneyLog

// required int64 logId = 1;
inline bool BINMoneyLog::has_logid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINMoneyLog::set_has_logid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINMoneyLog::clear_has_logid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINMoneyLog::clear_logid() {
  logid_ = GOOGLE_LONGLONG(0);
  clear_has_logid();
}
inline ::google::protobuf::int64 BINMoneyLog::logid() const {
  return logid_;
}
inline void BINMoneyLog::set_logid(::google::protobuf::int64 value) {
  set_has_logid();
  logid_ = value;
}

// optional string uuid = 2;
inline bool BINMoneyLog::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINMoneyLog::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINMoneyLog::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINMoneyLog::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& BINMoneyLog::uuid() const {
  return *uuid_;
}
inline void BINMoneyLog::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void BINMoneyLog::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void BINMoneyLog::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINMoneyLog::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* BINMoneyLog::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINMoneyLog::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 logStamp = 3;
inline bool BINMoneyLog::has_logstamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINMoneyLog::set_has_logstamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINMoneyLog::clear_has_logstamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINMoneyLog::clear_logstamp() {
  logstamp_ = GOOGLE_LONGLONG(0);
  clear_has_logstamp();
}
inline ::google::protobuf::int64 BINMoneyLog::logstamp() const {
  return logstamp_;
}
inline void BINMoneyLog::set_logstamp(::google::protobuf::int64 value) {
  set_has_logstamp();
  logstamp_ = value;
}

// optional int64 insertedTime = 4;
inline bool BINMoneyLog::has_insertedtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINMoneyLog::set_has_insertedtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINMoneyLog::clear_has_insertedtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINMoneyLog::clear_insertedtime() {
  insertedtime_ = GOOGLE_LONGLONG(0);
  clear_has_insertedtime();
}
inline ::google::protobuf::int64 BINMoneyLog::insertedtime() const {
  return insertedtime_;
}
inline void BINMoneyLog::set_insertedtime(::google::protobuf::int64 value) {
  set_has_insertedtime();
  insertedtime_ = value;
}

// optional int64 currentMoney = 5;
inline bool BINMoneyLog::has_currentmoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINMoneyLog::set_has_currentmoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINMoneyLog::clear_has_currentmoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINMoneyLog::clear_currentmoney() {
  currentmoney_ = GOOGLE_LONGLONG(0);
  clear_has_currentmoney();
}
inline ::google::protobuf::int64 BINMoneyLog::currentmoney() const {
  return currentmoney_;
}
inline void BINMoneyLog::set_currentmoney(::google::protobuf::int64 value) {
  set_has_currentmoney();
  currentmoney_ = value;
}

// optional int64 changeMoney = 6;
inline bool BINMoneyLog::has_changemoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINMoneyLog::set_has_changemoney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINMoneyLog::clear_has_changemoney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINMoneyLog::clear_changemoney() {
  changemoney_ = GOOGLE_LONGLONG(0);
  clear_has_changemoney();
}
inline ::google::protobuf::int64 BINMoneyLog::changemoney() const {
  return changemoney_;
}
inline void BINMoneyLog::set_changemoney(::google::protobuf::int64 value) {
  set_has_changemoney();
  changemoney_ = value;
}

// optional int64 lastMoney = 7;
inline bool BINMoneyLog::has_lastmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BINMoneyLog::set_has_lastmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BINMoneyLog::clear_has_lastmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BINMoneyLog::clear_lastmoney() {
  lastmoney_ = GOOGLE_LONGLONG(0);
  clear_has_lastmoney();
}
inline ::google::protobuf::int64 BINMoneyLog::lastmoney() const {
  return lastmoney_;
}
inline void BINMoneyLog::set_lastmoney(::google::protobuf::int64 value) {
  set_has_lastmoney();
  lastmoney_ = value;
}

// optional bool isCash = 8;
inline bool BINMoneyLog::has_iscash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BINMoneyLog::set_has_iscash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BINMoneyLog::clear_has_iscash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BINMoneyLog::clear_iscash() {
  iscash_ = false;
  clear_has_iscash();
}
inline bool BINMoneyLog::iscash() const {
  return iscash_;
}
inline void BINMoneyLog::set_iscash(bool value) {
  set_has_iscash();
  iscash_ = value;
}

// optional string transactionType = 9;
inline bool BINMoneyLog::has_transactiontype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BINMoneyLog::set_has_transactiontype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BINMoneyLog::clear_has_transactiontype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BINMoneyLog::clear_transactiontype() {
  if (transactiontype_ != &::google::protobuf::internal::kEmptyString) {
    transactiontype_->clear();
  }
  clear_has_transactiontype();
}
inline const ::std::string& BINMoneyLog::transactiontype() const {
  return *transactiontype_;
}
inline void BINMoneyLog::set_transactiontype(const ::std::string& value) {
  set_has_transactiontype();
  if (transactiontype_ == &::google::protobuf::internal::kEmptyString) {
    transactiontype_ = new ::std::string;
  }
  transactiontype_->assign(value);
}
inline void BINMoneyLog::set_transactiontype(const char* value) {
  set_has_transactiontype();
  if (transactiontype_ == &::google::protobuf::internal::kEmptyString) {
    transactiontype_ = new ::std::string;
  }
  transactiontype_->assign(value);
}
inline void BINMoneyLog::set_transactiontype(const char* value, size_t size) {
  set_has_transactiontype();
  if (transactiontype_ == &::google::protobuf::internal::kEmptyString) {
    transactiontype_ = new ::std::string;
  }
  transactiontype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINMoneyLog::mutable_transactiontype() {
  set_has_transactiontype();
  if (transactiontype_ == &::google::protobuf::internal::kEmptyString) {
    transactiontype_ = new ::std::string;
  }
  return transactiontype_;
}
inline ::std::string* BINMoneyLog::release_transactiontype() {
  clear_has_transactiontype();
  if (transactiontype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transactiontype_;
    transactiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINMoneyLog::set_allocated_transactiontype(::std::string* transactiontype) {
  if (transactiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete transactiontype_;
  }
  if (transactiontype) {
    set_has_transactiontype();
    transactiontype_ = transactiontype;
  } else {
    clear_has_transactiontype();
    transactiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string description = 10;
inline bool BINMoneyLog::has_description() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BINMoneyLog::set_has_description() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BINMoneyLog::clear_has_description() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BINMoneyLog::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& BINMoneyLog::description() const {
  return *description_;
}
inline void BINMoneyLog::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void BINMoneyLog::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void BINMoneyLog::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINMoneyLog::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* BINMoneyLog::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINMoneyLog::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BINLookUpMoneyHistoryResponse

// required bool responseCode = 1;
inline bool BINLookUpMoneyHistoryResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINLookUpMoneyHistoryResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINLookUpMoneyHistoryResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINLookUpMoneyHistoryResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINLookUpMoneyHistoryResponse::responsecode() const {
  return responsecode_;
}
inline void BINLookUpMoneyHistoryResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINLookUpMoneyHistoryResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINLookUpMoneyHistoryResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINLookUpMoneyHistoryResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINLookUpMoneyHistoryResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINLookUpMoneyHistoryResponse::message() const {
  return *message_;
}
inline void BINLookUpMoneyHistoryResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINLookUpMoneyHistoryResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINLookUpMoneyHistoryResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINLookUpMoneyHistoryResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINLookUpMoneyHistoryResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINLookUpMoneyHistoryResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .BINMoneyLog moneyLogs = 3;
inline int BINLookUpMoneyHistoryResponse::moneylogs_size() const {
  return moneylogs_.size();
}
inline void BINLookUpMoneyHistoryResponse::clear_moneylogs() {
  moneylogs_.Clear();
}
inline const ::BINMoneyLog& BINLookUpMoneyHistoryResponse::moneylogs(int index) const {
  return moneylogs_.Get(index);
}
inline ::BINMoneyLog* BINLookUpMoneyHistoryResponse::mutable_moneylogs(int index) {
  return moneylogs_.Mutable(index);
}
inline ::BINMoneyLog* BINLookUpMoneyHistoryResponse::add_moneylogs() {
  return moneylogs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINMoneyLog >&
BINLookUpMoneyHistoryResponse::moneylogs() const {
  return moneylogs_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINMoneyLog >*
BINLookUpMoneyHistoryResponse::mutable_moneylogs() {
  return &moneylogs_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lookup_5fmoney_5fhistory_2eproto__INCLUDED
