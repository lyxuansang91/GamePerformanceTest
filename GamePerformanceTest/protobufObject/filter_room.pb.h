// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filter_room.proto

#ifndef PROTOBUF_filter_5froom_2eproto__INCLUDED
#define PROTOBUF_filter_5froom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_filter_5froom_2eproto();
void protobuf_AssignDesc_filter_5froom_2eproto();
void protobuf_ShutdownFile_filter_5froom_2eproto();

class BINFilterRoomRequest;
class BINRoomPlay;
class BINFilterRoomResponse;

// ===================================================================

class BINFilterRoomRequest : public ::google::protobuf::Message {
 public:
  BINFilterRoomRequest();
  virtual ~BINFilterRoomRequest();

  BINFilterRoomRequest(const BINFilterRoomRequest& from);

  inline BINFilterRoomRequest& operator=(const BINFilterRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINFilterRoomRequest& default_instance();

  void Swap(BINFilterRoomRequest* other);

  // implements Message ----------------------------------------------

  BINFilterRoomRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINFilterRoomRequest& from);
  void MergeFrom(const BINFilterRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 zoneId = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneIdFieldNumber = 1;
  inline ::google::protobuf::int32 zoneid() const;
  inline void set_zoneid(::google::protobuf::int32 value);

  // required bool vipRoom = 2;
  inline bool has_viproom() const;
  inline void clear_viproom();
  static const int kVipRoomFieldNumber = 2;
  inline bool viproom() const;
  inline void set_viproom(bool value);

  // required int32 firstResult = 3;
  inline bool has_firstresult() const;
  inline void clear_firstresult();
  static const int kFirstResultFieldNumber = 3;
  inline ::google::protobuf::int32 firstresult() const;
  inline void set_firstresult(::google::protobuf::int32 value);

  // required int32 maxResult = 4;
  inline bool has_maxresult() const;
  inline void clear_maxresult();
  static const int kMaxResultFieldNumber = 4;
  inline ::google::protobuf::int32 maxresult() const;
  inline void set_maxresult(::google::protobuf::int32 value);

  // optional int32 orderByField = 5;
  inline bool has_orderbyfield() const;
  inline void clear_orderbyfield();
  static const int kOrderByFieldFieldNumber = 5;
  inline ::google::protobuf::int32 orderbyfield() const;
  inline void set_orderbyfield(::google::protobuf::int32 value);

  // optional bool asc = 6;
  inline bool has_asc() const;
  inline void clear_asc();
  static const int kAscFieldNumber = 6;
  inline bool asc() const;
  inline void set_asc(bool value);

  // @@protoc_insertion_point(class_scope:BINFilterRoomRequest)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_viproom();
  inline void clear_has_viproom();
  inline void set_has_firstresult();
  inline void clear_has_firstresult();
  inline void set_has_maxresult();
  inline void clear_has_maxresult();
  inline void set_has_orderbyfield();
  inline void clear_has_orderbyfield();
  inline void set_has_asc();
  inline void clear_has_asc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 zoneid_;
  ::google::protobuf::int32 firstresult_;
  ::google::protobuf::int32 maxresult_;
  bool viproom_;
  bool asc_;
  ::google::protobuf::int32 orderbyfield_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_filter_5froom_2eproto();
  friend void protobuf_AssignDesc_filter_5froom_2eproto();
  friend void protobuf_ShutdownFile_filter_5froom_2eproto();

  void InitAsDefaultInstance();
  static BINFilterRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINRoomPlay : public ::google::protobuf::Message {
 public:
  BINRoomPlay();
  virtual ~BINRoomPlay();

  BINRoomPlay(const BINRoomPlay& from);

  inline BINRoomPlay& operator=(const BINRoomPlay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINRoomPlay& default_instance();

  void Swap(BINRoomPlay* other);

  // implements Message ----------------------------------------------

  BINRoomPlay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINRoomPlay& from);
  void MergeFrom(const BINRoomPlay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roomIndex = 1;
  inline bool has_roomindex() const;
  inline void clear_roomindex();
  static const int kRoomIndexFieldNumber = 1;
  inline ::google::protobuf::int32 roomindex() const;
  inline void set_roomindex(::google::protobuf::int32 value);

  // required string roomName = 2;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomNameFieldNumber = 2;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  inline ::std::string* release_roomname();
  inline void set_allocated_roomname(::std::string* roomname);

  // required int64 roomId = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int64 roomid() const;
  inline void set_roomid(::google::protobuf::int64 value);

  // required int32 roomGroupId = 4;
  inline bool has_roomgroupid() const;
  inline void clear_roomgroupid();
  static const int kRoomGroupIdFieldNumber = 4;
  inline ::google::protobuf::int32 roomgroupid() const;
  inline void set_roomgroupid(::google::protobuf::int32 value);

  // required int32 minBet = 5;
  inline bool has_minbet() const;
  inline void clear_minbet();
  static const int kMinBetFieldNumber = 5;
  inline ::google::protobuf::int32 minbet() const;
  inline void set_minbet(::google::protobuf::int32 value);

  // required int64 minEnterMoney = 6;
  inline bool has_minentermoney() const;
  inline void clear_minentermoney();
  static const int kMinEnterMoneyFieldNumber = 6;
  inline ::google::protobuf::int64 minentermoney() const;
  inline void set_minentermoney(::google::protobuf::int64 value);

  // required int32 roomCapacity = 7;
  inline bool has_roomcapacity() const;
  inline void clear_roomcapacity();
  static const int kRoomCapacityFieldNumber = 7;
  inline ::google::protobuf::int32 roomcapacity() const;
  inline void set_roomcapacity(::google::protobuf::int32 value);

  // required int32 enteringPlayer = 8;
  inline bool has_enteringplayer() const;
  inline void clear_enteringplayer();
  static const int kEnteringPlayerFieldNumber = 8;
  inline ::google::protobuf::int32 enteringplayer() const;
  inline void set_enteringplayer(::google::protobuf::int32 value);

  // required int32 playerSize = 9;
  inline bool has_playersize() const;
  inline void clear_playersize();
  static const int kPlayerSizeFieldNumber = 9;
  inline ::google::protobuf::int32 playersize() const;
  inline void set_playersize(::google::protobuf::int32 value);

  // required int32 playingPlayer = 10;
  inline bool has_playingplayer() const;
  inline void clear_playingplayer();
  static const int kPlayingPlayerFieldNumber = 10;
  inline ::google::protobuf::int32 playingplayer() const;
  inline void set_playingplayer(::google::protobuf::int32 value);

  // required int32 level = 11;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 11;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 tax = 12;
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 12;
  inline ::google::protobuf::int32 tax() const;
  inline void set_tax(::google::protobuf::int32 value);

  // optional string ownerUserName = 13;
  inline bool has_ownerusername() const;
  inline void clear_ownerusername();
  static const int kOwnerUserNameFieldNumber = 13;
  inline const ::std::string& ownerusername() const;
  inline void set_ownerusername(const ::std::string& value);
  inline void set_ownerusername(const char* value);
  inline void set_ownerusername(const char* value, size_t size);
  inline ::std::string* mutable_ownerusername();
  inline ::std::string* release_ownerusername();
  inline void set_allocated_ownerusername(::std::string* ownerusername);

  // required bool vipRoom = 14;
  inline bool has_viproom() const;
  inline void clear_viproom();
  static const int kVipRoomFieldNumber = 14;
  inline bool viproom() const;
  inline void set_viproom(bool value);

  // required bool passwordRequired = 15;
  inline bool has_passwordrequired() const;
  inline void clear_passwordrequired();
  static const int kPasswordRequiredFieldNumber = 15;
  inline bool passwordrequired() const;
  inline void set_passwordrequired(bool value);

  // optional string roomConfig = 16;
  inline bool has_roomconfig() const;
  inline void clear_roomconfig();
  static const int kRoomConfigFieldNumber = 16;
  inline const ::std::string& roomconfig() const;
  inline void set_roomconfig(const ::std::string& value);
  inline void set_roomconfig(const char* value);
  inline void set_roomconfig(const char* value, size_t size);
  inline ::std::string* mutable_roomconfig();
  inline ::std::string* release_roomconfig();
  inline void set_allocated_roomconfig(::std::string* roomconfig);

  // @@protoc_insertion_point(class_scope:BINRoomPlay)
 private:
  inline void set_has_roomindex();
  inline void clear_has_roomindex();
  inline void set_has_roomname();
  inline void clear_has_roomname();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_roomgroupid();
  inline void clear_has_roomgroupid();
  inline void set_has_minbet();
  inline void clear_has_minbet();
  inline void set_has_minentermoney();
  inline void clear_has_minentermoney();
  inline void set_has_roomcapacity();
  inline void clear_has_roomcapacity();
  inline void set_has_enteringplayer();
  inline void clear_has_enteringplayer();
  inline void set_has_playersize();
  inline void clear_has_playersize();
  inline void set_has_playingplayer();
  inline void clear_has_playingplayer();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_tax();
  inline void clear_has_tax();
  inline void set_has_ownerusername();
  inline void clear_has_ownerusername();
  inline void set_has_viproom();
  inline void clear_has_viproom();
  inline void set_has_passwordrequired();
  inline void clear_has_passwordrequired();
  inline void set_has_roomconfig();
  inline void clear_has_roomconfig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* roomname_;
  ::google::protobuf::int32 roomindex_;
  ::google::protobuf::int32 roomgroupid_;
  ::google::protobuf::int64 roomid_;
  ::google::protobuf::int64 minentermoney_;
  ::google::protobuf::int32 minbet_;
  ::google::protobuf::int32 roomcapacity_;
  ::google::protobuf::int32 enteringplayer_;
  ::google::protobuf::int32 playersize_;
  ::google::protobuf::int32 playingplayer_;
  ::google::protobuf::int32 level_;
  ::std::string* ownerusername_;
  ::google::protobuf::int32 tax_;
  bool viproom_;
  bool passwordrequired_;
  ::std::string* roomconfig_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_filter_5froom_2eproto();
  friend void protobuf_AssignDesc_filter_5froom_2eproto();
  friend void protobuf_ShutdownFile_filter_5froom_2eproto();

  void InitAsDefaultInstance();
  static BINRoomPlay* default_instance_;
};
// -------------------------------------------------------------------

class BINFilterRoomResponse : public ::google::protobuf::Message {
 public:
  BINFilterRoomResponse();
  virtual ~BINFilterRoomResponse();

  BINFilterRoomResponse(const BINFilterRoomResponse& from);

  inline BINFilterRoomResponse& operator=(const BINFilterRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINFilterRoomResponse& default_instance();

  void Swap(BINFilterRoomResponse* other);

  // implements Message ----------------------------------------------

  BINFilterRoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINFilterRoomResponse& from);
  void MergeFrom(const BINFilterRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // repeated .BINRoomPlay roomPlays = 3;
  inline int roomplays_size() const;
  inline void clear_roomplays();
  static const int kRoomPlaysFieldNumber = 3;
  inline const ::BINRoomPlay& roomplays(int index) const;
  inline ::BINRoomPlay* mutable_roomplays(int index);
  inline ::BINRoomPlay* add_roomplays();
  inline const ::google::protobuf::RepeatedPtrField< ::BINRoomPlay >&
      roomplays() const;
  inline ::google::protobuf::RepeatedPtrField< ::BINRoomPlay >*
      mutable_roomplays();

  // @@protoc_insertion_point(class_scope:BINFilterRoomResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::RepeatedPtrField< ::BINRoomPlay > roomplays_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_filter_5froom_2eproto();
  friend void protobuf_AssignDesc_filter_5froom_2eproto();
  friend void protobuf_ShutdownFile_filter_5froom_2eproto();

  void InitAsDefaultInstance();
  static BINFilterRoomResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINFilterRoomRequest

// required int32 zoneId = 1;
inline bool BINFilterRoomRequest::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINFilterRoomRequest::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINFilterRoomRequest::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINFilterRoomRequest::clear_zoneid() {
  zoneid_ = 0;
  clear_has_zoneid();
}
inline ::google::protobuf::int32 BINFilterRoomRequest::zoneid() const {
  return zoneid_;
}
inline void BINFilterRoomRequest::set_zoneid(::google::protobuf::int32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required bool vipRoom = 2;
inline bool BINFilterRoomRequest::has_viproom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINFilterRoomRequest::set_has_viproom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINFilterRoomRequest::clear_has_viproom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINFilterRoomRequest::clear_viproom() {
  viproom_ = false;
  clear_has_viproom();
}
inline bool BINFilterRoomRequest::viproom() const {
  return viproom_;
}
inline void BINFilterRoomRequest::set_viproom(bool value) {
  set_has_viproom();
  viproom_ = value;
}

// required int32 firstResult = 3;
inline bool BINFilterRoomRequest::has_firstresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINFilterRoomRequest::set_has_firstresult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINFilterRoomRequest::clear_has_firstresult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINFilterRoomRequest::clear_firstresult() {
  firstresult_ = 0;
  clear_has_firstresult();
}
inline ::google::protobuf::int32 BINFilterRoomRequest::firstresult() const {
  return firstresult_;
}
inline void BINFilterRoomRequest::set_firstresult(::google::protobuf::int32 value) {
  set_has_firstresult();
  firstresult_ = value;
}

// required int32 maxResult = 4;
inline bool BINFilterRoomRequest::has_maxresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINFilterRoomRequest::set_has_maxresult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINFilterRoomRequest::clear_has_maxresult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINFilterRoomRequest::clear_maxresult() {
  maxresult_ = 0;
  clear_has_maxresult();
}
inline ::google::protobuf::int32 BINFilterRoomRequest::maxresult() const {
  return maxresult_;
}
inline void BINFilterRoomRequest::set_maxresult(::google::protobuf::int32 value) {
  set_has_maxresult();
  maxresult_ = value;
}

// optional int32 orderByField = 5;
inline bool BINFilterRoomRequest::has_orderbyfield() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINFilterRoomRequest::set_has_orderbyfield() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINFilterRoomRequest::clear_has_orderbyfield() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINFilterRoomRequest::clear_orderbyfield() {
  orderbyfield_ = 0;
  clear_has_orderbyfield();
}
inline ::google::protobuf::int32 BINFilterRoomRequest::orderbyfield() const {
  return orderbyfield_;
}
inline void BINFilterRoomRequest::set_orderbyfield(::google::protobuf::int32 value) {
  set_has_orderbyfield();
  orderbyfield_ = value;
}

// optional bool asc = 6;
inline bool BINFilterRoomRequest::has_asc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINFilterRoomRequest::set_has_asc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINFilterRoomRequest::clear_has_asc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINFilterRoomRequest::clear_asc() {
  asc_ = false;
  clear_has_asc();
}
inline bool BINFilterRoomRequest::asc() const {
  return asc_;
}
inline void BINFilterRoomRequest::set_asc(bool value) {
  set_has_asc();
  asc_ = value;
}

// -------------------------------------------------------------------

// BINRoomPlay

// required int32 roomIndex = 1;
inline bool BINRoomPlay::has_roomindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINRoomPlay::set_has_roomindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINRoomPlay::clear_has_roomindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINRoomPlay::clear_roomindex() {
  roomindex_ = 0;
  clear_has_roomindex();
}
inline ::google::protobuf::int32 BINRoomPlay::roomindex() const {
  return roomindex_;
}
inline void BINRoomPlay::set_roomindex(::google::protobuf::int32 value) {
  set_has_roomindex();
  roomindex_ = value;
}

// required string roomName = 2;
inline bool BINRoomPlay::has_roomname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINRoomPlay::set_has_roomname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINRoomPlay::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINRoomPlay::clear_roomname() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    roomname_->clear();
  }
  clear_has_roomname();
}
inline const ::std::string& BINRoomPlay::roomname() const {
  return *roomname_;
}
inline void BINRoomPlay::set_roomname(const ::std::string& value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void BINRoomPlay::set_roomname(const char* value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void BINRoomPlay::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRoomPlay::mutable_roomname() {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  return roomname_;
}
inline ::std::string* BINRoomPlay::release_roomname() {
  clear_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomname_;
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRoomPlay::set_allocated_roomname(::std::string* roomname) {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (roomname) {
    set_has_roomname();
    roomname_ = roomname;
  } else {
    clear_has_roomname();
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 roomId = 3;
inline bool BINRoomPlay::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINRoomPlay::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINRoomPlay::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINRoomPlay::clear_roomid() {
  roomid_ = GOOGLE_LONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::int64 BINRoomPlay::roomid() const {
  return roomid_;
}
inline void BINRoomPlay::set_roomid(::google::protobuf::int64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required int32 roomGroupId = 4;
inline bool BINRoomPlay::has_roomgroupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINRoomPlay::set_has_roomgroupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINRoomPlay::clear_has_roomgroupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINRoomPlay::clear_roomgroupid() {
  roomgroupid_ = 0;
  clear_has_roomgroupid();
}
inline ::google::protobuf::int32 BINRoomPlay::roomgroupid() const {
  return roomgroupid_;
}
inline void BINRoomPlay::set_roomgroupid(::google::protobuf::int32 value) {
  set_has_roomgroupid();
  roomgroupid_ = value;
}

// required int32 minBet = 5;
inline bool BINRoomPlay::has_minbet() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINRoomPlay::set_has_minbet() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINRoomPlay::clear_has_minbet() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINRoomPlay::clear_minbet() {
  minbet_ = 0;
  clear_has_minbet();
}
inline ::google::protobuf::int32 BINRoomPlay::minbet() const {
  return minbet_;
}
inline void BINRoomPlay::set_minbet(::google::protobuf::int32 value) {
  set_has_minbet();
  minbet_ = value;
}

// required int64 minEnterMoney = 6;
inline bool BINRoomPlay::has_minentermoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINRoomPlay::set_has_minentermoney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINRoomPlay::clear_has_minentermoney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINRoomPlay::clear_minentermoney() {
  minentermoney_ = GOOGLE_LONGLONG(0);
  clear_has_minentermoney();
}
inline ::google::protobuf::int64 BINRoomPlay::minentermoney() const {
  return minentermoney_;
}
inline void BINRoomPlay::set_minentermoney(::google::protobuf::int64 value) {
  set_has_minentermoney();
  minentermoney_ = value;
}

// required int32 roomCapacity = 7;
inline bool BINRoomPlay::has_roomcapacity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BINRoomPlay::set_has_roomcapacity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BINRoomPlay::clear_has_roomcapacity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BINRoomPlay::clear_roomcapacity() {
  roomcapacity_ = 0;
  clear_has_roomcapacity();
}
inline ::google::protobuf::int32 BINRoomPlay::roomcapacity() const {
  return roomcapacity_;
}
inline void BINRoomPlay::set_roomcapacity(::google::protobuf::int32 value) {
  set_has_roomcapacity();
  roomcapacity_ = value;
}

// required int32 enteringPlayer = 8;
inline bool BINRoomPlay::has_enteringplayer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BINRoomPlay::set_has_enteringplayer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BINRoomPlay::clear_has_enteringplayer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BINRoomPlay::clear_enteringplayer() {
  enteringplayer_ = 0;
  clear_has_enteringplayer();
}
inline ::google::protobuf::int32 BINRoomPlay::enteringplayer() const {
  return enteringplayer_;
}
inline void BINRoomPlay::set_enteringplayer(::google::protobuf::int32 value) {
  set_has_enteringplayer();
  enteringplayer_ = value;
}

// required int32 playerSize = 9;
inline bool BINRoomPlay::has_playersize() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BINRoomPlay::set_has_playersize() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BINRoomPlay::clear_has_playersize() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BINRoomPlay::clear_playersize() {
  playersize_ = 0;
  clear_has_playersize();
}
inline ::google::protobuf::int32 BINRoomPlay::playersize() const {
  return playersize_;
}
inline void BINRoomPlay::set_playersize(::google::protobuf::int32 value) {
  set_has_playersize();
  playersize_ = value;
}

// required int32 playingPlayer = 10;
inline bool BINRoomPlay::has_playingplayer() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BINRoomPlay::set_has_playingplayer() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BINRoomPlay::clear_has_playingplayer() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BINRoomPlay::clear_playingplayer() {
  playingplayer_ = 0;
  clear_has_playingplayer();
}
inline ::google::protobuf::int32 BINRoomPlay::playingplayer() const {
  return playingplayer_;
}
inline void BINRoomPlay::set_playingplayer(::google::protobuf::int32 value) {
  set_has_playingplayer();
  playingplayer_ = value;
}

// required int32 level = 11;
inline bool BINRoomPlay::has_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BINRoomPlay::set_has_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BINRoomPlay::clear_has_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BINRoomPlay::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BINRoomPlay::level() const {
  return level_;
}
inline void BINRoomPlay::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 tax = 12;
inline bool BINRoomPlay::has_tax() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BINRoomPlay::set_has_tax() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BINRoomPlay::clear_has_tax() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BINRoomPlay::clear_tax() {
  tax_ = 0;
  clear_has_tax();
}
inline ::google::protobuf::int32 BINRoomPlay::tax() const {
  return tax_;
}
inline void BINRoomPlay::set_tax(::google::protobuf::int32 value) {
  set_has_tax();
  tax_ = value;
}

// optional string ownerUserName = 13;
inline bool BINRoomPlay::has_ownerusername() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BINRoomPlay::set_has_ownerusername() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BINRoomPlay::clear_has_ownerusername() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BINRoomPlay::clear_ownerusername() {
  if (ownerusername_ != &::google::protobuf::internal::kEmptyString) {
    ownerusername_->clear();
  }
  clear_has_ownerusername();
}
inline const ::std::string& BINRoomPlay::ownerusername() const {
  return *ownerusername_;
}
inline void BINRoomPlay::set_ownerusername(const ::std::string& value) {
  set_has_ownerusername();
  if (ownerusername_ == &::google::protobuf::internal::kEmptyString) {
    ownerusername_ = new ::std::string;
  }
  ownerusername_->assign(value);
}
inline void BINRoomPlay::set_ownerusername(const char* value) {
  set_has_ownerusername();
  if (ownerusername_ == &::google::protobuf::internal::kEmptyString) {
    ownerusername_ = new ::std::string;
  }
  ownerusername_->assign(value);
}
inline void BINRoomPlay::set_ownerusername(const char* value, size_t size) {
  set_has_ownerusername();
  if (ownerusername_ == &::google::protobuf::internal::kEmptyString) {
    ownerusername_ = new ::std::string;
  }
  ownerusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRoomPlay::mutable_ownerusername() {
  set_has_ownerusername();
  if (ownerusername_ == &::google::protobuf::internal::kEmptyString) {
    ownerusername_ = new ::std::string;
  }
  return ownerusername_;
}
inline ::std::string* BINRoomPlay::release_ownerusername() {
  clear_has_ownerusername();
  if (ownerusername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ownerusername_;
    ownerusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRoomPlay::set_allocated_ownerusername(::std::string* ownerusername) {
  if (ownerusername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownerusername_;
  }
  if (ownerusername) {
    set_has_ownerusername();
    ownerusername_ = ownerusername;
  } else {
    clear_has_ownerusername();
    ownerusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool vipRoom = 14;
inline bool BINRoomPlay::has_viproom() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BINRoomPlay::set_has_viproom() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BINRoomPlay::clear_has_viproom() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BINRoomPlay::clear_viproom() {
  viproom_ = false;
  clear_has_viproom();
}
inline bool BINRoomPlay::viproom() const {
  return viproom_;
}
inline void BINRoomPlay::set_viproom(bool value) {
  set_has_viproom();
  viproom_ = value;
}

// required bool passwordRequired = 15;
inline bool BINRoomPlay::has_passwordrequired() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BINRoomPlay::set_has_passwordrequired() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BINRoomPlay::clear_has_passwordrequired() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BINRoomPlay::clear_passwordrequired() {
  passwordrequired_ = false;
  clear_has_passwordrequired();
}
inline bool BINRoomPlay::passwordrequired() const {
  return passwordrequired_;
}
inline void BINRoomPlay::set_passwordrequired(bool value) {
  set_has_passwordrequired();
  passwordrequired_ = value;
}

// optional string roomConfig = 16;
inline bool BINRoomPlay::has_roomconfig() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BINRoomPlay::set_has_roomconfig() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BINRoomPlay::clear_has_roomconfig() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BINRoomPlay::clear_roomconfig() {
  if (roomconfig_ != &::google::protobuf::internal::kEmptyString) {
    roomconfig_->clear();
  }
  clear_has_roomconfig();
}
inline const ::std::string& BINRoomPlay::roomconfig() const {
  return *roomconfig_;
}
inline void BINRoomPlay::set_roomconfig(const ::std::string& value) {
  set_has_roomconfig();
  if (roomconfig_ == &::google::protobuf::internal::kEmptyString) {
    roomconfig_ = new ::std::string;
  }
  roomconfig_->assign(value);
}
inline void BINRoomPlay::set_roomconfig(const char* value) {
  set_has_roomconfig();
  if (roomconfig_ == &::google::protobuf::internal::kEmptyString) {
    roomconfig_ = new ::std::string;
  }
  roomconfig_->assign(value);
}
inline void BINRoomPlay::set_roomconfig(const char* value, size_t size) {
  set_has_roomconfig();
  if (roomconfig_ == &::google::protobuf::internal::kEmptyString) {
    roomconfig_ = new ::std::string;
  }
  roomconfig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRoomPlay::mutable_roomconfig() {
  set_has_roomconfig();
  if (roomconfig_ == &::google::protobuf::internal::kEmptyString) {
    roomconfig_ = new ::std::string;
  }
  return roomconfig_;
}
inline ::std::string* BINRoomPlay::release_roomconfig() {
  clear_has_roomconfig();
  if (roomconfig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomconfig_;
    roomconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRoomPlay::set_allocated_roomconfig(::std::string* roomconfig) {
  if (roomconfig_ != &::google::protobuf::internal::kEmptyString) {
    delete roomconfig_;
  }
  if (roomconfig) {
    set_has_roomconfig();
    roomconfig_ = roomconfig;
  } else {
    clear_has_roomconfig();
    roomconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BINFilterRoomResponse

// required bool responseCode = 1;
inline bool BINFilterRoomResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINFilterRoomResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINFilterRoomResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINFilterRoomResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINFilterRoomResponse::responsecode() const {
  return responsecode_;
}
inline void BINFilterRoomResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINFilterRoomResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINFilterRoomResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINFilterRoomResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINFilterRoomResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINFilterRoomResponse::message() const {
  return *message_;
}
inline void BINFilterRoomResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINFilterRoomResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINFilterRoomResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINFilterRoomResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINFilterRoomResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINFilterRoomResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .BINRoomPlay roomPlays = 3;
inline int BINFilterRoomResponse::roomplays_size() const {
  return roomplays_.size();
}
inline void BINFilterRoomResponse::clear_roomplays() {
  roomplays_.Clear();
}
inline const ::BINRoomPlay& BINFilterRoomResponse::roomplays(int index) const {
  return roomplays_.Get(index);
}
inline ::BINRoomPlay* BINFilterRoomResponse::mutable_roomplays(int index) {
  return roomplays_.Mutable(index);
}
inline ::BINRoomPlay* BINFilterRoomResponse::add_roomplays() {
  return roomplays_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BINRoomPlay >&
BINFilterRoomResponse::roomplays() const {
  return roomplays_;
}
inline ::google::protobuf::RepeatedPtrField< ::BINRoomPlay >*
BINFilterRoomResponse::mutable_roomplays() {
  return &roomplays_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_filter_5froom_2eproto__INCLUDED
