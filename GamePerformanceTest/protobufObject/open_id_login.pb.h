// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: open_id_login.proto

#ifndef PROTOBUF_open_5fid_5flogin_2eproto__INCLUDED
#define PROTOBUF_open_5fid_5flogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_open_5fid_5flogin_2eproto();
void protobuf_AssignDesc_open_5fid_5flogin_2eproto();
void protobuf_ShutdownFile_open_5fid_5flogin_2eproto();

class BINOpenIdLoginRequest;

// ===================================================================

class BINOpenIdLoginRequest : public ::google::protobuf::Message {
 public:
  BINOpenIdLoginRequest();
  virtual ~BINOpenIdLoginRequest();

  BINOpenIdLoginRequest(const BINOpenIdLoginRequest& from);

  inline BINOpenIdLoginRequest& operator=(const BINOpenIdLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINOpenIdLoginRequest& default_instance();

  void Swap(BINOpenIdLoginRequest* other);

  // implements Message ----------------------------------------------

  BINOpenIdLoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINOpenIdLoginRequest& from);
  void MergeFrom(const BINOpenIdLoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // required string openId = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenIdFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional string firstName = 3;
  inline bool has_firstname() const;
  inline void clear_firstname();
  static const int kFirstNameFieldNumber = 3;
  inline const ::std::string& firstname() const;
  inline void set_firstname(const ::std::string& value);
  inline void set_firstname(const char* value);
  inline void set_firstname(const char* value, size_t size);
  inline ::std::string* mutable_firstname();
  inline ::std::string* release_firstname();
  inline void set_allocated_firstname(::std::string* firstname);

  // optional string lastName = 4;
  inline bool has_lastname() const;
  inline void clear_lastname();
  static const int kLastNameFieldNumber = 4;
  inline const ::std::string& lastname() const;
  inline void set_lastname(const ::std::string& value);
  inline void set_lastname(const char* value);
  inline void set_lastname(const char* value, size_t size);
  inline ::std::string* mutable_lastname();
  inline ::std::string* release_lastname();
  inline void set_allocated_lastname(::std::string* lastname);

  // optional string email = 5;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 5;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:BINOpenIdLoginRequest)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_firstname();
  inline void clear_has_firstname();
  inline void set_has_lastname();
  inline void clear_has_lastname();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::std::string* firstname_;
  ::std::string* lastname_;
  ::std::string* email_;
  ::google::protobuf::int32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_open_5fid_5flogin_2eproto();
  friend void protobuf_AssignDesc_open_5fid_5flogin_2eproto();
  friend void protobuf_ShutdownFile_open_5fid_5flogin_2eproto();

  void InitAsDefaultInstance();
  static BINOpenIdLoginRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// BINOpenIdLoginRequest

// required int32 channel = 1;
inline bool BINOpenIdLoginRequest::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINOpenIdLoginRequest::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINOpenIdLoginRequest::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINOpenIdLoginRequest::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 BINOpenIdLoginRequest::channel() const {
  return channel_;
}
inline void BINOpenIdLoginRequest::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// required string openId = 2;
inline bool BINOpenIdLoginRequest::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINOpenIdLoginRequest::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINOpenIdLoginRequest::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINOpenIdLoginRequest::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& BINOpenIdLoginRequest::openid() const {
  return *openid_;
}
inline void BINOpenIdLoginRequest::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void BINOpenIdLoginRequest::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void BINOpenIdLoginRequest::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINOpenIdLoginRequest::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* BINOpenIdLoginRequest::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINOpenIdLoginRequest::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string firstName = 3;
inline bool BINOpenIdLoginRequest::has_firstname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINOpenIdLoginRequest::set_has_firstname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINOpenIdLoginRequest::clear_has_firstname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINOpenIdLoginRequest::clear_firstname() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    firstname_->clear();
  }
  clear_has_firstname();
}
inline const ::std::string& BINOpenIdLoginRequest::firstname() const {
  return *firstname_;
}
inline void BINOpenIdLoginRequest::set_firstname(const ::std::string& value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void BINOpenIdLoginRequest::set_firstname(const char* value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void BINOpenIdLoginRequest::set_firstname(const char* value, size_t size) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINOpenIdLoginRequest::mutable_firstname() {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  return firstname_;
}
inline ::std::string* BINOpenIdLoginRequest::release_firstname() {
  clear_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firstname_;
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINOpenIdLoginRequest::set_allocated_firstname(::std::string* firstname) {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (firstname) {
    set_has_firstname();
    firstname_ = firstname;
  } else {
    clear_has_firstname();
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string lastName = 4;
inline bool BINOpenIdLoginRequest::has_lastname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINOpenIdLoginRequest::set_has_lastname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINOpenIdLoginRequest::clear_has_lastname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINOpenIdLoginRequest::clear_lastname() {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    lastname_->clear();
  }
  clear_has_lastname();
}
inline const ::std::string& BINOpenIdLoginRequest::lastname() const {
  return *lastname_;
}
inline void BINOpenIdLoginRequest::set_lastname(const ::std::string& value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void BINOpenIdLoginRequest::set_lastname(const char* value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void BINOpenIdLoginRequest::set_lastname(const char* value, size_t size) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINOpenIdLoginRequest::mutable_lastname() {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  return lastname_;
}
inline ::std::string* BINOpenIdLoginRequest::release_lastname() {
  clear_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastname_;
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINOpenIdLoginRequest::set_allocated_lastname(::std::string* lastname) {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (lastname) {
    set_has_lastname();
    lastname_ = lastname;
  } else {
    clear_has_lastname();
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string email = 5;
inline bool BINOpenIdLoginRequest::has_email() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINOpenIdLoginRequest::set_has_email() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINOpenIdLoginRequest::clear_has_email() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINOpenIdLoginRequest::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& BINOpenIdLoginRequest::email() const {
  return *email_;
}
inline void BINOpenIdLoginRequest::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void BINOpenIdLoginRequest::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void BINOpenIdLoginRequest::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINOpenIdLoginRequest::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* BINOpenIdLoginRequest::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINOpenIdLoginRequest::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_open_5fid_5flogin_2eproto__INCLUDED
