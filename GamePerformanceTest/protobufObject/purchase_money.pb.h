// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: purchase_money.proto

#ifndef PROTOBUF_purchase_5fmoney_2eproto__INCLUDED
#define PROTOBUF_purchase_5fmoney_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_purchase_5fmoney_2eproto();
void protobuf_AssignDesc_purchase_5fmoney_2eproto();
void protobuf_ShutdownFile_purchase_5fmoney_2eproto();

class BINPurchaseMoneyRequest;
class BINPurchaseMoneyResponse;

// ===================================================================

class BINPurchaseMoneyRequest : public ::google::protobuf::Message {
 public:
  BINPurchaseMoneyRequest();
  virtual ~BINPurchaseMoneyRequest();

  BINPurchaseMoneyRequest(const BINPurchaseMoneyRequest& from);

  inline BINPurchaseMoneyRequest& operator=(const BINPurchaseMoneyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINPurchaseMoneyRequest& default_instance();

  void Swap(BINPurchaseMoneyRequest* other);

  // implements Message ----------------------------------------------

  BINPurchaseMoneyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINPurchaseMoneyRequest& from);
  void MergeFrom(const BINPurchaseMoneyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string provider = 1;
  inline bool has_provider() const;
  inline void clear_provider();
  static const int kProviderFieldNumber = 1;
  inline const ::std::string& provider() const;
  inline void set_provider(const ::std::string& value);
  inline void set_provider(const char* value);
  inline void set_provider(const char* value, size_t size);
  inline ::std::string* mutable_provider();
  inline ::std::string* release_provider();
  inline void set_allocated_provider(::std::string* provider);

  // required string cardSerial = 2;
  inline bool has_cardserial() const;
  inline void clear_cardserial();
  static const int kCardSerialFieldNumber = 2;
  inline const ::std::string& cardserial() const;
  inline void set_cardserial(const ::std::string& value);
  inline void set_cardserial(const char* value);
  inline void set_cardserial(const char* value, size_t size);
  inline ::std::string* mutable_cardserial();
  inline ::std::string* release_cardserial();
  inline void set_allocated_cardserial(::std::string* cardserial);

  // required string cardPin = 3;
  inline bool has_cardpin() const;
  inline void clear_cardpin();
  static const int kCardPinFieldNumber = 3;
  inline const ::std::string& cardpin() const;
  inline void set_cardpin(const ::std::string& value);
  inline void set_cardpin(const char* value);
  inline void set_cardpin(const char* value, size_t size);
  inline ::std::string* mutable_cardpin();
  inline ::std::string* release_cardpin();
  inline void set_allocated_cardpin(::std::string* cardpin);

  // required string securityKey = 4;
  inline bool has_securitykey() const;
  inline void clear_securitykey();
  static const int kSecurityKeyFieldNumber = 4;
  inline const ::std::string& securitykey() const;
  inline void set_securitykey(const ::std::string& value);
  inline void set_securitykey(const char* value);
  inline void set_securitykey(const char* value, size_t size);
  inline ::std::string* mutable_securitykey();
  inline ::std::string* release_securitykey();
  inline void set_allocated_securitykey(::std::string* securitykey);

  // required string captcha = 5;
  inline bool has_captcha() const;
  inline void clear_captcha();
  static const int kCaptchaFieldNumber = 5;
  inline const ::std::string& captcha() const;
  inline void set_captcha(const ::std::string& value);
  inline void set_captcha(const char* value);
  inline void set_captcha(const char* value, size_t size);
  inline ::std::string* mutable_captcha();
  inline ::std::string* release_captcha();
  inline void set_allocated_captcha(::std::string* captcha);

  // optional bool toCash = 6;
  inline bool has_tocash() const;
  inline void clear_tocash();
  static const int kToCashFieldNumber = 6;
  inline bool tocash() const;
  inline void set_tocash(bool value);

  // @@protoc_insertion_point(class_scope:BINPurchaseMoneyRequest)
 private:
  inline void set_has_provider();
  inline void clear_has_provider();
  inline void set_has_cardserial();
  inline void clear_has_cardserial();
  inline void set_has_cardpin();
  inline void clear_has_cardpin();
  inline void set_has_securitykey();
  inline void clear_has_securitykey();
  inline void set_has_captcha();
  inline void clear_has_captcha();
  inline void set_has_tocash();
  inline void clear_has_tocash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* provider_;
  ::std::string* cardserial_;
  ::std::string* cardpin_;
  ::std::string* securitykey_;
  ::std::string* captcha_;
  bool tocash_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_purchase_5fmoney_2eproto();
  friend void protobuf_AssignDesc_purchase_5fmoney_2eproto();
  friend void protobuf_ShutdownFile_purchase_5fmoney_2eproto();

  void InitAsDefaultInstance();
  static BINPurchaseMoneyRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINPurchaseMoneyResponse : public ::google::protobuf::Message {
 public:
  BINPurchaseMoneyResponse();
  virtual ~BINPurchaseMoneyResponse();

  BINPurchaseMoneyResponse(const BINPurchaseMoneyResponse& from);

  inline BINPurchaseMoneyResponse& operator=(const BINPurchaseMoneyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINPurchaseMoneyResponse& default_instance();

  void Swap(BINPurchaseMoneyResponse* other);

  // implements Message ----------------------------------------------

  BINPurchaseMoneyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINPurchaseMoneyResponse& from);
  void MergeFrom(const BINPurchaseMoneyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:BINPurchaseMoneyResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_purchase_5fmoney_2eproto();
  friend void protobuf_AssignDesc_purchase_5fmoney_2eproto();
  friend void protobuf_ShutdownFile_purchase_5fmoney_2eproto();

  void InitAsDefaultInstance();
  static BINPurchaseMoneyResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINPurchaseMoneyRequest

// required string provider = 1;
inline bool BINPurchaseMoneyRequest::has_provider() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINPurchaseMoneyRequest::set_has_provider() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINPurchaseMoneyRequest::clear_has_provider() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINPurchaseMoneyRequest::clear_provider() {
  if (provider_ != &::google::protobuf::internal::kEmptyString) {
    provider_->clear();
  }
  clear_has_provider();
}
inline const ::std::string& BINPurchaseMoneyRequest::provider() const {
  return *provider_;
}
inline void BINPurchaseMoneyRequest::set_provider(const ::std::string& value) {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::kEmptyString) {
    provider_ = new ::std::string;
  }
  provider_->assign(value);
}
inline void BINPurchaseMoneyRequest::set_provider(const char* value) {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::kEmptyString) {
    provider_ = new ::std::string;
  }
  provider_->assign(value);
}
inline void BINPurchaseMoneyRequest::set_provider(const char* value, size_t size) {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::kEmptyString) {
    provider_ = new ::std::string;
  }
  provider_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINPurchaseMoneyRequest::mutable_provider() {
  set_has_provider();
  if (provider_ == &::google::protobuf::internal::kEmptyString) {
    provider_ = new ::std::string;
  }
  return provider_;
}
inline ::std::string* BINPurchaseMoneyRequest::release_provider() {
  clear_has_provider();
  if (provider_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = provider_;
    provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINPurchaseMoneyRequest::set_allocated_provider(::std::string* provider) {
  if (provider_ != &::google::protobuf::internal::kEmptyString) {
    delete provider_;
  }
  if (provider) {
    set_has_provider();
    provider_ = provider;
  } else {
    clear_has_provider();
    provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string cardSerial = 2;
inline bool BINPurchaseMoneyRequest::has_cardserial() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINPurchaseMoneyRequest::set_has_cardserial() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINPurchaseMoneyRequest::clear_has_cardserial() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINPurchaseMoneyRequest::clear_cardserial() {
  if (cardserial_ != &::google::protobuf::internal::kEmptyString) {
    cardserial_->clear();
  }
  clear_has_cardserial();
}
inline const ::std::string& BINPurchaseMoneyRequest::cardserial() const {
  return *cardserial_;
}
inline void BINPurchaseMoneyRequest::set_cardserial(const ::std::string& value) {
  set_has_cardserial();
  if (cardserial_ == &::google::protobuf::internal::kEmptyString) {
    cardserial_ = new ::std::string;
  }
  cardserial_->assign(value);
}
inline void BINPurchaseMoneyRequest::set_cardserial(const char* value) {
  set_has_cardserial();
  if (cardserial_ == &::google::protobuf::internal::kEmptyString) {
    cardserial_ = new ::std::string;
  }
  cardserial_->assign(value);
}
inline void BINPurchaseMoneyRequest::set_cardserial(const char* value, size_t size) {
  set_has_cardserial();
  if (cardserial_ == &::google::protobuf::internal::kEmptyString) {
    cardserial_ = new ::std::string;
  }
  cardserial_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINPurchaseMoneyRequest::mutable_cardserial() {
  set_has_cardserial();
  if (cardserial_ == &::google::protobuf::internal::kEmptyString) {
    cardserial_ = new ::std::string;
  }
  return cardserial_;
}
inline ::std::string* BINPurchaseMoneyRequest::release_cardserial() {
  clear_has_cardserial();
  if (cardserial_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardserial_;
    cardserial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINPurchaseMoneyRequest::set_allocated_cardserial(::std::string* cardserial) {
  if (cardserial_ != &::google::protobuf::internal::kEmptyString) {
    delete cardserial_;
  }
  if (cardserial) {
    set_has_cardserial();
    cardserial_ = cardserial;
  } else {
    clear_has_cardserial();
    cardserial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string cardPin = 3;
inline bool BINPurchaseMoneyRequest::has_cardpin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINPurchaseMoneyRequest::set_has_cardpin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINPurchaseMoneyRequest::clear_has_cardpin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINPurchaseMoneyRequest::clear_cardpin() {
  if (cardpin_ != &::google::protobuf::internal::kEmptyString) {
    cardpin_->clear();
  }
  clear_has_cardpin();
}
inline const ::std::string& BINPurchaseMoneyRequest::cardpin() const {
  return *cardpin_;
}
inline void BINPurchaseMoneyRequest::set_cardpin(const ::std::string& value) {
  set_has_cardpin();
  if (cardpin_ == &::google::protobuf::internal::kEmptyString) {
    cardpin_ = new ::std::string;
  }
  cardpin_->assign(value);
}
inline void BINPurchaseMoneyRequest::set_cardpin(const char* value) {
  set_has_cardpin();
  if (cardpin_ == &::google::protobuf::internal::kEmptyString) {
    cardpin_ = new ::std::string;
  }
  cardpin_->assign(value);
}
inline void BINPurchaseMoneyRequest::set_cardpin(const char* value, size_t size) {
  set_has_cardpin();
  if (cardpin_ == &::google::protobuf::internal::kEmptyString) {
    cardpin_ = new ::std::string;
  }
  cardpin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINPurchaseMoneyRequest::mutable_cardpin() {
  set_has_cardpin();
  if (cardpin_ == &::google::protobuf::internal::kEmptyString) {
    cardpin_ = new ::std::string;
  }
  return cardpin_;
}
inline ::std::string* BINPurchaseMoneyRequest::release_cardpin() {
  clear_has_cardpin();
  if (cardpin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cardpin_;
    cardpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINPurchaseMoneyRequest::set_allocated_cardpin(::std::string* cardpin) {
  if (cardpin_ != &::google::protobuf::internal::kEmptyString) {
    delete cardpin_;
  }
  if (cardpin) {
    set_has_cardpin();
    cardpin_ = cardpin;
  } else {
    clear_has_cardpin();
    cardpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string securityKey = 4;
inline bool BINPurchaseMoneyRequest::has_securitykey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINPurchaseMoneyRequest::set_has_securitykey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINPurchaseMoneyRequest::clear_has_securitykey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINPurchaseMoneyRequest::clear_securitykey() {
  if (securitykey_ != &::google::protobuf::internal::kEmptyString) {
    securitykey_->clear();
  }
  clear_has_securitykey();
}
inline const ::std::string& BINPurchaseMoneyRequest::securitykey() const {
  return *securitykey_;
}
inline void BINPurchaseMoneyRequest::set_securitykey(const ::std::string& value) {
  set_has_securitykey();
  if (securitykey_ == &::google::protobuf::internal::kEmptyString) {
    securitykey_ = new ::std::string;
  }
  securitykey_->assign(value);
}
inline void BINPurchaseMoneyRequest::set_securitykey(const char* value) {
  set_has_securitykey();
  if (securitykey_ == &::google::protobuf::internal::kEmptyString) {
    securitykey_ = new ::std::string;
  }
  securitykey_->assign(value);
}
inline void BINPurchaseMoneyRequest::set_securitykey(const char* value, size_t size) {
  set_has_securitykey();
  if (securitykey_ == &::google::protobuf::internal::kEmptyString) {
    securitykey_ = new ::std::string;
  }
  securitykey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINPurchaseMoneyRequest::mutable_securitykey() {
  set_has_securitykey();
  if (securitykey_ == &::google::protobuf::internal::kEmptyString) {
    securitykey_ = new ::std::string;
  }
  return securitykey_;
}
inline ::std::string* BINPurchaseMoneyRequest::release_securitykey() {
  clear_has_securitykey();
  if (securitykey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = securitykey_;
    securitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINPurchaseMoneyRequest::set_allocated_securitykey(::std::string* securitykey) {
  if (securitykey_ != &::google::protobuf::internal::kEmptyString) {
    delete securitykey_;
  }
  if (securitykey) {
    set_has_securitykey();
    securitykey_ = securitykey;
  } else {
    clear_has_securitykey();
    securitykey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string captcha = 5;
inline bool BINPurchaseMoneyRequest::has_captcha() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINPurchaseMoneyRequest::set_has_captcha() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINPurchaseMoneyRequest::clear_has_captcha() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINPurchaseMoneyRequest::clear_captcha() {
  if (captcha_ != &::google::protobuf::internal::kEmptyString) {
    captcha_->clear();
  }
  clear_has_captcha();
}
inline const ::std::string& BINPurchaseMoneyRequest::captcha() const {
  return *captcha_;
}
inline void BINPurchaseMoneyRequest::set_captcha(const ::std::string& value) {
  set_has_captcha();
  if (captcha_ == &::google::protobuf::internal::kEmptyString) {
    captcha_ = new ::std::string;
  }
  captcha_->assign(value);
}
inline void BINPurchaseMoneyRequest::set_captcha(const char* value) {
  set_has_captcha();
  if (captcha_ == &::google::protobuf::internal::kEmptyString) {
    captcha_ = new ::std::string;
  }
  captcha_->assign(value);
}
inline void BINPurchaseMoneyRequest::set_captcha(const char* value, size_t size) {
  set_has_captcha();
  if (captcha_ == &::google::protobuf::internal::kEmptyString) {
    captcha_ = new ::std::string;
  }
  captcha_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINPurchaseMoneyRequest::mutable_captcha() {
  set_has_captcha();
  if (captcha_ == &::google::protobuf::internal::kEmptyString) {
    captcha_ = new ::std::string;
  }
  return captcha_;
}
inline ::std::string* BINPurchaseMoneyRequest::release_captcha() {
  clear_has_captcha();
  if (captcha_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = captcha_;
    captcha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINPurchaseMoneyRequest::set_allocated_captcha(::std::string* captcha) {
  if (captcha_ != &::google::protobuf::internal::kEmptyString) {
    delete captcha_;
  }
  if (captcha) {
    set_has_captcha();
    captcha_ = captcha;
  } else {
    clear_has_captcha();
    captcha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool toCash = 6;
inline bool BINPurchaseMoneyRequest::has_tocash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINPurchaseMoneyRequest::set_has_tocash() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINPurchaseMoneyRequest::clear_has_tocash() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINPurchaseMoneyRequest::clear_tocash() {
  tocash_ = false;
  clear_has_tocash();
}
inline bool BINPurchaseMoneyRequest::tocash() const {
  return tocash_;
}
inline void BINPurchaseMoneyRequest::set_tocash(bool value) {
  set_has_tocash();
  tocash_ = value;
}

// -------------------------------------------------------------------

// BINPurchaseMoneyResponse

// required bool responseCode = 1;
inline bool BINPurchaseMoneyResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINPurchaseMoneyResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINPurchaseMoneyResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINPurchaseMoneyResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINPurchaseMoneyResponse::responsecode() const {
  return responsecode_;
}
inline void BINPurchaseMoneyResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINPurchaseMoneyResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINPurchaseMoneyResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINPurchaseMoneyResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINPurchaseMoneyResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINPurchaseMoneyResponse::message() const {
  return *message_;
}
inline void BINPurchaseMoneyResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINPurchaseMoneyResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINPurchaseMoneyResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINPurchaseMoneyResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINPurchaseMoneyResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINPurchaseMoneyResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_purchase_5fmoney_2eproto__INCLUDED
