// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lookup_money_history.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lookup_money_history.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINLookUpMoneyHistoryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINLookUpMoneyHistoryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINMoneyLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINMoneyLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINLookUpMoneyHistoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINLookUpMoneyHistoryResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lookup_5fmoney_5fhistory_2eproto() {
  protobuf_AddDesc_lookup_5fmoney_5fhistory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lookup_money_history.proto");
  GOOGLE_CHECK(file != NULL);
  BINLookUpMoneyHistoryRequest_descriptor_ = file->message_type(0);
  static const int BINLookUpMoneyHistoryRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpMoneyHistoryRequest, firstresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpMoneyHistoryRequest, maxresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpMoneyHistoryRequest, filtertype_),
  };
  BINLookUpMoneyHistoryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINLookUpMoneyHistoryRequest_descriptor_,
      BINLookUpMoneyHistoryRequest::default_instance_,
      BINLookUpMoneyHistoryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpMoneyHistoryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpMoneyHistoryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINLookUpMoneyHistoryRequest));
  BINMoneyLog_descriptor_ = file->message_type(1);
  static const int BINMoneyLog_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMoneyLog, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMoneyLog, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMoneyLog, logstamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMoneyLog, insertedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMoneyLog, currentmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMoneyLog, changemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMoneyLog, lastmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMoneyLog, iscash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMoneyLog, transactiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMoneyLog, description_),
  };
  BINMoneyLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINMoneyLog_descriptor_,
      BINMoneyLog::default_instance_,
      BINMoneyLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMoneyLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINMoneyLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINMoneyLog));
  BINLookUpMoneyHistoryResponse_descriptor_ = file->message_type(2);
  static const int BINLookUpMoneyHistoryResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpMoneyHistoryResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpMoneyHistoryResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpMoneyHistoryResponse, moneylogs_),
  };
  BINLookUpMoneyHistoryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINLookUpMoneyHistoryResponse_descriptor_,
      BINLookUpMoneyHistoryResponse::default_instance_,
      BINLookUpMoneyHistoryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpMoneyHistoryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINLookUpMoneyHistoryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINLookUpMoneyHistoryResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lookup_5fmoney_5fhistory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINLookUpMoneyHistoryRequest_descriptor_, &BINLookUpMoneyHistoryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINMoneyLog_descriptor_, &BINMoneyLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINLookUpMoneyHistoryResponse_descriptor_, &BINLookUpMoneyHistoryResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lookup_5fmoney_5fhistory_2eproto() {
  delete BINLookUpMoneyHistoryRequest::default_instance_;
  delete BINLookUpMoneyHistoryRequest_reflection_;
  delete BINMoneyLog::default_instance_;
  delete BINMoneyLog_reflection_;
  delete BINLookUpMoneyHistoryResponse::default_instance_;
  delete BINLookUpMoneyHistoryResponse_reflection_;
}

void protobuf_AddDesc_lookup_5fmoney_5fhistory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032lookup_money_history.proto\"Z\n\034BINLookU"
    "pMoneyHistoryRequest\022\023\n\013firstResult\030\001 \002("
    "\005\022\021\n\tmaxResult\030\002 \002(\005\022\022\n\nfilterType\030\003 \002(\005"
    "\"\316\001\n\013BINMoneyLog\022\r\n\005logId\030\001 \002(\003\022\014\n\004uuid\030"
    "\002 \001(\t\022\020\n\010logStamp\030\003 \001(\003\022\024\n\014insertedTime\030"
    "\004 \001(\003\022\024\n\014currentMoney\030\005 \001(\003\022\023\n\013changeMon"
    "ey\030\006 \001(\003\022\021\n\tlastMoney\030\007 \001(\003\022\016\n\006isCash\030\010 "
    "\001(\010\022\027\n\017transactionType\030\t \001(\t\022\023\n\013descript"
    "ion\030\n \001(\t\"g\n\035BINLookUpMoneyHistoryRespon"
    "se\022\024\n\014responseCode\030\001 \002(\010\022\017\n\007message\030\002 \001("
    "\t\022\037\n\tmoneyLogs\030\003 \003(\0132\014.BINMoneyLogB\036\n\034co"
    "m.mi.game.network.data.bin", 466);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lookup_money_history.proto", &protobuf_RegisterTypes);
  BINLookUpMoneyHistoryRequest::default_instance_ = new BINLookUpMoneyHistoryRequest();
  BINMoneyLog::default_instance_ = new BINMoneyLog();
  BINLookUpMoneyHistoryResponse::default_instance_ = new BINLookUpMoneyHistoryResponse();
  BINLookUpMoneyHistoryRequest::default_instance_->InitAsDefaultInstance();
  BINMoneyLog::default_instance_->InitAsDefaultInstance();
  BINLookUpMoneyHistoryResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lookup_5fmoney_5fhistory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lookup_5fmoney_5fhistory_2eproto {
  StaticDescriptorInitializer_lookup_5fmoney_5fhistory_2eproto() {
    protobuf_AddDesc_lookup_5fmoney_5fhistory_2eproto();
  }
} static_descriptor_initializer_lookup_5fmoney_5fhistory_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINLookUpMoneyHistoryRequest::kFirstResultFieldNumber;
const int BINLookUpMoneyHistoryRequest::kMaxResultFieldNumber;
const int BINLookUpMoneyHistoryRequest::kFilterTypeFieldNumber;
#endif  // !_MSC_VER

BINLookUpMoneyHistoryRequest::BINLookUpMoneyHistoryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINLookUpMoneyHistoryRequest::InitAsDefaultInstance() {
}

BINLookUpMoneyHistoryRequest::BINLookUpMoneyHistoryRequest(const BINLookUpMoneyHistoryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINLookUpMoneyHistoryRequest::SharedCtor() {
  _cached_size_ = 0;
  firstresult_ = 0;
  maxresult_ = 0;
  filtertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINLookUpMoneyHistoryRequest::~BINLookUpMoneyHistoryRequest() {
  SharedDtor();
}

void BINLookUpMoneyHistoryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINLookUpMoneyHistoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINLookUpMoneyHistoryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINLookUpMoneyHistoryRequest_descriptor_;
}

const BINLookUpMoneyHistoryRequest& BINLookUpMoneyHistoryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lookup_5fmoney_5fhistory_2eproto();
  return *default_instance_;
}

BINLookUpMoneyHistoryRequest* BINLookUpMoneyHistoryRequest::default_instance_ = NULL;

BINLookUpMoneyHistoryRequest* BINLookUpMoneyHistoryRequest::New() const {
  return new BINLookUpMoneyHistoryRequest;
}

void BINLookUpMoneyHistoryRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    firstresult_ = 0;
    maxresult_ = 0;
    filtertype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINLookUpMoneyHistoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 firstResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstresult_)));
          set_has_firstresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxResult;
        break;
      }

      // required int32 maxResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxresult_)));
          set_has_maxresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filterType;
        break;
      }

      // required int32 filterType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filtertype_)));
          set_has_filtertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINLookUpMoneyHistoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 firstResult = 1;
  if (has_firstresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->firstresult(), output);
  }

  // required int32 maxResult = 2;
  if (has_maxresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxresult(), output);
  }

  // required int32 filterType = 3;
  if (has_filtertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->filtertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINLookUpMoneyHistoryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 firstResult = 1;
  if (has_firstresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->firstresult(), target);
  }

  // required int32 maxResult = 2;
  if (has_maxresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxresult(), target);
  }

  // required int32 filterType = 3;
  if (has_filtertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->filtertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINLookUpMoneyHistoryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 firstResult = 1;
    if (has_firstresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstresult());
    }

    // required int32 maxResult = 2;
    if (has_maxresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxresult());
    }

    // required int32 filterType = 3;
    if (has_filtertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filtertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINLookUpMoneyHistoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINLookUpMoneyHistoryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINLookUpMoneyHistoryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINLookUpMoneyHistoryRequest::MergeFrom(const BINLookUpMoneyHistoryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstresult()) {
      set_firstresult(from.firstresult());
    }
    if (from.has_maxresult()) {
      set_maxresult(from.maxresult());
    }
    if (from.has_filtertype()) {
      set_filtertype(from.filtertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINLookUpMoneyHistoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINLookUpMoneyHistoryRequest::CopyFrom(const BINLookUpMoneyHistoryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINLookUpMoneyHistoryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BINLookUpMoneyHistoryRequest::Swap(BINLookUpMoneyHistoryRequest* other) {
  if (other != this) {
    std::swap(firstresult_, other->firstresult_);
    std::swap(maxresult_, other->maxresult_);
    std::swap(filtertype_, other->filtertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINLookUpMoneyHistoryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINLookUpMoneyHistoryRequest_descriptor_;
  metadata.reflection = BINLookUpMoneyHistoryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINMoneyLog::kLogIdFieldNumber;
const int BINMoneyLog::kUuidFieldNumber;
const int BINMoneyLog::kLogStampFieldNumber;
const int BINMoneyLog::kInsertedTimeFieldNumber;
const int BINMoneyLog::kCurrentMoneyFieldNumber;
const int BINMoneyLog::kChangeMoneyFieldNumber;
const int BINMoneyLog::kLastMoneyFieldNumber;
const int BINMoneyLog::kIsCashFieldNumber;
const int BINMoneyLog::kTransactionTypeFieldNumber;
const int BINMoneyLog::kDescriptionFieldNumber;
#endif  // !_MSC_VER

BINMoneyLog::BINMoneyLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINMoneyLog::InitAsDefaultInstance() {
}

BINMoneyLog::BINMoneyLog(const BINMoneyLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINMoneyLog::SharedCtor() {
  _cached_size_ = 0;
  logid_ = GOOGLE_LONGLONG(0);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logstamp_ = GOOGLE_LONGLONG(0);
  insertedtime_ = GOOGLE_LONGLONG(0);
  currentmoney_ = GOOGLE_LONGLONG(0);
  changemoney_ = GOOGLE_LONGLONG(0);
  lastmoney_ = GOOGLE_LONGLONG(0);
  iscash_ = false;
  transactiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINMoneyLog::~BINMoneyLog() {
  SharedDtor();
}

void BINMoneyLog::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (transactiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete transactiontype_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void BINMoneyLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINMoneyLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINMoneyLog_descriptor_;
}

const BINMoneyLog& BINMoneyLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lookup_5fmoney_5fhistory_2eproto();
  return *default_instance_;
}

BINMoneyLog* BINMoneyLog::default_instance_ = NULL;

BINMoneyLog* BINMoneyLog::New() const {
  return new BINMoneyLog;
}

void BINMoneyLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logid_ = GOOGLE_LONGLONG(0);
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    logstamp_ = GOOGLE_LONGLONG(0);
    insertedtime_ = GOOGLE_LONGLONG(0);
    currentmoney_ = GOOGLE_LONGLONG(0);
    changemoney_ = GOOGLE_LONGLONG(0);
    lastmoney_ = GOOGLE_LONGLONG(0);
    iscash_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_transactiontype()) {
      if (transactiontype_ != &::google::protobuf::internal::kEmptyString) {
        transactiontype_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINMoneyLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 logId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logid_)));
          set_has_logid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional string uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logStamp;
        break;
      }

      // optional int64 logStamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logstamp_)));
          set_has_logstamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_insertedTime;
        break;
      }

      // optional int64 insertedTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insertedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &insertedtime_)));
          set_has_insertedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currentMoney;
        break;
      }

      // optional int64 currentMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentmoney_)));
          set_has_currentmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_changeMoney;
        break;
      }

      // optional int64 changeMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &changemoney_)));
          set_has_changemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastMoney;
        break;
      }

      // optional int64 lastMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastmoney_)));
          set_has_lastmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isCash;
        break;
      }

      // optional bool isCash = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscash_)));
          set_has_iscash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_transactionType;
        break;
      }

      // optional string transactionType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transactionType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactiontype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactiontype().data(), this->transactiontype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_description;
        break;
      }

      // optional string description = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINMoneyLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 logId = 1;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->logid(), output);
  }

  // optional string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uuid(), output);
  }

  // optional int64 logStamp = 3;
  if (has_logstamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->logstamp(), output);
  }

  // optional int64 insertedTime = 4;
  if (has_insertedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->insertedtime(), output);
  }

  // optional int64 currentMoney = 5;
  if (has_currentmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->currentmoney(), output);
  }

  // optional int64 changeMoney = 6;
  if (has_changemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->changemoney(), output);
  }

  // optional int64 lastMoney = 7;
  if (has_lastmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lastmoney(), output);
  }

  // optional bool isCash = 8;
  if (has_iscash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iscash(), output);
  }

  // optional string transactionType = 9;
  if (has_transactiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactiontype().data(), this->transactiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->transactiontype(), output);
  }

  // optional string description = 10;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINMoneyLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 logId = 1;
  if (has_logid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->logid(), target);
  }

  // optional string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // optional int64 logStamp = 3;
  if (has_logstamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->logstamp(), target);
  }

  // optional int64 insertedTime = 4;
  if (has_insertedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->insertedtime(), target);
  }

  // optional int64 currentMoney = 5;
  if (has_currentmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->currentmoney(), target);
  }

  // optional int64 changeMoney = 6;
  if (has_changemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->changemoney(), target);
  }

  // optional int64 lastMoney = 7;
  if (has_lastmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lastmoney(), target);
  }

  // optional bool isCash = 8;
  if (has_iscash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->iscash(), target);
  }

  // optional string transactionType = 9;
  if (has_transactiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactiontype().data(), this->transactiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->transactiontype(), target);
  }

  // optional string description = 10;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINMoneyLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 logId = 1;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logid());
    }

    // optional string uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional int64 logStamp = 3;
    if (has_logstamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logstamp());
    }

    // optional int64 insertedTime = 4;
    if (has_insertedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->insertedtime());
    }

    // optional int64 currentMoney = 5;
    if (has_currentmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currentmoney());
    }

    // optional int64 changeMoney = 6;
    if (has_changemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changemoney());
    }

    // optional int64 lastMoney = 7;
    if (has_lastmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastmoney());
    }

    // optional bool isCash = 8;
    if (has_iscash()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string transactionType = 9;
    if (has_transactiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactiontype());
    }

    // optional string description = 10;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINMoneyLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINMoneyLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINMoneyLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINMoneyLog::MergeFrom(const BINMoneyLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_logstamp()) {
      set_logstamp(from.logstamp());
    }
    if (from.has_insertedtime()) {
      set_insertedtime(from.insertedtime());
    }
    if (from.has_currentmoney()) {
      set_currentmoney(from.currentmoney());
    }
    if (from.has_changemoney()) {
      set_changemoney(from.changemoney());
    }
    if (from.has_lastmoney()) {
      set_lastmoney(from.lastmoney());
    }
    if (from.has_iscash()) {
      set_iscash(from.iscash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transactiontype()) {
      set_transactiontype(from.transactiontype());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINMoneyLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINMoneyLog::CopyFrom(const BINMoneyLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINMoneyLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINMoneyLog::Swap(BINMoneyLog* other) {
  if (other != this) {
    std::swap(logid_, other->logid_);
    std::swap(uuid_, other->uuid_);
    std::swap(logstamp_, other->logstamp_);
    std::swap(insertedtime_, other->insertedtime_);
    std::swap(currentmoney_, other->currentmoney_);
    std::swap(changemoney_, other->changemoney_);
    std::swap(lastmoney_, other->lastmoney_);
    std::swap(iscash_, other->iscash_);
    std::swap(transactiontype_, other->transactiontype_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINMoneyLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINMoneyLog_descriptor_;
  metadata.reflection = BINMoneyLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINLookUpMoneyHistoryResponse::kResponseCodeFieldNumber;
const int BINLookUpMoneyHistoryResponse::kMessageFieldNumber;
const int BINLookUpMoneyHistoryResponse::kMoneyLogsFieldNumber;
#endif  // !_MSC_VER

BINLookUpMoneyHistoryResponse::BINLookUpMoneyHistoryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINLookUpMoneyHistoryResponse::InitAsDefaultInstance() {
}

BINLookUpMoneyHistoryResponse::BINLookUpMoneyHistoryResponse(const BINLookUpMoneyHistoryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINLookUpMoneyHistoryResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINLookUpMoneyHistoryResponse::~BINLookUpMoneyHistoryResponse() {
  SharedDtor();
}

void BINLookUpMoneyHistoryResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINLookUpMoneyHistoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINLookUpMoneyHistoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINLookUpMoneyHistoryResponse_descriptor_;
}

const BINLookUpMoneyHistoryResponse& BINLookUpMoneyHistoryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lookup_5fmoney_5fhistory_2eproto();
  return *default_instance_;
}

BINLookUpMoneyHistoryResponse* BINLookUpMoneyHistoryResponse::default_instance_ = NULL;

BINLookUpMoneyHistoryResponse* BINLookUpMoneyHistoryResponse::New() const {
  return new BINLookUpMoneyHistoryResponse;
}

void BINLookUpMoneyHistoryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  moneylogs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINLookUpMoneyHistoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_moneyLogs;
        break;
      }

      // repeated .BINMoneyLog moneyLogs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moneyLogs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moneylogs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_moneyLogs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINLookUpMoneyHistoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // repeated .BINMoneyLog moneyLogs = 3;
  for (int i = 0; i < this->moneylogs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->moneylogs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINLookUpMoneyHistoryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // repeated .BINMoneyLog moneyLogs = 3;
  for (int i = 0; i < this->moneylogs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->moneylogs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINLookUpMoneyHistoryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  // repeated .BINMoneyLog moneyLogs = 3;
  total_size += 1 * this->moneylogs_size();
  for (int i = 0; i < this->moneylogs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moneylogs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINLookUpMoneyHistoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINLookUpMoneyHistoryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINLookUpMoneyHistoryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINLookUpMoneyHistoryResponse::MergeFrom(const BINLookUpMoneyHistoryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  moneylogs_.MergeFrom(from.moneylogs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINLookUpMoneyHistoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINLookUpMoneyHistoryResponse::CopyFrom(const BINLookUpMoneyHistoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINLookUpMoneyHistoryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < moneylogs_size(); i++) {
    if (!this->moneylogs(i).IsInitialized()) return false;
  }
  return true;
}

void BINLookUpMoneyHistoryResponse::Swap(BINLookUpMoneyHistoryResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    moneylogs_.Swap(&other->moneylogs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINLookUpMoneyHistoryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINLookUpMoneyHistoryResponse_descriptor_;
  metadata.reflection = BINLookUpMoneyHistoryResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
