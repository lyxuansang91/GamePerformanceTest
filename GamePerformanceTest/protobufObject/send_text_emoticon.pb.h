// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: send_text_emoticon.proto

#ifndef PROTOBUF_send_5ftext_5femoticon_2eproto__INCLUDED
#define PROTOBUF_send_5ftext_5femoticon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_send_5ftext_5femoticon_2eproto();
void protobuf_AssignDesc_send_5ftext_5femoticon_2eproto();
void protobuf_ShutdownFile_send_5ftext_5femoticon_2eproto();

class BINSendTextEmoticonRequest;
class BINSendTextEmoticonResponse;

// ===================================================================

class BINSendTextEmoticonRequest : public ::google::protobuf::Message {
 public:
  BINSendTextEmoticonRequest();
  virtual ~BINSendTextEmoticonRequest();

  BINSendTextEmoticonRequest(const BINSendTextEmoticonRequest& from);

  inline BINSendTextEmoticonRequest& operator=(const BINSendTextEmoticonRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINSendTextEmoticonRequest& default_instance();

  void Swap(BINSendTextEmoticonRequest* other);

  // implements Message ----------------------------------------------

  BINSendTextEmoticonRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINSendTextEmoticonRequest& from);
  void MergeFrom(const BINSendTextEmoticonRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 textEmoticonId = 1;
  inline bool has_textemoticonid() const;
  inline void clear_textemoticonid();
  static const int kTextEmoticonIdFieldNumber = 1;
  inline ::google::protobuf::int32 textemoticonid() const;
  inline void set_textemoticonid(::google::protobuf::int32 value);

  // required int64 targetUserId = 2;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 2;
  inline ::google::protobuf::int64 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BINSendTextEmoticonRequest)
 private:
  inline void set_has_textemoticonid();
  inline void clear_has_textemoticonid();
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 targetuserid_;
  ::google::protobuf::int32 textemoticonid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_send_5ftext_5femoticon_2eproto();
  friend void protobuf_AssignDesc_send_5ftext_5femoticon_2eproto();
  friend void protobuf_ShutdownFile_send_5ftext_5femoticon_2eproto();

  void InitAsDefaultInstance();
  static BINSendTextEmoticonRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINSendTextEmoticonResponse : public ::google::protobuf::Message {
 public:
  BINSendTextEmoticonResponse();
  virtual ~BINSendTextEmoticonResponse();

  BINSendTextEmoticonResponse(const BINSendTextEmoticonResponse& from);

  inline BINSendTextEmoticonResponse& operator=(const BINSendTextEmoticonResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINSendTextEmoticonResponse& default_instance();

  void Swap(BINSendTextEmoticonResponse* other);

  // implements Message ----------------------------------------------

  BINSendTextEmoticonResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINSendTextEmoticonResponse& from);
  void MergeFrom(const BINSendTextEmoticonResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int32 textEmoticonId = 3;
  inline bool has_textemoticonid() const;
  inline void clear_textemoticonid();
  static const int kTextEmoticonIdFieldNumber = 3;
  inline ::google::protobuf::int32 textemoticonid() const;
  inline void set_textemoticonid(::google::protobuf::int32 value);

  // optional int64 senderUserId = 4;
  inline bool has_senderuserid() const;
  inline void clear_senderuserid();
  static const int kSenderUserIdFieldNumber = 4;
  inline ::google::protobuf::int64 senderuserid() const;
  inline void set_senderuserid(::google::protobuf::int64 value);

  // optional int64 targetUserId = 5;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 5;
  inline ::google::protobuf::int64 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BINSendTextEmoticonResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_textemoticonid();
  inline void clear_has_textemoticonid();
  inline void set_has_senderuserid();
  inline void clear_has_senderuserid();
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;
  ::google::protobuf::int32 textemoticonid_;
  ::google::protobuf::int64 senderuserid_;
  ::google::protobuf::int64 targetuserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_send_5ftext_5femoticon_2eproto();
  friend void protobuf_AssignDesc_send_5ftext_5femoticon_2eproto();
  friend void protobuf_ShutdownFile_send_5ftext_5femoticon_2eproto();

  void InitAsDefaultInstance();
  static BINSendTextEmoticonResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINSendTextEmoticonRequest

// required int32 textEmoticonId = 1;
inline bool BINSendTextEmoticonRequest::has_textemoticonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINSendTextEmoticonRequest::set_has_textemoticonid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINSendTextEmoticonRequest::clear_has_textemoticonid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINSendTextEmoticonRequest::clear_textemoticonid() {
  textemoticonid_ = 0;
  clear_has_textemoticonid();
}
inline ::google::protobuf::int32 BINSendTextEmoticonRequest::textemoticonid() const {
  return textemoticonid_;
}
inline void BINSendTextEmoticonRequest::set_textemoticonid(::google::protobuf::int32 value) {
  set_has_textemoticonid();
  textemoticonid_ = value;
}

// required int64 targetUserId = 2;
inline bool BINSendTextEmoticonRequest::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINSendTextEmoticonRequest::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINSendTextEmoticonRequest::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINSendTextEmoticonRequest::clear_targetuserid() {
  targetuserid_ = GOOGLE_LONGLONG(0);
  clear_has_targetuserid();
}
inline ::google::protobuf::int64 BINSendTextEmoticonRequest::targetuserid() const {
  return targetuserid_;
}
inline void BINSendTextEmoticonRequest::set_targetuserid(::google::protobuf::int64 value) {
  set_has_targetuserid();
  targetuserid_ = value;
}

// -------------------------------------------------------------------

// BINSendTextEmoticonResponse

// required bool responseCode = 1;
inline bool BINSendTextEmoticonResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINSendTextEmoticonResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINSendTextEmoticonResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINSendTextEmoticonResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINSendTextEmoticonResponse::responsecode() const {
  return responsecode_;
}
inline void BINSendTextEmoticonResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINSendTextEmoticonResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINSendTextEmoticonResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINSendTextEmoticonResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINSendTextEmoticonResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINSendTextEmoticonResponse::message() const {
  return *message_;
}
inline void BINSendTextEmoticonResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINSendTextEmoticonResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINSendTextEmoticonResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINSendTextEmoticonResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINSendTextEmoticonResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINSendTextEmoticonResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 textEmoticonId = 3;
inline bool BINSendTextEmoticonResponse::has_textemoticonid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINSendTextEmoticonResponse::set_has_textemoticonid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINSendTextEmoticonResponse::clear_has_textemoticonid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINSendTextEmoticonResponse::clear_textemoticonid() {
  textemoticonid_ = 0;
  clear_has_textemoticonid();
}
inline ::google::protobuf::int32 BINSendTextEmoticonResponse::textemoticonid() const {
  return textemoticonid_;
}
inline void BINSendTextEmoticonResponse::set_textemoticonid(::google::protobuf::int32 value) {
  set_has_textemoticonid();
  textemoticonid_ = value;
}

// optional int64 senderUserId = 4;
inline bool BINSendTextEmoticonResponse::has_senderuserid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINSendTextEmoticonResponse::set_has_senderuserid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINSendTextEmoticonResponse::clear_has_senderuserid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINSendTextEmoticonResponse::clear_senderuserid() {
  senderuserid_ = GOOGLE_LONGLONG(0);
  clear_has_senderuserid();
}
inline ::google::protobuf::int64 BINSendTextEmoticonResponse::senderuserid() const {
  return senderuserid_;
}
inline void BINSendTextEmoticonResponse::set_senderuserid(::google::protobuf::int64 value) {
  set_has_senderuserid();
  senderuserid_ = value;
}

// optional int64 targetUserId = 5;
inline bool BINSendTextEmoticonResponse::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINSendTextEmoticonResponse::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINSendTextEmoticonResponse::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINSendTextEmoticonResponse::clear_targetuserid() {
  targetuserid_ = GOOGLE_LONGLONG(0);
  clear_has_targetuserid();
}
inline ::google::protobuf::int64 BINSendTextEmoticonResponse::targetuserid() const {
  return targetuserid_;
}
inline void BINSendTextEmoticonResponse::set_targetuserid(::google::protobuf::int64 value) {
  set_has_targetuserid();
  targetuserid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_send_5ftext_5femoticon_2eproto__INCLUDED
