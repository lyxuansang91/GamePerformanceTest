// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filter_room.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "filter_room.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINFilterRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINFilterRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINRoomPlay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINRoomPlay_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINFilterRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINFilterRoomResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_filter_5froom_2eproto() {
  protobuf_AddDesc_filter_5froom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "filter_room.proto");
  GOOGLE_CHECK(file != NULL);
  BINFilterRoomRequest_descriptor_ = file->message_type(0);
  static const int BINFilterRoomRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomRequest, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomRequest, viproom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomRequest, firstresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomRequest, maxresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomRequest, orderbyfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomRequest, asc_),
  };
  BINFilterRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINFilterRoomRequest_descriptor_,
      BINFilterRoomRequest::default_instance_,
      BINFilterRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINFilterRoomRequest));
  BINRoomPlay_descriptor_ = file->message_type(1);
  static const int BINRoomPlay_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, roomindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, roomgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, minbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, minentermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, roomcapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, enteringplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, playersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, playingplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, ownerusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, viproom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, passwordrequired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, roomconfig_),
  };
  BINRoomPlay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINRoomPlay_descriptor_,
      BINRoomPlay::default_instance_,
      BINRoomPlay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRoomPlay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINRoomPlay));
  BINFilterRoomResponse_descriptor_ = file->message_type(2);
  static const int BINFilterRoomResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomResponse, roomplays_),
  };
  BINFilterRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINFilterRoomResponse_descriptor_,
      BINFilterRoomResponse::default_instance_,
      BINFilterRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINFilterRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINFilterRoomResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_filter_5froom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINFilterRoomRequest_descriptor_, &BINFilterRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINRoomPlay_descriptor_, &BINRoomPlay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINFilterRoomResponse_descriptor_, &BINFilterRoomResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_filter_5froom_2eproto() {
  delete BINFilterRoomRequest::default_instance_;
  delete BINFilterRoomRequest_reflection_;
  delete BINRoomPlay::default_instance_;
  delete BINRoomPlay_reflection_;
  delete BINFilterRoomResponse::default_instance_;
  delete BINFilterRoomResponse_reflection_;
}

void protobuf_AddDesc_filter_5froom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021filter_room.proto\"\202\001\n\024BINFilterRoomReq"
    "uest\022\016\n\006zoneId\030\001 \002(\005\022\017\n\007vipRoom\030\002 \002(\010\022\023\n"
    "\013firstResult\030\003 \002(\005\022\021\n\tmaxResult\030\004 \002(\005\022\024\n"
    "\014orderByField\030\005 \001(\005\022\013\n\003asc\030\006 \001(\010\"\311\002\n\013BIN"
    "RoomPlay\022\021\n\troomIndex\030\001 \002(\005\022\020\n\010roomName\030"
    "\002 \002(\t\022\016\n\006roomId\030\003 \002(\003\022\023\n\013roomGroupId\030\004 \002"
    "(\005\022\016\n\006minBet\030\005 \002(\005\022\025\n\rminEnterMoney\030\006 \002("
    "\003\022\024\n\014roomCapacity\030\007 \002(\005\022\026\n\016enteringPlaye"
    "r\030\010 \002(\005\022\022\n\nplayerSize\030\t \002(\005\022\025\n\rplayingPl"
    "ayer\030\n \002(\005\022\r\n\005level\030\013 \002(\005\022\013\n\003tax\030\014 \002(\005\022\025"
    "\n\rownerUserName\030\r \001(\t\022\017\n\007vipRoom\030\016 \002(\010\022\030"
    "\n\020passwordRequired\030\017 \002(\010\022\022\n\nroomConfig\030\020"
    " \001(\t\"_\n\025BINFilterRoomResponse\022\024\n\014respons"
    "eCode\030\001 \002(\010\022\017\n\007message\030\002 \001(\t\022\037\n\troomPlay"
    "s\030\003 \003(\0132\014.BINRoomPlayB\036\n\034com.mi.game.net"
    "work.data.bin", 613);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "filter_room.proto", &protobuf_RegisterTypes);
  BINFilterRoomRequest::default_instance_ = new BINFilterRoomRequest();
  BINRoomPlay::default_instance_ = new BINRoomPlay();
  BINFilterRoomResponse::default_instance_ = new BINFilterRoomResponse();
  BINFilterRoomRequest::default_instance_->InitAsDefaultInstance();
  BINRoomPlay::default_instance_->InitAsDefaultInstance();
  BINFilterRoomResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_filter_5froom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_filter_5froom_2eproto {
  StaticDescriptorInitializer_filter_5froom_2eproto() {
    protobuf_AddDesc_filter_5froom_2eproto();
  }
} static_descriptor_initializer_filter_5froom_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINFilterRoomRequest::kZoneIdFieldNumber;
const int BINFilterRoomRequest::kVipRoomFieldNumber;
const int BINFilterRoomRequest::kFirstResultFieldNumber;
const int BINFilterRoomRequest::kMaxResultFieldNumber;
const int BINFilterRoomRequest::kOrderByFieldFieldNumber;
const int BINFilterRoomRequest::kAscFieldNumber;
#endif  // !_MSC_VER

BINFilterRoomRequest::BINFilterRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINFilterRoomRequest::InitAsDefaultInstance() {
}

BINFilterRoomRequest::BINFilterRoomRequest(const BINFilterRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINFilterRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0;
  viproom_ = false;
  firstresult_ = 0;
  maxresult_ = 0;
  orderbyfield_ = 0;
  asc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINFilterRoomRequest::~BINFilterRoomRequest() {
  SharedDtor();
}

void BINFilterRoomRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BINFilterRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINFilterRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINFilterRoomRequest_descriptor_;
}

const BINFilterRoomRequest& BINFilterRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_filter_5froom_2eproto();
  return *default_instance_;
}

BINFilterRoomRequest* BINFilterRoomRequest::default_instance_ = NULL;

BINFilterRoomRequest* BINFilterRoomRequest::New() const {
  return new BINFilterRoomRequest;
}

void BINFilterRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0;
    viproom_ = false;
    firstresult_ = 0;
    maxresult_ = 0;
    orderbyfield_ = 0;
    asc_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINFilterRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 zoneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vipRoom;
        break;
      }

      // required bool vipRoom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &viproom_)));
          set_has_viproom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_firstResult;
        break;
      }

      // required int32 firstResult = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstresult_)));
          set_has_firstresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxResult;
        break;
      }

      // required int32 maxResult = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxresult_)));
          set_has_maxresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_orderByField;
        break;
      }

      // optional int32 orderByField = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderByField:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderbyfield_)));
          set_has_orderbyfield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_asc;
        break;
      }

      // optional bool asc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_asc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &asc_)));
          set_has_asc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINFilterRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 zoneId = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zoneid(), output);
  }

  // required bool vipRoom = 2;
  if (has_viproom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->viproom(), output);
  }

  // required int32 firstResult = 3;
  if (has_firstresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->firstresult(), output);
  }

  // required int32 maxResult = 4;
  if (has_maxresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxresult(), output);
  }

  // optional int32 orderByField = 5;
  if (has_orderbyfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->orderbyfield(), output);
  }

  // optional bool asc = 6;
  if (has_asc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->asc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINFilterRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 zoneId = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zoneid(), target);
  }

  // required bool vipRoom = 2;
  if (has_viproom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->viproom(), target);
  }

  // required int32 firstResult = 3;
  if (has_firstresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->firstresult(), target);
  }

  // required int32 maxResult = 4;
  if (has_maxresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxresult(), target);
  }

  // optional int32 orderByField = 5;
  if (has_orderbyfield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->orderbyfield(), target);
  }

  // optional bool asc = 6;
  if (has_asc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->asc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINFilterRoomRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 zoneId = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

    // required bool vipRoom = 2;
    if (has_viproom()) {
      total_size += 1 + 1;
    }

    // required int32 firstResult = 3;
    if (has_firstresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstresult());
    }

    // required int32 maxResult = 4;
    if (has_maxresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxresult());
    }

    // optional int32 orderByField = 5;
    if (has_orderbyfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderbyfield());
    }

    // optional bool asc = 6;
    if (has_asc()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINFilterRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINFilterRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINFilterRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINFilterRoomRequest::MergeFrom(const BINFilterRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_viproom()) {
      set_viproom(from.viproom());
    }
    if (from.has_firstresult()) {
      set_firstresult(from.firstresult());
    }
    if (from.has_maxresult()) {
      set_maxresult(from.maxresult());
    }
    if (from.has_orderbyfield()) {
      set_orderbyfield(from.orderbyfield());
    }
    if (from.has_asc()) {
      set_asc(from.asc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINFilterRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINFilterRoomRequest::CopyFrom(const BINFilterRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINFilterRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BINFilterRoomRequest::Swap(BINFilterRoomRequest* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(viproom_, other->viproom_);
    std::swap(firstresult_, other->firstresult_);
    std::swap(maxresult_, other->maxresult_);
    std::swap(orderbyfield_, other->orderbyfield_);
    std::swap(asc_, other->asc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINFilterRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINFilterRoomRequest_descriptor_;
  metadata.reflection = BINFilterRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINRoomPlay::kRoomIndexFieldNumber;
const int BINRoomPlay::kRoomNameFieldNumber;
const int BINRoomPlay::kRoomIdFieldNumber;
const int BINRoomPlay::kRoomGroupIdFieldNumber;
const int BINRoomPlay::kMinBetFieldNumber;
const int BINRoomPlay::kMinEnterMoneyFieldNumber;
const int BINRoomPlay::kRoomCapacityFieldNumber;
const int BINRoomPlay::kEnteringPlayerFieldNumber;
const int BINRoomPlay::kPlayerSizeFieldNumber;
const int BINRoomPlay::kPlayingPlayerFieldNumber;
const int BINRoomPlay::kLevelFieldNumber;
const int BINRoomPlay::kTaxFieldNumber;
const int BINRoomPlay::kOwnerUserNameFieldNumber;
const int BINRoomPlay::kVipRoomFieldNumber;
const int BINRoomPlay::kPasswordRequiredFieldNumber;
const int BINRoomPlay::kRoomConfigFieldNumber;
#endif  // !_MSC_VER

BINRoomPlay::BINRoomPlay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINRoomPlay::InitAsDefaultInstance() {
}

BINRoomPlay::BINRoomPlay(const BINRoomPlay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINRoomPlay::SharedCtor() {
  _cached_size_ = 0;
  roomindex_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomid_ = GOOGLE_LONGLONG(0);
  roomgroupid_ = 0;
  minbet_ = 0;
  minentermoney_ = GOOGLE_LONGLONG(0);
  roomcapacity_ = 0;
  enteringplayer_ = 0;
  playersize_ = 0;
  playingplayer_ = 0;
  level_ = 0;
  tax_ = 0;
  ownerusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viproom_ = false;
  passwordrequired_ = false;
  roomconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINRoomPlay::~BINRoomPlay() {
  SharedDtor();
}

void BINRoomPlay::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (ownerusername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownerusername_;
  }
  if (roomconfig_ != &::google::protobuf::internal::kEmptyString) {
    delete roomconfig_;
  }
  if (this != default_instance_) {
  }
}

void BINRoomPlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINRoomPlay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINRoomPlay_descriptor_;
}

const BINRoomPlay& BINRoomPlay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_filter_5froom_2eproto();
  return *default_instance_;
}

BINRoomPlay* BINRoomPlay::default_instance_ = NULL;

BINRoomPlay* BINRoomPlay::New() const {
  return new BINRoomPlay;
}

void BINRoomPlay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomindex_ = 0;
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
    roomid_ = GOOGLE_LONGLONG(0);
    roomgroupid_ = 0;
    minbet_ = 0;
    minentermoney_ = GOOGLE_LONGLONG(0);
    roomcapacity_ = 0;
    enteringplayer_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playersize_ = 0;
    playingplayer_ = 0;
    level_ = 0;
    tax_ = 0;
    if (has_ownerusername()) {
      if (ownerusername_ != &::google::protobuf::internal::kEmptyString) {
        ownerusername_->clear();
      }
    }
    viproom_ = false;
    passwordrequired_ = false;
    if (has_roomconfig()) {
      if (roomconfig_ != &::google::protobuf::internal::kEmptyString) {
        roomconfig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINRoomPlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
          set_has_roomindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomName;
        break;
      }

      // required string roomName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomId;
        break;
      }

      // required int64 roomId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roomGroupId;
        break;
      }

      // required int32 roomGroupId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomgroupid_)));
          set_has_roomgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minBet;
        break;
      }

      // required int32 minBet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minbet_)));
          set_has_minbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_minEnterMoney;
        break;
      }

      // required int64 minEnterMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minEnterMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minentermoney_)));
          set_has_minentermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roomCapacity;
        break;
      }

      // required int32 roomCapacity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomCapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomcapacity_)));
          set_has_roomcapacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_enteringPlayer;
        break;
      }

      // required int32 enteringPlayer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enteringPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enteringplayer_)));
          set_has_enteringplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_playerSize;
        break;
      }

      // required int32 playerSize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playersize_)));
          set_has_playersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_playingPlayer;
        break;
      }

      // required int32 playingPlayer = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playingPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playingplayer_)));
          set_has_playingplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_level;
        break;
      }

      // required int32 level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tax;
        break;
      }

      // required int32 tax = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ownerUserName;
        break;
      }

      // optional string ownerUserName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownerUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownerusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownerusername().data(), this->ownerusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_vipRoom;
        break;
      }

      // required bool vipRoom = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &viproom_)));
          set_has_viproom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_passwordRequired;
        break;
      }

      // required bool passwordRequired = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passwordRequired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passwordrequired_)));
          set_has_passwordrequired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_roomConfig;
        break;
      }

      // optional string roomConfig = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomConfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomconfig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomconfig().data(), this->roomconfig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINRoomPlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomindex(), output);
  }

  // required string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomname(), output);
  }

  // required int64 roomId = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->roomid(), output);
  }

  // required int32 roomGroupId = 4;
  if (has_roomgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roomgroupid(), output);
  }

  // required int32 minBet = 5;
  if (has_minbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minbet(), output);
  }

  // required int64 minEnterMoney = 6;
  if (has_minentermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->minentermoney(), output);
  }

  // required int32 roomCapacity = 7;
  if (has_roomcapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->roomcapacity(), output);
  }

  // required int32 enteringPlayer = 8;
  if (has_enteringplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->enteringplayer(), output);
  }

  // required int32 playerSize = 9;
  if (has_playersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->playersize(), output);
  }

  // required int32 playingPlayer = 10;
  if (has_playingplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->playingplayer(), output);
  }

  // required int32 level = 11;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->level(), output);
  }

  // required int32 tax = 12;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tax(), output);
  }

  // optional string ownerUserName = 13;
  if (has_ownerusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownerusername().data(), this->ownerusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->ownerusername(), output);
  }

  // required bool vipRoom = 14;
  if (has_viproom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->viproom(), output);
  }

  // required bool passwordRequired = 15;
  if (has_passwordrequired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->passwordrequired(), output);
  }

  // optional string roomConfig = 16;
  if (has_roomconfig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomconfig().data(), this->roomconfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->roomconfig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINRoomPlay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomIndex = 1;
  if (has_roomindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomindex(), target);
  }

  // required string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }

  // required int64 roomId = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->roomid(), target);
  }

  // required int32 roomGroupId = 4;
  if (has_roomgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roomgroupid(), target);
  }

  // required int32 minBet = 5;
  if (has_minbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minbet(), target);
  }

  // required int64 minEnterMoney = 6;
  if (has_minentermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->minentermoney(), target);
  }

  // required int32 roomCapacity = 7;
  if (has_roomcapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->roomcapacity(), target);
  }

  // required int32 enteringPlayer = 8;
  if (has_enteringplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->enteringplayer(), target);
  }

  // required int32 playerSize = 9;
  if (has_playersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->playersize(), target);
  }

  // required int32 playingPlayer = 10;
  if (has_playingplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->playingplayer(), target);
  }

  // required int32 level = 11;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->level(), target);
  }

  // required int32 tax = 12;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tax(), target);
  }

  // optional string ownerUserName = 13;
  if (has_ownerusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownerusername().data(), this->ownerusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ownerusername(), target);
  }

  // required bool vipRoom = 14;
  if (has_viproom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->viproom(), target);
  }

  // required bool passwordRequired = 15;
  if (has_passwordrequired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->passwordrequired(), target);
  }

  // optional string roomConfig = 16;
  if (has_roomconfig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomconfig().data(), this->roomconfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->roomconfig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINRoomPlay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomIndex = 1;
    if (has_roomindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomindex());
    }

    // required string roomName = 2;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // required int64 roomId = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roomid());
    }

    // required int32 roomGroupId = 4;
    if (has_roomgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomgroupid());
    }

    // required int32 minBet = 5;
    if (has_minbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minbet());
    }

    // required int64 minEnterMoney = 6;
    if (has_minentermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minentermoney());
    }

    // required int32 roomCapacity = 7;
    if (has_roomcapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomcapacity());
    }

    // required int32 enteringPlayer = 8;
    if (has_enteringplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enteringplayer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 playerSize = 9;
    if (has_playersize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playersize());
    }

    // required int32 playingPlayer = 10;
    if (has_playingplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playingplayer());
    }

    // required int32 level = 11;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 tax = 12;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax());
    }

    // optional string ownerUserName = 13;
    if (has_ownerusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownerusername());
    }

    // required bool vipRoom = 14;
    if (has_viproom()) {
      total_size += 1 + 1;
    }

    // required bool passwordRequired = 15;
    if (has_passwordrequired()) {
      total_size += 1 + 1;
    }

    // optional string roomConfig = 16;
    if (has_roomconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomconfig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINRoomPlay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINRoomPlay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINRoomPlay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINRoomPlay::MergeFrom(const BINRoomPlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomindex()) {
      set_roomindex(from.roomindex());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomgroupid()) {
      set_roomgroupid(from.roomgroupid());
    }
    if (from.has_minbet()) {
      set_minbet(from.minbet());
    }
    if (from.has_minentermoney()) {
      set_minentermoney(from.minentermoney());
    }
    if (from.has_roomcapacity()) {
      set_roomcapacity(from.roomcapacity());
    }
    if (from.has_enteringplayer()) {
      set_enteringplayer(from.enteringplayer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playersize()) {
      set_playersize(from.playersize());
    }
    if (from.has_playingplayer()) {
      set_playingplayer(from.playingplayer());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_ownerusername()) {
      set_ownerusername(from.ownerusername());
    }
    if (from.has_viproom()) {
      set_viproom(from.viproom());
    }
    if (from.has_passwordrequired()) {
      set_passwordrequired(from.passwordrequired());
    }
    if (from.has_roomconfig()) {
      set_roomconfig(from.roomconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINRoomPlay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINRoomPlay::CopyFrom(const BINRoomPlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINRoomPlay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00006fff) != 0x00006fff) return false;

  return true;
}

void BINRoomPlay::Swap(BINRoomPlay* other) {
  if (other != this) {
    std::swap(roomindex_, other->roomindex_);
    std::swap(roomname_, other->roomname_);
    std::swap(roomid_, other->roomid_);
    std::swap(roomgroupid_, other->roomgroupid_);
    std::swap(minbet_, other->minbet_);
    std::swap(minentermoney_, other->minentermoney_);
    std::swap(roomcapacity_, other->roomcapacity_);
    std::swap(enteringplayer_, other->enteringplayer_);
    std::swap(playersize_, other->playersize_);
    std::swap(playingplayer_, other->playingplayer_);
    std::swap(level_, other->level_);
    std::swap(tax_, other->tax_);
    std::swap(ownerusername_, other->ownerusername_);
    std::swap(viproom_, other->viproom_);
    std::swap(passwordrequired_, other->passwordrequired_);
    std::swap(roomconfig_, other->roomconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINRoomPlay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINRoomPlay_descriptor_;
  metadata.reflection = BINRoomPlay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINFilterRoomResponse::kResponseCodeFieldNumber;
const int BINFilterRoomResponse::kMessageFieldNumber;
const int BINFilterRoomResponse::kRoomPlaysFieldNumber;
#endif  // !_MSC_VER

BINFilterRoomResponse::BINFilterRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINFilterRoomResponse::InitAsDefaultInstance() {
}

BINFilterRoomResponse::BINFilterRoomResponse(const BINFilterRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINFilterRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINFilterRoomResponse::~BINFilterRoomResponse() {
  SharedDtor();
}

void BINFilterRoomResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINFilterRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINFilterRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINFilterRoomResponse_descriptor_;
}

const BINFilterRoomResponse& BINFilterRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_filter_5froom_2eproto();
  return *default_instance_;
}

BINFilterRoomResponse* BINFilterRoomResponse::default_instance_ = NULL;

BINFilterRoomResponse* BINFilterRoomResponse::New() const {
  return new BINFilterRoomResponse;
}

void BINFilterRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  roomplays_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINFilterRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roomPlays;
        break;
      }

      // repeated .BINRoomPlay roomPlays = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomPlays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomplays()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roomPlays;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINFilterRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // repeated .BINRoomPlay roomPlays = 3;
  for (int i = 0; i < this->roomplays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->roomplays(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINFilterRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // repeated .BINRoomPlay roomPlays = 3;
  for (int i = 0; i < this->roomplays_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->roomplays(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINFilterRoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  // repeated .BINRoomPlay roomPlays = 3;
  total_size += 1 * this->roomplays_size();
  for (int i = 0; i < this->roomplays_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomplays(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINFilterRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINFilterRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINFilterRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINFilterRoomResponse::MergeFrom(const BINFilterRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomplays_.MergeFrom(from.roomplays_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINFilterRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINFilterRoomResponse::CopyFrom(const BINFilterRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINFilterRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < roomplays_size(); i++) {
    if (!this->roomplays(i).IsInitialized()) return false;
  }
  return true;
}

void BINFilterRoomResponse::Swap(BINFilterRoomResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    roomplays_.Swap(&other->roomplays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINFilterRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINFilterRoomResponse_descriptor_;
  metadata.reflection = BINFilterRoomResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
